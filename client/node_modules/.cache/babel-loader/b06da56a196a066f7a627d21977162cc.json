{"ast":null,"code":"'use strict';\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden level identifier\n * to allow the readable level property to be mutable for\n * operations like colorization\n *\n * @type {Symbol}\n */\n\nObject.defineProperty(exports, 'LEVEL', {\n  value: Symbol.for('level')\n});\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the final message property to not have\n * side effects on another.\n *\n * @type {Symbol}\n */\n\nObject.defineProperty(exports, 'MESSAGE', {\n  value: Symbol.for('message')\n});\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the extracted splat property be hidden\n *\n * @type {Symbol}\n */\n\nObject.defineProperty(exports, 'SPLAT', {\n  value: Symbol.for('splat')\n});\n/**\n * A shareable object constant  that can be used\n * as a standard configuration for winston@3.\n *\n * @type {Object}\n */\n\nObject.defineProperty(exports, 'configs', {\n  value: require('./config')\n});","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/triple-beam/index.js"],"names":["Object","defineProperty","exports","value","Symbol","for","require"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;AACtCC,EAAAA,KAAK,EAAEC,MAAM,CAACC,GAAP,CAAW,OAAX;AAD+B,CAAxC;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;AACxCC,EAAAA,KAAK,EAAEC,MAAM,CAACC,GAAP,CAAW,SAAX;AADiC,CAA1C;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,OAA/B,EAAwC;AACtCC,EAAAA,KAAK,EAAEC,MAAM,CAACC,GAAP,CAAW,OAAX;AAD+B,CAAxC;AAIA;AACA;AACA;AACA;AACA;AACA;;AACAL,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,SAA/B,EAA0C;AACxCC,EAAAA,KAAK,EAAEG,OAAO,CAAC,UAAD;AAD0B,CAA1C","sourcesContent":["'use strict';\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden level identifier\n * to allow the readable level property to be mutable for\n * operations like colorization\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'LEVEL', {\n  value: Symbol.for('level')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the final message property to not have\n * side effects on another.\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'MESSAGE', {\n  value: Symbol.for('message')\n});\n\n/**\n * A shareable symbol constant that can be used\n * as a non-enumerable / semi-hidden message identifier\n * to allow the extracted splat property be hidden\n *\n * @type {Symbol}\n */\nObject.defineProperty(exports, 'SPLAT', {\n  value: Symbol.for('splat')\n});\n\n/**\n * A shareable object constant  that can be used\n * as a standard configuration for winston@3.\n *\n * @type {Object}\n */\nObject.defineProperty(exports, 'configs', {\n  value: require('./config')\n});\n"]},"metadata":{},"sourceType":"script"}