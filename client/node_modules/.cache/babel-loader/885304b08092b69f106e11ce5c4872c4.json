{"ast":null,"code":"const Callable = require(\"./utils/callable.js\");\n\nconst pkg = require(\"../package.json\");\n\nconst Request = require(\"./LadybugRequest.js\");\n\nconst {\n  mergeObjects,\n  clone\n} = require(\"./utils/utils.js\");\n\nconst {\n  validateMethod\n} = require(\"./utils/validators.js\");\n\nconst RequestBase = require(\"./RequestBase.js\");\n/**\n * The base instance class\n * a global instance of this is also exported with default options.\n * you may use {@link create} to create an instance of this with more options\n * @constructor\n * @extends {Callable}\n */\n\n\nclass Ladybug extends Callable {\n  constructor(options = {}) {\n    if (!validateMethod(options.method || \"get\")) throw new Error(\"Invalid Request Method. Expected one of (`get`, `put`, `post`, `patch`, `delete`)\");\n    super((options.method || \"get\").toLowerCase());\n    this._query = {};\n    this.data = null;\n    this.headers = options.headers || {};\n    this.plugins = Array.isArray(options.plugins) ? options.plugins : [];\n    this.baseURL = options.baseURL;\n    this.get = this.get.bind(this);\n    this.post = this.post.bind(this);\n    this.delete = this.delete.bind(this);\n    this.patch = this.patch.bind(this);\n    this.put = this.put.bind(this);\n    this.request = this.request.bind(this);\n  }\n\n  request(method, url, options = {}) {\n    if (!validateMethod(method)) throw new Error(\"Invalid Request Method expected one of (`get`, `put`, `post`, `patch`, `delete`)\");\n    if (typeof url === \"object\") options = url;else options.url = url;\n    options.method = method.toUpperCase();\n    return new Request(mergeObjects({\n      // We clone a few stuff here because passing the reference into the class\n      // will cause the instance defaults to be touched.\n      headers: clone(this.headers),\n      query: clone(this._query),\n      plugins: clone(this.plugins),\n      baseURL: this.baseURL,\n      status: this.validateStatus,\n      promise: this.promiseLibrary\n    }, options));\n  }\n\n  get(...args) {\n    return this.request(\"GET\", ...args);\n  }\n\n  post(...args) {\n    return this.request(\"POST\", ...args);\n  }\n\n  put(...args) {\n    return this.request(\"PUT\", ...args);\n  }\n\n  patch(...args) {\n    return this.request(\"PATCH\", ...args);\n  }\n\n  delete(...args) {\n    return this.request(\"DELETE\", ...args);\n  }\n\n  del(...args) {\n    return this.request(\"DELETE\", ...args);\n  }\n\n  static create(options = {}) {\n    return new Ladybug(mergeObjects({\n      headers: {\n        \"User-Agent\": `ladybug-fetch/${pkg.version}`\n      }\n    }, options));\n  }\n\n} // A workaround for extending two classes.\n\n\nRequestBase.applyTo(Ladybug);\nmodule.exports = Ladybug;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/ladybug-fetch/src/Ladybug.js"],"names":["Callable","require","pkg","Request","mergeObjects","clone","validateMethod","RequestBase","Ladybug","constructor","options","method","Error","toLowerCase","_query","data","headers","plugins","Array","isArray","baseURL","get","bind","post","delete","patch","put","request","url","toUpperCase","query","status","validateStatus","promise","promiseLibrary","args","del","create","version","applyTo","module","exports"],"mappings":"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","sourcesContent":["const Callable = require(\"./utils/callable.js\");\nconst pkg = require(\"../package.json\");\nconst Request = require(\"./LadybugRequest.js\");\nconst { mergeObjects, clone } = require(\"./utils/utils.js\");\nconst { validateMethod } = require(\"./utils/validators.js\");\nconst RequestBase = require(\"./RequestBase.js\");\n\n/**\n * The base instance class\n * a global instance of this is also exported with default options.\n * you may use {@link create} to create an instance of this with more options\n * @constructor\n * @extends {Callable}\n */\nclass Ladybug extends Callable {\n  constructor(options = {}) {\n    if(!validateMethod(options.method || \"get\")) throw new Error(\"Invalid Request Method. Expected one of (`get`, `put`, `post`, `patch`, `delete`)\");\n    super((options.method || \"get\").toLowerCase());\n    this._query = {};\n    this.data = null;\n    this.headers = options.headers || {};\n    this.plugins = Array.isArray(options.plugins) ? options.plugins : [];\n    this.baseURL = options.baseURL;\n    this.get = this.get.bind(this);\n    this.post = this.post.bind(this);\n    this.delete = this.delete.bind(this);\n    this.patch = this.patch.bind(this);\n    this.put = this.put.bind(this);\n    this.request = this.request.bind(this);\n  }\n\n  request(method, url, options = {}) {\n    if(!validateMethod(method)) throw new Error(\"Invalid Request Method expected one of (`get`, `put`, `post`, `patch`, `delete`)\");\n    if(typeof url === \"object\") options = url;\n    else options.url = url;\n    options.method = method.toUpperCase();\n    return new Request(mergeObjects({\n      // We clone a few stuff here because passing the reference into the class\n      // will cause the instance defaults to be touched.\n      headers: clone(this.headers),\n      query: clone(this._query),\n      plugins: clone(this.plugins),\n      baseURL: this.baseURL,\n      status: this.validateStatus,\n      promise: this.promiseLibrary\n    }, options));\n  }\n\n  get(...args) {\n    return this.request(\"GET\", ...args);\n  }\n\n  post(...args) {\n    return this.request(\"POST\", ...args);\n  }\n\n  put(...args) {\n    return this.request(\"PUT\", ...args);\n  }\n\n  patch(...args) {\n    return this.request(\"PATCH\", ...args);\n  }\n\n  delete(...args) {\n    return this.request(\"DELETE\", ...args);\n  }\n\n  del(...args) {\n    return this.request(\"DELETE\", ...args);\n  }\n\n  static create(options = {}) {\n    return new Ladybug(mergeObjects({\n      headers: { \"User-Agent\": `ladybug-fetch/${pkg.version}` }\n    }, options));\n  }\n}\n\n// A workaround for extending two classes.\nRequestBase.applyTo(Ladybug);\n\n\nmodule.exports = Ladybug;\n"]},"metadata":{},"sourceType":"script"}