{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar _require = require('./colorize'),\n    Colorizer = _require.Colorizer;\n\nvar _require2 = require('./pad-levels'),\n    Padder = _require2.Padder;\n\nvar _require3 = require('triple-beam'),\n    configs = _require3.configs,\n    MESSAGE = _require3.MESSAGE;\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\n\n\nvar CliFormat = /*#__PURE__*/function () {\n  function CliFormat() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CliFormat);\n\n    if (!opts.levels) {\n      opts.levels = configs.npm.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n\n\n  _createClass(CliFormat, [{\n    key: \"transform\",\n    value: function transform(info, opts) {\n      this.colorizer.transform(this.padder.transform(info, opts), opts);\n      info[MESSAGE] = \"\".concat(info.level, \":\").concat(info.message);\n      return info;\n    }\n  }]);\n\n  return CliFormat;\n}();\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new CliFormat(opts);\n}; //\n// Attach the CliFormat for registration purposes\n//\n\n\nmodule.exports.Format = CliFormat;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/logform/dist/cli.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_require","require","Colorizer","_require2","Padder","_require3","configs","MESSAGE","CliFormat","opts","arguments","undefined","levels","npm","colorizer","padder","options","value","transform","info","concat","level","message","module","exports","Format"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('./colorize'),\n    Colorizer = _require.Colorizer;\n\nvar _require2 = require('./pad-levels'),\n    Padder = _require2.Padder;\n\nvar _require3 = require('triple-beam'),\n    configs = _require3.configs,\n    MESSAGE = _require3.MESSAGE;\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\n\n\nvar CliFormat = /*#__PURE__*/function () {\n  function CliFormat() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CliFormat);\n\n    if (!opts.levels) {\n      opts.levels = configs.npm.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n\n\n  _createClass(CliFormat, [{\n    key: \"transform\",\n    value: function transform(info, opts) {\n      this.colorizer.transform(this.padder.transform(info, opts), opts);\n      info[MESSAGE] = \"\".concat(info.level, \":\").concat(info.message);\n      return info;\n    }\n  }]);\n\n  return CliFormat;\n}();\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new CliFormat(opts);\n}; //\n// Attach the CliFormat for registration purposes\n//\n\n\nmodule.exports.Format = CliFormat;"]},"metadata":{},"sourceType":"script"}