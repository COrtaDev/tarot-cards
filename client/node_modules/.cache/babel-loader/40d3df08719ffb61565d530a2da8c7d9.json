{"ast":null,"code":"const ladybug = require(\"ladybug-fetch\");\n/**\n * Options for the wikia class\n * @typedef {WikiaOptions}\n * @property {String} [wiki] - Wiki name to use leave this empty for cross-wiki.\n */\n\n/**\n * Response object for getMinMaxWamIndexDates\n * @typedef {WamMinMaxDates}\n * @property {Date} maxDate - The Max Date.\n * @property {Date} minDate - The Min Date.\n */\n\n/**\n * Represents a client to interact with wikia api\n * @constructor\n * @param {WikiaOptions} [options={}] - Options for the instance.\n */\n\n\nclass Wikia {\n  constructor({\n    wiki\n  } = {}) {\n    /**\n     * The base URL used for requests.\n     * @type {String}\n     */\n    this.baseURL = `http://www.${wiki ? `${wiki}.` : \"\"}wikia.com/api/v1`;\n    /**\n     * The wiki name this instance was made for.\n     * @type {?String}\n     */\n\n    this.wiki = wiki;\n    /**\n     * The instance used for doing requests.\n     * @type {any}\n     */\n\n    this.request = ladybug.create({\n      baseURL: this.baseURL\n    }).set(\"User-Agent\", \"Wikia JavaScript (https://github.com/pollen5/wikia)\").accept(\"json\").set(\"Accept-Encoding\", \"gzip\").set(\"Content-Type\", \"application/json\");\n  }\n  /**\n   * Search for wikis\n   * @param {String} term - The Term to search.\n   * @param {Object} [options] - Options for this search.\n   * @param {Boolean} [options.expand=false] - Wether to request extended info.\n   * @param {String} [options.hub] - The name of the vertical (e.g. Gaming, Entertainment, Lifestyle, etc.) to use as a filter\n   * @param {String|Array<String>} [options.lang] - Array or comma seperated list of language codes to filter with.\n   * @param {Boolean} [options.includeDomain=true] - Wether to include the wiki domain in the results.\n   * @param {Number} [options.limit] - Amount to limit the results.\n   * @param {Number} [options.batch] - The batch/page index to retrieve.\n   * @returns {Promise<any>}\n   */\n\n\n  searchWikis(string, {\n    expand,\n    hub,\n    lang,\n    includeDomain = true,\n    limit,\n    batch\n  } = {}) {\n    const req = this.request(\"/Wikis/ByString\").query({\n      string,\n      includeDomain\n    });\n    if (Array.isArray(lang)) lang = lang.join(\",\");\n    if (hub) req.query({\n      hub\n    });\n    if (lang) req.query({\n      lang\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (expand) req.query({\n      expand: 1\n    });\n    if (batch) req.query({\n      batch\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get details of a wiki by id(s)\n   * @param {String|Array<String>} - Array or comma seperated list of ids to search\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.width] - Thumbnail width in pixels.\n   * @param {Number} [options.height] - Thumbnail height in pixels.\n   * @param {Number} [options.snippet] - Maximum number of words returned in description.\n   * @returns {Promise<any>} The returned details, in form of { id: { details } }\n   */\n\n\n  getDetails(ids, {\n    width,\n    height,\n    snippet\n  } = {}) {\n    if (Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/Wikis/Details\").query({\n      ids\n    });\n    if (width) req.query({\n      width\n    });\n    if (height) req.query({\n      height\n    });\n    if (snippet) req.query({\n      snippet\n    });\n    return req.then(res => res.body.items);\n  }\n  /**\n   * Gets top wikis.\n   * @param {Object} [options] - Options for this request.\n   * @param {Boolean} [options.expand=false] - Wether to request extended details.\n   * @param {Number} [options.limit] - Amount to limit the results to.\n   * @param {String} [options.hub] - The name of the vertical (e.g. Gaming, Entertainment, Lifestyle, etc.) to use as a filter\n   * @param {String|Array<String>} [options.lang] - Array of comma seperated list of languages to filter with.\n   * @param {Number} [options.batch] - The batch/page index to retrieve.\n   * @returns {Promise<Array<any>>}\n   */\n\n\n  getTopWikis({\n    expand,\n    limit,\n    hub,\n    lang,\n    batch\n  } = {}) {\n    const req = this.request(\"/Wikis/List\");\n    if (limit) req.query({\n      limit\n    });\n    if (hub) req.quey({\n      hub\n    });\n    if (Array.isArray(lang)) lang = lang.join(\",\");\n    if (lang) req.query({\n      lang\n    });\n    if (batch) req.query({\n      batch\n    });\n    if (expand) req.query({\n      expand: Number(expand)\n    });\n    return req.then(res => res.body.items);\n  }\n  /**\n   * Query for search suggestions. (requires a wiki)\n   * @param {String} query - The query to search.\n   * @returns {Array<String>}\n   */\n\n\n  searchSuggestions(query) {\n    if (!this.wiki) throw new Error(\"Search suggestions can only be used for a wiki not cross-wiki.\");\n    return this.request(\"/SearchSuggestions/List\").query({\n      query\n    }).then(res => (res.body.items || []).map(item => item.title));\n  }\n  /**\n   * Get WAM Score starting and last available dates.\n   * @returns {Promise<WamMinMaxDates>}\n   */\n\n\n  getMinMaxWamIndexDate() {\n    return this.request(\"/WAM/MinMaxWamIndexDate\").then(res => {\n      const min = res.body.min_max_dates.min_date * 1000;\n      const max = res.body.min_max_dates.max_date * 1000;\n      return {\n        maxDate: new Date(max),\n        minDate: new Date(min)\n      };\n    });\n  }\n  /**\n   * Get language codes of the wikis that are in the WAM ranking for a given day.\n   * @param {Number} [wamDay] - Unix timestamp (in seconds) of the day for the requested language code list.\n   * @returns {Promise<Array<String>>}\n   */\n\n\n  getWamLanguages(wamDay) {\n    const req = this.request(\"/WAM/WAMLanguages\"); // eslint-disable-next-line camelcase\n\n    if (wamDay) req.query({\n      wam_day: wamDay\n    });\n    return req.then(res => res.body.languages || []);\n  }\n  /**\n   * Get WAM Index (list of wikis with their list of WAM ranks)\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.wamDay] - day for which the WAM scores are displayed.\n   * @param {Number} [options.wamPreviousDay] - day from which the difference in WAM scores is calculated.\n   * @param {Number} [options.verticalID] - vertical for which wiki list is to be pulled.\n   * @param {String} [options.wikiLang] - Language code if narrowing the results to specific language.\n   * @param {Number} [options.wikiID] - Id of specific wiki to pull.\n   * @param {String} [options.wikiWord] - Fragment of url to search for amongst wikis.\n   * @param {Boolean} [options.excludeBlacklist] - Determines if exclude blacklisted wikis (with Content Warning enabled)\n   * @param {String} [options.sortColumn] - Column by which to sort.\n   * @param {String} [options.sortDirection] - Sort direction.\n   * @param {Number} [options.offset] - offset from the beginning of data.\n   * @param {Number} [options.limit] - limit on fetched number of wikis.\n   * @param {Boolean} [options.fetchAdmins] - Determines if admins of each wiki are to be returned.\n   * @param {Number} [options.avatarSize] - Size of admin avatars in pixels if fetchAdmins is enabled.\n   * @param {Boolean} [options.fetchWikiImages] - Determines if image of each wiki is to be returned.\n   * @param {Number} [options.wikiImageWidth] - Width of wiki image in pixels if fetchWikiImages is enabled.\n   * @param {Number} [options.wikiImageHeight] - Height of wiki image in pixels if fetchWikiImages is enabled. You can pass here -1 to keep aspect ratio.\n   * @returns {Promise<any>}\n   */\n\n\n  getWamIndex({\n    wamDay,\n    wamPreviousDay,\n    verticalID,\n    wikiLang,\n    wikiID,\n    wikiWord,\n    excludeBlacklist,\n    sortColumn,\n    sortDirection,\n    offset,\n    limit,\n    fetchAdmins,\n    avatarSize,\n    fetchWikiImages,\n    wikiImageWidth,\n    wikiImageHeight\n  } = {}) {\n    const req = this.request(\"/WAM/WAMIndex\");\n    /* eslint-disable camelcase */\n\n    if (wamDay) req.query({\n      wam_day: wamDay\n    });\n    if (wamPreviousDay) req.query({\n      wam_previous_day: wamPreviousDay\n    });\n    if (verticalID) req.query({\n      veritical_id: verticalID\n    });\n    if (wikiLang) req.query({\n      wiki_lang: wikiLang\n    });\n    if (wikiID) req.query({\n      wiki_id: wikiID\n    });\n    if (wikiWord) req.query({\n      wiki_word: wikiWord\n    });\n    if (excludeBlacklist) req.query({\n      exclude_blacklist: excludeBlacklist\n    });\n    if (sortColumn) req.query({\n      sort_column: sortColumn\n    });\n    if (sortDirection) req.query({\n      sort_direction: sortDirection\n    });\n    if (offset) req.query({\n      offset\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (typeof fetchAdmins !== \"undefined\") req.query({\n      fetch_admins: fetchAdmins\n    });\n    if (avatarSize) req.query({\n      avatar_size: avatarSize\n    });\n    if (typeof fetchWikiImages !== \"undefined\") req.query({\n      fetch_wiki_images: fetchWikiImages\n    });\n    if (wikiImageWidth) req.query({\n      wiki_image_width: wikiImageWidth\n    });\n    if (wikiImageHeight) req.query({\n      wiki_image_height: wikiImageHeight\n    });\n    /* eslint-enable camelcase */\n\n    return req.then(res => res.body);\n  }\n  /**\n   * Get details about selected users.\n   * @param {String|Array<String>} ids - Array or Comma-separated list of user ids. Maximum size of id list is 100.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.size=100] - The desired width (and height, because it is a square) for the thumbnail, defaults to 100, 0 for no thumbnail\n   * @returns {Promise<Array<any>>}\n   */\n\n\n  getUsers(ids, {\n    size\n  } = {}) {\n    if (Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/User/Details\");\n    if (typeof size !== \"undefined\") req.query({\n      size\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get pages related to a given article ID.\n   * @param {String|Array<String>} ids - Array or comma seperated list of article ids\n   * @param {Object} [options] - Options for the request.\n   * @param {Number} [options.limit] - Limit the returned results.\n   * @returns {Promise<any>}\n   */\n\n\n  getRelatedArticles(ids, {\n    limit\n  }) {\n    if (Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/RelatedPages/List\").query({\n      ids\n    });\n    if (limit) req.query({\n      limit\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get wiki navigation links (the main menu of given wiki)\n   * @returns {Promise<any>}\n   */\n\n\n  getNavigation() {\n    return this.request(\"/Navigation/Data\").then(res => res.body.navigation);\n  }\n  /**\n   * Get wiki data, including key values, navigation data, and more.\n   * @returns {Promise<any>}\n   */\n\n\n  getWikiData() {\n    return this.request(\"/Mercury/WikiVariables\").then(res => res.body);\n  }\n  /**\n   * Get latest activity information.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Boolean} [options.allowDuplicates=true] - Set if duplicate values of an article's revisions made by the same user are not allowed.\n   * @returns {Promise<Array<any>>}\n   */\n\n\n  getLatestActivity({\n    limit,\n    namespaces,\n    allowDuplicates\n  } = {}) {\n    const req = this.request(\"/Activity/LatestActivity\");\n    if (limit) req.query({\n      limit\n    });\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (typeof allowDuplicates !== \"undefined\") req.query({\n      allowDuplicates\n    });\n    return req.then(res => res.body.items);\n  }\n  /**\n   * Get recently changes articles.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Boolean} [options.allowDuplicates=true] - Set if duplicate values of an article's revisions made by the same user are not allowed.\n   * @returns {Promise<Array<any>>}\n  */\n\n\n  getRecentlyChangedArticles({\n    limit,\n    namespaces,\n    allowDuplicates\n  } = {}) {\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Activity/RecentlyChangedArticles\");\n    if (limit) req.query({\n      limit\n    });\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (typeof allowDuplicates !== \"undefined\") req.query({\n      allowDuplicates\n    });\n    return req.then(res => res.body.items);\n  }\n  /**\n   * Get results for combined (wiki and cross-wiki) search.\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this search.\n   * @param {String|Array<String>} [options.langs] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String|Array<String>} [options.hubs] - Array or Comma-separated list of verticals (e.g. Gaming, Entertainment, Lifestyle)\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Will limit number of articles returned to given number.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @returns {Promise<any>}\n   */\n\n\n  searchCombined(query, {\n    langs,\n    hubs,\n    namespaces,\n    limit,\n    minArticleQuality\n  } = {}) {\n    const req = this.request(\"/Search/Combined\").query({\n      query\n    });\n    if (Array.isArray(langs)) langs = langs.join(\",\");\n    if (Array.isArray(hubs)) hubs = hubs.join(\",\");\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if (langs) req.query({\n      langs\n    });\n    if (hubs) req.query({\n      hubs\n    });\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (typeof minArticleQuality !== \"undefined\") req.query({\n      minArticleQuality\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get results for cross-wiki search.\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this request.\n   * @param {String|Array<String>} [options.hub] - Array or Comma-separated list of verticals (e.g. Gaming, Entertainment, Lifestyle)\n   * @param {String|Array<String>} [options.lang] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String} [options.rank] - The ranking to use in fetching the list of results, one of default, newest, oldest, recently-modified, stable, most-viewed, freshest, stalest.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {Number} [options.batch] - The batch (page) of results to fetch.\n   * @returns {Promise<any>}\n   * @param {Boolean} [options.expand] - Wether to request extended details. (always true if a wiki is provided on the instance.)\n   * @param {Number} [options.height] - The desired height for the thumbnail. (only used if expand is true)\n   * @param {Number} [options.width] - The desired width for the thumbnail. (only used if expand is true)\n   * @param {Number} [options.snippet] - Maximum number of words returned in description. (only used if expand is true)\n   */\n\n\n  searchCrossWiki(query, {\n    expand = Boolean(this.wiki),\n    hub,\n    lang,\n    rank,\n    limit,\n    batch,\n    height,\n    width,\n    snippet\n  } = {}) {\n    const req = this.request(\"/Search/CrossWiki\").query({\n      query\n    });\n    if (Array.isArray(hub)) hub = hub.join(\",\");\n    if (Array.isArray(lang)) lang = lang.join(\",\");\n    if (hub) req.query({\n      hub\n    });\n    if (lang) req.query({\n      lang\n    });\n    if (rank) req.query({\n      rank\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (batch) req.query({\n      batch\n    });\n    if (expand) req.query({\n      expand\n    });\n    if (expand && width) req.query({\n      width\n    });\n    if (expand && height) req.query({\n      height\n    });\n    if (expand && snippet) req.query({\n      snippet\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Do search for a given phrase. (only available if a wiki is provided on the instance.)\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this search.\n   * @param {String} [options.type=articles] - The search type, either articles (default) or videos. For 'videos' value, this parameter should be used with namespaces parameter (namespaces needs to be set to 6)\n   * @param {String} [options.rank] - The ranking to use in fetching the list of results, one of default, newest, oldest, recently-modified, stable, most-viewed, freshest, stalest\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @param {Number} [options.batch] - The batch (page) of results to fetch.\n   * @param {String} [options.namespaces] - Page namespace number, see more: http://community.wikia.com/wiki/Help:Namespaces\n   */\n\n\n  search(query, {\n    type,\n    rank,\n    limit,\n    minArticleQuality,\n    batch,\n    namespaces\n  } = {}) {\n    if (!this.wiki) throw new Error(\"search() is only available if a wiki is provided.\");\n    const req = this.request(\"/Search/List\").query({\n      query\n    });\n    if (type) req.query({\n      type\n    });\n    if (rank) req.query({\n      rank\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (typeof minArticleQuality !== \"undefined\") req.query({\n      minArticleQuality\n    });\n    if (batch) req.query({\n      batch\n    });\n    if (namespaces) req.query({\n      namespaces\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get a simplified article with an ID.\n   * @param {Number|String} id - Article ID to get.\n   * @returns {Promise<Array<any>>} Article data\n   */\n\n\n  getSimplifiedArticle(id) {\n    return this.request(\"/Articles/AsSimpleJson\").query({\n      id\n    }).then(res => res.body.sections);\n  }\n  /**\n   * Get details about one or more articles.\n   * @param {String|Array<String>} ids - Array or Comma-separated list of article ids.\n   * @param {Object} [options] - Extra options to customize the response.\n   * @param {String|Array<String>} [options.titles] - Titles with underscores instead of spaces, Array or comma-separated.\n   * @param {Number} [options.abstract] - The desired length for the article's abstract.\n   * @param {Number} [options.width] - The desired width for the thumbnail.\n   * @param {Number} [options.height] - The desired height for the thumbnail.\n   * @returns {Promise<any>} Article(s) details.\n   */\n\n\n  getArticleDetails(ids, {\n    titles,\n    abstract,\n    width,\n    height\n  } = {}) {\n    if (Array.isArray(ids)) ids = ids.join(\",\");\n    if (Array.isArray(titles)) titles = titles.join(\",\");\n    const req = this.request(\"/Articles/Details\").query({\n      ids\n    });\n    if (titles) req.query({\n      titles\n    });\n    if (abstract) req.query({\n      abstract\n    });\n    if (width) req.query({\n      width\n    });\n    if (height) req.query({\n      height\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get articles list in alphabetical order.\n   * @param {Object} [options] - Options to customize the response.\n   * @param {String} [options.category] - Return only articles belonging to the provided valid category title.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String} [options.offset] - Lexicographically minimal article title.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n\n\n  getArticlesList({\n    category,\n    namespaces,\n    limit,\n    offset,\n    expand = false\n  } = {}) {\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/List\");\n    if (category) req.query({\n      category\n    });\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (offset) req.query({\n      offset\n    });\n    if (expand) req.query({\n      expand: 1\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get the most linked articles on this wiki.\n   * @param {Object} [options] - Options for customizing response.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n\n\n  getMostLinkedArtices({\n    expand = false\n  } = {}) {\n    const req = this.request(\"/Articles/MostLinked\");\n    if (expand) req.query({\n      expand: 1\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get list of new articles on this wiki. (requires a wiki to be set.)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 100.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @returns {Promise<any>} Articles data.\n   */\n\n\n  getNewArticles({\n    namespaces,\n    limit,\n    minArticleQuality\n  } = {}) {\n    if (!this.wiki) throw new Error(\"A wiki must be set to use this method.\");\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/New\");\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (typeof minArticleQuality !== \"undefined\") req.query({\n      minArticleQuality\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get popular articles for the current wiki (from the beginning of time)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 10.\n   * @param {Number} [options.baseArticleId] - Trending and popular related to article with given id.\n   * @param {Boolean} [options.expand] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n\n\n  getPopularArticles({\n    limit,\n    baseArticleId,\n    expand = false\n  } = {}) {\n    const req = this.request(\"/Articles/Popular\");\n    if (limit) req.query({\n      limit\n    });\n    if (baseArticleId) req.query({\n      baseArticleId\n    });\n    if (expand) req.query({\n      expand: 1\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get the most viewed articles on this wiki.\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 250.\n   * @param {Number} [options.baseArticleId] - Trending and popular related to article with given id.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>} - Article(s) Data.\n   */\n\n\n  getTopArticles({\n    namespaces,\n    limit,\n    baseArticleId,\n    expand = false\n  } = {}) {\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/Top\");\n    if (namespaces) req.query({\n      namespaces\n    });\n    if (limit) req.query({\n      limit\n    });\n    if (baseArticleId) req.query({\n      baseArticleId\n    });\n    if (expand) req.query({\n      expand: 1\n    });\n    return req.then(res => res.body);\n  }\n  /**\n   * Get the top articles by pageviews for a hub.\n   * @param {String} hub - The name of the vertical (e.g. Gaming)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.lang] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String|Array<String>} [options.namespaces] - Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @returns {Promise<Array<any>>} Articles data.\n   */\n\n\n  getTopArticlesByHub(hub, {\n    lang,\n    namespaces\n  } = {}) {\n    if (Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if (Array.isArray(lang)) lang = lang.join(\",\");\n    const req = this.request(\"/Articles/TopByHub\");\n    if (lang) req.query({\n      lang\n    });\n    if (namespaces) req.query({\n      namespaces\n    });\n    return req.then(res => res.body.items);\n  }\n\n}\n\nWikia.version = require(\"../package.json\").version;\nmodule.exports = Wikia;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/wikia/src/Wikia.js"],"names":["ladybug","require","Wikia","constructor","wiki","baseURL","request","create","set","accept","searchWikis","string","expand","hub","lang","includeDomain","limit","batch","req","query","Array","isArray","join","then","res","body","getDetails","ids","width","height","snippet","items","getTopWikis","quey","Number","searchSuggestions","Error","map","item","title","getMinMaxWamIndexDate","min","min_max_dates","min_date","max","max_date","maxDate","Date","minDate","getWamLanguages","wamDay","wam_day","languages","getWamIndex","wamPreviousDay","verticalID","wikiLang","wikiID","wikiWord","excludeBlacklist","sortColumn","sortDirection","offset","fetchAdmins","avatarSize","fetchWikiImages","wikiImageWidth","wikiImageHeight","wam_previous_day","veritical_id","wiki_lang","wiki_id","wiki_word","exclude_blacklist","sort_column","sort_direction","fetch_admins","avatar_size","fetch_wiki_images","wiki_image_width","wiki_image_height","getUsers","size","getRelatedArticles","getNavigation","navigation","getWikiData","getLatestActivity","namespaces","allowDuplicates","getRecentlyChangedArticles","searchCombined","langs","hubs","minArticleQuality","searchCrossWiki","Boolean","rank","search","type","getSimplifiedArticle","id","sections","getArticleDetails","titles","abstract","getArticlesList","category","getMostLinkedArtices","getNewArticles","getPopularArticles","baseArticleId","getTopArticles","getTopArticlesByHub","version","module","exports"],"mappings":"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","sourcesContent":["const ladybug = require(\"ladybug-fetch\");\n\n/**\n * Options for the wikia class\n * @typedef {WikiaOptions}\n * @property {String} [wiki] - Wiki name to use leave this empty for cross-wiki.\n */\n\n/**\n * Response object for getMinMaxWamIndexDates\n * @typedef {WamMinMaxDates}\n * @property {Date} maxDate - The Max Date.\n * @property {Date} minDate - The Min Date.\n */\n\n/**\n * Represents a client to interact with wikia api\n * @constructor\n * @param {WikiaOptions} [options={}] - Options for the instance.\n */\nclass Wikia {\n  constructor({ wiki } = {}) {\n\n    /**\n     * The base URL used for requests.\n     * @type {String}\n     */\n    this.baseURL = `http://www.${wiki ? `${wiki}.` : \"\"}wikia.com/api/v1`;\n\n    /**\n     * The wiki name this instance was made for.\n     * @type {?String}\n     */\n    this.wiki = wiki;\n\n    /**\n     * The instance used for doing requests.\n     * @type {any}\n     */\n    this.request = ladybug.create({ baseURL: this.baseURL })\n      .set(\"User-Agent\", \"Wikia JavaScript (https://github.com/pollen5/wikia)\")\n      .accept(\"json\")\n      .set(\"Accept-Encoding\", \"gzip\")\n      .set(\"Content-Type\", \"application/json\");\n  }\n  \n  /**\n   * Search for wikis\n   * @param {String} term - The Term to search.\n   * @param {Object} [options] - Options for this search.\n   * @param {Boolean} [options.expand=false] - Wether to request extended info.\n   * @param {String} [options.hub] - The name of the vertical (e.g. Gaming, Entertainment, Lifestyle, etc.) to use as a filter\n   * @param {String|Array<String>} [options.lang] - Array or comma seperated list of language codes to filter with.\n   * @param {Boolean} [options.includeDomain=true] - Wether to include the wiki domain in the results.\n   * @param {Number} [options.limit] - Amount to limit the results.\n   * @param {Number} [options.batch] - The batch/page index to retrieve.\n   * @returns {Promise<any>}\n   */\n  searchWikis(string, { expand, hub, lang, includeDomain = true, limit, batch } = {}) {\n    const req = this.request(\"/Wikis/ByString\")\n      .query({ string, includeDomain });\n    if(Array.isArray(lang)) lang = lang.join(\",\");\n    if(hub) req.query({ hub });\n    if(lang) req.query({ lang });\n    if(limit) req.query({ limit });\n    if(expand) req.query({ expand: 1 });\n    if(batch) req.query({ batch });\n    return req.then((res) => res.body);\n  }\n  \n  /**\n   * Get details of a wiki by id(s)\n   * @param {String|Array<String>} - Array or comma seperated list of ids to search\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.width] - Thumbnail width in pixels.\n   * @param {Number} [options.height] - Thumbnail height in pixels.\n   * @param {Number} [options.snippet] - Maximum number of words returned in description.\n   * @returns {Promise<any>} The returned details, in form of { id: { details } }\n   */\n  getDetails(ids, { width, height, snippet } = {}) {\n    if(Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/Wikis/Details\")\n      .query({ ids });\n    if(width) req.query({ width });\n    if(height) req.query({ height });\n    if(snippet) req.query({ snippet });\n    return req.then((res) => res.body.items);\n  }\n\n  /**\n   * Gets top wikis.\n   * @param {Object} [options] - Options for this request.\n   * @param {Boolean} [options.expand=false] - Wether to request extended details.\n   * @param {Number} [options.limit] - Amount to limit the results to.\n   * @param {String} [options.hub] - The name of the vertical (e.g. Gaming, Entertainment, Lifestyle, etc.) to use as a filter\n   * @param {String|Array<String>} [options.lang] - Array of comma seperated list of languages to filter with.\n   * @param {Number} [options.batch] - The batch/page index to retrieve.\n   * @returns {Promise<Array<any>>}\n   */\n  getTopWikis({ expand, limit, hub, lang, batch } = {}) {\n    const req = this.request(\"/Wikis/List\");\n    if(limit) req.query({ limit });\n    if(hub) req.quey({ hub });\n    if(Array.isArray(lang)) lang = lang.join(\",\");\n    if(lang) req.query({ lang });\n    if(batch) req.query({ batch });\n    if(expand) req.query({ expand: Number(expand) });\n    return req.then((res) => res.body.items);\n  }\n\n  /**\n   * Query for search suggestions. (requires a wiki)\n   * @param {String} query - The query to search.\n   * @returns {Array<String>}\n   */\n  searchSuggestions(query) {\n    if(!this.wiki) throw new Error(\"Search suggestions can only be used for a wiki not cross-wiki.\");\n    return this.request(\"/SearchSuggestions/List\")\n      .query({ query })\n      .then((res) => (res.body.items || []).map((item) => item.title));\n  }\n\n  /**\n   * Get WAM Score starting and last available dates.\n   * @returns {Promise<WamMinMaxDates>}\n   */\n  getMinMaxWamIndexDate() {\n    return this.request(\"/WAM/MinMaxWamIndexDate\")\n      .then((res) => {\n        const min = res.body.min_max_dates.min_date * 1000;\n        const max = res.body.min_max_dates.max_date * 1000;\n        return { maxDate: new Date(max), minDate: new Date(min) };\n      });\n  }\n\n  /**\n   * Get language codes of the wikis that are in the WAM ranking for a given day.\n   * @param {Number} [wamDay] - Unix timestamp (in seconds) of the day for the requested language code list.\n   * @returns {Promise<Array<String>>}\n   */\n  getWamLanguages(wamDay) {\n    const req = this.request(\"/WAM/WAMLanguages\");\n    // eslint-disable-next-line camelcase\n    if(wamDay) req.query({ wam_day: wamDay });\n    return req.then((res) => res.body.languages || []);\n  }\n\n  /**\n   * Get WAM Index (list of wikis with their list of WAM ranks)\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.wamDay] - day for which the WAM scores are displayed.\n   * @param {Number} [options.wamPreviousDay] - day from which the difference in WAM scores is calculated.\n   * @param {Number} [options.verticalID] - vertical for which wiki list is to be pulled.\n   * @param {String} [options.wikiLang] - Language code if narrowing the results to specific language.\n   * @param {Number} [options.wikiID] - Id of specific wiki to pull.\n   * @param {String} [options.wikiWord] - Fragment of url to search for amongst wikis.\n   * @param {Boolean} [options.excludeBlacklist] - Determines if exclude blacklisted wikis (with Content Warning enabled)\n   * @param {String} [options.sortColumn] - Column by which to sort.\n   * @param {String} [options.sortDirection] - Sort direction.\n   * @param {Number} [options.offset] - offset from the beginning of data.\n   * @param {Number} [options.limit] - limit on fetched number of wikis.\n   * @param {Boolean} [options.fetchAdmins] - Determines if admins of each wiki are to be returned.\n   * @param {Number} [options.avatarSize] - Size of admin avatars in pixels if fetchAdmins is enabled.\n   * @param {Boolean} [options.fetchWikiImages] - Determines if image of each wiki is to be returned.\n   * @param {Number} [options.wikiImageWidth] - Width of wiki image in pixels if fetchWikiImages is enabled.\n   * @param {Number} [options.wikiImageHeight] - Height of wiki image in pixels if fetchWikiImages is enabled. You can pass here -1 to keep aspect ratio.\n   * @returns {Promise<any>}\n   */\n  getWamIndex({ wamDay, wamPreviousDay, verticalID, wikiLang, wikiID, wikiWord, excludeBlacklist, sortColumn, sortDirection, offset, limit, fetchAdmins, avatarSize, fetchWikiImages, wikiImageWidth, wikiImageHeight } = {}) {\n    const req = this.request(\"/WAM/WAMIndex\");\n    /* eslint-disable camelcase */\n    if(wamDay) req.query({ wam_day: wamDay });\n    if(wamPreviousDay) req.query({ wam_previous_day: wamPreviousDay });\n    if(verticalID) req.query({ veritical_id: verticalID });\n    if(wikiLang) req.query({ wiki_lang: wikiLang });\n    if(wikiID) req.query({ wiki_id: wikiID });\n    if(wikiWord) req.query({ wiki_word: wikiWord });\n    if(excludeBlacklist) req.query({ exclude_blacklist: excludeBlacklist });\n    if(sortColumn) req.query({ sort_column: sortColumn });\n    if(sortDirection) req.query({ sort_direction: sortDirection });\n    if(offset) req.query({ offset });\n    if(limit) req.query({ limit });\n    if(typeof fetchAdmins !== \"undefined\") req.query({ fetch_admins: fetchAdmins });\n    if(avatarSize) req.query({ avatar_size: avatarSize });\n    if(typeof fetchWikiImages !== \"undefined\") req.query({ fetch_wiki_images: fetchWikiImages });\n    if(wikiImageWidth) req.query({ wiki_image_width: wikiImageWidth });\n    if(wikiImageHeight) req.query({ wiki_image_height: wikiImageHeight });\n    /* eslint-enable camelcase */\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get details about selected users.\n   * @param {String|Array<String>} ids - Array or Comma-separated list of user ids. Maximum size of id list is 100.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.size=100] - The desired width (and height, because it is a square) for the thumbnail, defaults to 100, 0 for no thumbnail\n   * @returns {Promise<Array<any>>}\n   */\n  getUsers(ids, { size } = {}) {\n    if(Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/User/Details\");\n    if(typeof size !== \"undefined\") req.query({ size });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get pages related to a given article ID.\n   * @param {String|Array<String>} ids - Array or comma seperated list of article ids\n   * @param {Object} [options] - Options for the request.\n   * @param {Number} [options.limit] - Limit the returned results.\n   * @returns {Promise<any>}\n   */\n  getRelatedArticles(ids, { limit }) {\n    if(Array.isArray(ids)) ids = ids.join(\",\");\n    const req = this.request(\"/RelatedPages/List\")\n      .query({ ids });\n    if(limit) req.query({ limit });\n    return req.then((res) => res.body);  \n  }\n\n  /**\n   * Get wiki navigation links (the main menu of given wiki)\n   * @returns {Promise<any>}\n   */\n  getNavigation() {\n    return this.request(\"/Navigation/Data\")\n      .then((res) => res.body.navigation);\n  }\n\n  /**\n   * Get wiki data, including key values, navigation data, and more.\n   * @returns {Promise<any>}\n   */\n  getWikiData() {\n    return this.request(\"/Mercury/WikiVariables\")\n      .then((res) => res.body);\n  }\n\n  /**\n   * Get latest activity information.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Boolean} [options.allowDuplicates=true] - Set if duplicate values of an article's revisions made by the same user are not allowed.\n   * @returns {Promise<Array<any>>}\n   */\n  getLatestActivity({ limit, namespaces, allowDuplicates } = {}) {\n    const req = this.request(\"/Activity/LatestActivity\");\n    if(limit) req.query({ limit });\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if(namespaces) req.query({ namespaces });\n    if(typeof allowDuplicates !== \"undefined\") req.query({ allowDuplicates });\n    return req.then((res) => res.body.items);\n  }\n\n  /**\n   * Get recently changes articles.\n   * @param {Object} [options] - Options for this request.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Boolean} [options.allowDuplicates=true] - Set if duplicate values of an article's revisions made by the same user are not allowed.\n   * @returns {Promise<Array<any>>}\n  */\n  getRecentlyChangedArticles({ limit, namespaces, allowDuplicates } = {}) {\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Activity/RecentlyChangedArticles\");\n    if(limit) req.query({ limit });\n    if(namespaces) req.query({ namespaces });\n    if(typeof allowDuplicates !== \"undefined\") req.query({ allowDuplicates });\n    return req.then((res) => res.body.items);\n  }\n\n  /**\n   * Get results for combined (wiki and cross-wiki) search.\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this search.\n   * @param {String|Array<String>} [options.langs] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String|Array<String>} [options.hubs] - Array or Comma-separated list of verticals (e.g. Gaming, Entertainment, Lifestyle)\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Will limit number of articles returned to given number.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @returns {Promise<any>}\n   */\n  searchCombined(query, { langs, hubs, namespaces, limit, minArticleQuality } = {}) {\n    const req = this.request(\"/Search/Combined\")\n      .query({ query });\n    if(Array.isArray(langs)) langs = langs.join(\",\");\n    if(Array.isArray(hubs)) hubs = hubs.join(\",\");\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if(langs) req.query({ langs });\n    if(hubs) req.query({ hubs });\n    if(namespaces) req.query({ namespaces });\n    if(limit) req.query({ limit });\n    if(typeof minArticleQuality !== \"undefined\") req.query({ minArticleQuality });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get results for cross-wiki search.\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this request.\n   * @param {String|Array<String>} [options.hub] - Array or Comma-separated list of verticals (e.g. Gaming, Entertainment, Lifestyle)\n   * @param {String|Array<String>} [options.lang] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String} [options.rank] - The ranking to use in fetching the list of results, one of default, newest, oldest, recently-modified, stable, most-viewed, freshest, stalest.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {Number} [options.batch] - The batch (page) of results to fetch.\n   * @returns {Promise<any>}\n   * @param {Boolean} [options.expand] - Wether to request extended details. (always true if a wiki is provided on the instance.)\n   * @param {Number} [options.height] - The desired height for the thumbnail. (only used if expand is true)\n   * @param {Number} [options.width] - The desired width for the thumbnail. (only used if expand is true)\n   * @param {Number} [options.snippet] - Maximum number of words returned in description. (only used if expand is true)\n   */\n  searchCrossWiki(query, { expand = Boolean(this.wiki), hub, lang, rank, limit, batch, height, width, snippet } = {}) {\n    const req = this.request(\"/Search/CrossWiki\")\n      .query({ query });\n    if(Array.isArray(hub)) hub = hub.join(\",\");\n    if(Array.isArray(lang)) lang = lang.join(\",\");\n    if(hub) req.query({ hub });\n    if(lang) req.query({ lang });\n    if(rank) req.query({ rank });\n    if(limit) req.query({ limit });\n    if(batch) req.query({ batch });\n    if(expand) req.query({ expand });\n    if(expand && width) req.query({ width });\n    if(expand && height) req.query({ height });\n    if(expand && snippet) req.query({ snippet });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Do search for a given phrase. (only available if a wiki is provided on the instance.)\n   * @param {String} query - Search query.\n   * @param {Object} [options] - Options for this search.\n   * @param {String} [options.type=articles] - The search type, either articles (default) or videos. For 'videos' value, this parameter should be used with namespaces parameter (namespaces needs to be set to 6)\n   * @param {String} [options.rank] - The ranking to use in fetching the list of results, one of default, newest, oldest, recently-modified, stable, most-viewed, freshest, stalest\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @param {Number} [options.batch] - The batch (page) of results to fetch.\n   * @param {String} [options.namespaces] - Page namespace number, see more: http://community.wikia.com/wiki/Help:Namespaces\n   */\n  search(query, { type, rank, limit, minArticleQuality, batch, namespaces } = {}) {\n    if(!this.wiki) throw new Error(\"search() is only available if a wiki is provided.\");\n    const req = this.request(\"/Search/List\")\n      .query({ query });\n    if(type) req.query({ type });\n    if(rank) req.query({ rank });\n    if(limit) req.query({ limit });\n    if(typeof minArticleQuality !== \"undefined\") req.query({ minArticleQuality });\n    if(batch) req.query({ batch });\n    if(namespaces) req.query({ namespaces });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get a simplified article with an ID.\n   * @param {Number|String} id - Article ID to get.\n   * @returns {Promise<Array<any>>} Article data\n   */\n  getSimplifiedArticle(id) {\n    return this.request(\"/Articles/AsSimpleJson\")\n      .query({ id })\n      .then((res) => res.body.sections);\n  }\n\n  /**\n   * Get details about one or more articles.\n   * @param {String|Array<String>} ids - Array or Comma-separated list of article ids.\n   * @param {Object} [options] - Extra options to customize the response.\n   * @param {String|Array<String>} [options.titles] - Titles with underscores instead of spaces, Array or comma-separated.\n   * @param {Number} [options.abstract] - The desired length for the article's abstract.\n   * @param {Number} [options.width] - The desired width for the thumbnail.\n   * @param {Number} [options.height] - The desired height for the thumbnail.\n   * @returns {Promise<any>} Article(s) details.\n   */\n  getArticleDetails(ids, { titles, abstract, width, height } = {}) {\n    if(Array.isArray(ids)) ids = ids.join(\",\");\n    if(Array.isArray(titles)) titles = titles.join(\",\");\n    const req = this.request(\"/Articles/Details\")\n      .query({ ids });\n    if(titles) req.query({ titles });\n    if(abstract) req.query({ abstract });\n    if(width) req.query({ width });\n    if(height) req.query({ height });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get articles list in alphabetical order.\n   * @param {Object} [options] - Options to customize the response.\n   * @param {String} [options.category] - Return only articles belonging to the provided valid category title.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces.\n   * @param {Number} [options.limit] - Limit the number of results.\n   * @param {String} [options.offset] - Lexicographically minimal article title.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n  getArticlesList({ category, namespaces, limit, offset, expand = false } = {}) {\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/List\");\n    if(category) req.query({ category });\n    if(namespaces) req.query({ namespaces });\n    if(limit) req.query({ limit });\n    if(offset) req.query({ offset });\n    if(expand) req.query({ expand: 1 });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get the most linked articles on this wiki.\n   * @param {Object} [options] - Options for customizing response.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n  getMostLinkedArtices({ expand = false } = {}) {\n    const req = this.request(\"/Articles/MostLinked\");\n    if(expand) req.query({ expand: 1 });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get list of new articles on this wiki. (requires a wiki to be set.)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 100.\n   * @param {Number} [options.minArticleQuality] - Minimal value of article quality. Ranges from 0 to 99.\n   * @returns {Promise<any>} Articles data.\n   */\n  getNewArticles({ namespaces, limit, minArticleQuality } = {}) {\n    if(!this.wiki) throw new Error(\"A wiki must be set to use this method.\");\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/New\");\n    if(namespaces) req.query({ namespaces });\n    if(limit) req.query({ limit });\n    if(typeof minArticleQuality !== \"undefined\") req.query({ minArticleQuality });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get popular articles for the current wiki (from the beginning of time)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 10.\n   * @param {Number} [options.baseArticleId] - Trending and popular related to article with given id.\n   * @param {Boolean} [options.expand] - Wether to request expanded data.\n   * @returns {Promise<any>}\n   */\n  getPopularArticles({ limit, baseArticleId, expand = false } = {}) {\n    const req = this.request(\"/Articles/Popular\");\n    if(limit) req.query({ limit });\n    if(baseArticleId) req.query({ baseArticleId });\n    if(expand) req.query({ expand: 1 });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get the most viewed articles on this wiki.\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.namespaces] - Array or Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @param {Number} [options.limit] - Limit the number of result - maximum limit is 250.\n   * @param {Number} [options.baseArticleId] - Trending and popular related to article with given id.\n   * @param {Boolean} [options.expand=false] - Wether to request expanded data.\n   * @returns {Promise<any>} - Article(s) Data.\n   */\n  getTopArticles({ namespaces, limit, baseArticleId, expand = false } = {}) {\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    const req = this.request(\"/Articles/Top\");\n    if(namespaces) req.query({ namespaces });\n    if(limit) req.query({ limit });\n    if(baseArticleId) req.query({ baseArticleId });\n    if(expand) req.query({ expand: 1 });\n    return req.then((res) => res.body);\n  }\n\n  /**\n   * Get the top articles by pageviews for a hub.\n   * @param {String} hub - The name of the vertical (e.g. Gaming)\n   * @param {Object} [options] - Options for customizing the response.\n   * @param {String|Array<String>} [options.lang] - Array or Comma separated language codes (e.g. en,de,fr)\n   * @param {String|Array<String>} [options.namespaces] - Comma-separated namespace ids, see more: http://community.wikia.com/wiki/Help:Namespaces\n   * @returns {Promise<Array<any>>} Articles data.\n   */\n  getTopArticlesByHub(hub, { lang, namespaces } = {}) {\n    if(Array.isArray(namespaces)) namespaces = namespaces.join(\",\");\n    if(Array.isArray(lang)) lang = lang.join(\",\");\n    const req = this.request(\"/Articles/TopByHub\");\n    if(lang) req.query({ lang });\n    if(namespaces) req.query({ namespaces });\n    return req.then((res) => res.body.items);\n  }\n}\n\nWikia.version = require(\"../package.json\").version;\n\nmodule.exports = Wikia;\n"]},"metadata":{},"sourceType":"script"}