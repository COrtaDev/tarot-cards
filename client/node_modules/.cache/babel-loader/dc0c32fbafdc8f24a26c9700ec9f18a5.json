{"ast":null,"code":"/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\nvar parse5 = require('parse5');\n\nvar htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');\n\nvar domhandler = require('domhandler');\n\nvar DomUtils = htmlparser.DomUtils;\n/*\n  Parser\n*/\n\nexports = module.exports = function parse(content, options, isDocument) {\n  // options = options || $.fn.options;\n  var dom;\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n    dom = useHtmlParser2 ? htmlparser.parseDocument(content, options) : parseWithParse5(content, options, isDocument);\n  } else {\n    if (typeof content === 'object' && content != null && content.type === 'root') {\n      dom = content;\n    } else {\n      // Generic root element\n      var root = new domhandler.Document(content);\n      content.forEach(function (node) {\n        node.parent = root;\n      });\n      dom = root;\n    }\n  }\n\n  return dom;\n};\n\nfunction parseWithParse5(content, options, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment;\n  return parse(content, {\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo\n  });\n}\n/*\n  Update the dom structure, for one changed layer\n*/\n\n\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr]; // Update parent\n\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  } // Update neighbors\n\n\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i]; // Cleanly remove existing nodes from their previous structures.\n\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/cheerio/lib/parse.js"],"names":["htmlparser","require","parse5","htmlparser2Adapter","domhandler","DomUtils","exports","module","parse","content","options","isDocument","dom","Buffer","isBuffer","toString","useHtmlParser2","xmlMode","_useHtmlParser2","parseDocument","parseWithParse5","type","root","Document","forEach","node","parent","parseFragment","treeAdapter","sourceCodeLocationInfo","update","arr","Array","isArray","children","i","length","removeElement","prev","next"],"mappings":"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","sourcesContent":["/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\nvar parse5 = require('parse5');\nvar htmlparser2Adapter = require('parse5-htmlparser2-tree-adapter');\nvar domhandler = require('domhandler');\nvar DomUtils = htmlparser.DomUtils;\n\n/*\n  Parser\n*/\nexports = module.exports = function parse(content, options, isDocument) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {\n    content = content.toString();\n  }\n\n  if (typeof content === 'string') {\n    var useHtmlParser2 = options.xmlMode || options._useHtmlParser2;\n\n    dom = useHtmlParser2\n      ? htmlparser.parseDocument(content, options)\n      : parseWithParse5(content, options, isDocument);\n  } else {\n    if (\n      typeof content === 'object' &&\n      content != null &&\n      content.type === 'root'\n    ) {\n      dom = content;\n    } else {\n      // Generic root element\n      var root = new domhandler.Document(content);\n      content.forEach(function (node) {\n        node.parent = root;\n      });\n\n      dom = root;\n    }\n  }\n\n  return dom;\n};\n\nfunction parseWithParse5(content, options, isDocument) {\n  var parse = isDocument ? parse5.parse : parse5.parseFragment;\n\n  return parse(content, {\n    treeAdapter: htmlparser2Adapter,\n    sourceCodeLocationInfo: options.sourceCodeLocationInfo,\n  });\n}\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function (arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    if (node.parent && node.parent.children !== arr) {\n      DomUtils.removeElement(node);\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    node.parent = parent;\n  }\n\n  return parent;\n};\n"]},"metadata":{},"sourceType":"script"}