{"ast":null,"code":"/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\nvar text = require('../static').text;\n\nvar utils = require('../utils');\n\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-'; // Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\n\nvar primitives = {\n  null: null,\n  true: true,\n  false: false\n}; // Attributes that are booleans\n\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i; // Matches strings that look like JSON objects or arrays\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\n\nvar getAttr = function (elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  } // Return the entire attribs object if no attribute specified\n\n\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  } // Mimic the DOM and return text content as value for `option's`\n\n\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  } // Mimic DOM with default value for radios/checkboxes\n\n\n  if (elem.name === 'input' && (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') && name === 'value') {\n    return 'on';\n  }\n};\n\nvar setAttr = function (el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n};\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *\n * $('ul').attr('id')\n * //=> fruits\n *\n * $('.apple').attr('id', 'favorite').html()\n * //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string} [value] - If specified sets the value of the attribute.\n *\n * @see {@link http://api.jquery.com/attr/}\n */\n\n\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return getAttr(this[0], name);\n};\n\nvar getProp = function (el, name) {\n  if (!el || !isTag(el)) return;\n  return name in el ? el[name] : rboolean.test(name) ? getAttr(el, name) !== undefined : getAttr(el, name);\n};\n\nvar setProp = function (el, name, value) {\n  el[name] = rboolean.test(name) ? !!value : value;\n};\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *\n * $('input[type=\"checkbox\"]').prop('checked')\n * //=> false\n *\n * $('input[type=\"checkbox\"]').prop('checked', true).val()\n * //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n *\n * @see {@link http://api.jquery.com/prop/}\n */\n\n\nexports.prop = function (name, value) {\n  var i = 0;\n  var property;\n\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        property = this.css();\n        Object.keys(property).forEach(function (p) {\n          property[i++] = p;\n        });\n        property.length = i;\n        break;\n\n      case 'tagName':\n      case 'nodeName':\n        property = this[0].name.toUpperCase();\n        break;\n\n      case 'outerHTML':\n        property = this.clone().wrap('<container />').parent().html();\n        break;\n\n      default:\n        property = getProp(this[0], name);\n    }\n\n    return property;\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n\nvar setData = function (el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (typeof name === 'object') return Object.assign(el.data, name);\n\n  if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n}; // Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n// and (if present) cache the value in the node's internal data store. If no\n// attribute name is specified, read *all* HTML5 `data-*` attributes in this\n// manner.\n\n\nvar readData = function (el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var domName;\n  var jsNames;\n  var jsName;\n  var value;\n  var idx;\n  var length;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (idx = 0, length = domNames.length; idx < length; ++idx) {\n    domName = domNames[idx];\n    jsName = jsNames[idx];\n\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n};\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *\n * $('<div data-apple-color=\"red\"></div>').data()\n * //=> { appleColor: 'red' }\n *\n * $('<div data-apple-color=\"red\"></div>').data('apple-color')\n * //=> 'red'\n *\n * const apple = $('.apple').data('kind', 'mac')\n * apple.data('kind')\n * //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/data/}\n */\n\n\nexports.data = function (name, value) {\n  var elem = this[0];\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  } // Return the entire data object if no data specified\n\n\n  if (!name) {\n    return readData(elem);\n  } // Set the value (with attr map support)\n\n\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  } else if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *\n * $('input[type=\"text\"]').val()\n * //=> input_text\n *\n * $('input[type=\"text\"]').val('test').html()\n * //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/val/}\n */\n\n\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n\n    case 'input':\n      if (this.attr('type') === 'radio') {\n        if (querying) {\n          return this.attr('value');\n        }\n\n        this.attr('value', value);\n        return this;\n      }\n\n      return this.attr('value', value);\n\n    case 'select':\n      var option = this.find('option:selected');\n      var returnValue;\n      if (option === undefined) return undefined;\n\n      if (!querying) {\n        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {\n          return this;\n        }\n\n        if (typeof value != 'object') {\n          value = [value];\n        }\n\n        this.find('option').removeAttr('selected');\n\n        for (var i = 0; i < value.length; i++) {\n          this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n        }\n\n        return this;\n      }\n\n      returnValue = option.attr('value');\n\n      if (hasOwn.call(this.attr(), 'multiple')) {\n        returnValue = [];\n        domEach(option, function (__, el) {\n          returnValue.push(getAttr(el, 'value'));\n        });\n      }\n\n      return returnValue;\n\n    case 'option':\n      if (!querying) {\n        this.attr('value', value);\n        return this;\n      }\n\n      return this.attr('value');\n  }\n};\n/**\n * Remove an attribute.\n *\n * @private\n * @param {node} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\n\n\nvar removeAttribute = function (elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n  delete elem.attribs[name];\n};\n/**\n * Splits a space-separated list of names to individual\n * names.\n *\n * @param {string} names -  Names to split.\n * @returns {string[]} - Split names.\n */\n\n\nvar splitNames = function (names) {\n  return names ? names.trim().split(rspace) : [];\n};\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *\n * $('.pear').removeAttr('class').html()\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite')\n * $('.apple').removeAttr('id class').html()\n * //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n *\n * @see {@link http://api.jquery.com/removeAttr/}\n */\n\n\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (j, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *\n * $('.pear').hasClass('pear')\n * //=> true\n *\n * $('apple').hasClass('fruit')\n * //=> false\n *\n * $('li').hasClass('pear')\n * //=> true\n *\n * @param {string} className - Name of the class.\n *\n * @see {@link http://api.jquery.com/hasClass/}\n */\n\n\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var attrs = elem.attribs;\n    var clazz = attrs && attrs['class'];\n    var idx = -1;\n    var end;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        end = idx + className.length;\n\n        if ((idx === 0 || rspace.test(clazz[idx - 1])) && (end === clazz.length || rspace.test(clazz[end]))) {\n          return true;\n        }\n      }\n    }\n  });\n};\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`\n * like jQuery.\n *\n * @example\n *\n * $('.pear').addClass('fruit').html()\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string} value - Name of new class.\n *\n * @see {@link http://api.jquery.com/addClass/}\n */\n\n\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue; // If we don't already have classes\n\n    var className = getAttr(this[i], 'class');\n    var numClasses;\n    var setClass;\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      setClass = ' ' + className + ' ';\n      numClasses = classNames.length; // Check if class already exists\n\n      for (var j = 0; j < numClasses; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n/**\n * Removes one or more space-separated classes from the selected elements. If\n * no `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.pear').removeClass('pear').html()\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html()\n * //=> <li class=\"\">Apple</li>\n * @param {string} value - Name of the class.\n *\n * @see {@link http://api.jquery.com/removeClass/}\n */\n\n\nexports.removeClass = function (value) {\n  var classes;\n  var numClasses;\n  var removeAll; // Handle if value is a function\n\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call([el], value.call(el, i, el.attribs['class'] || ''));\n    });\n  }\n\n  classes = splitNames(value);\n  numClasses = classes.length;\n  removeAll = arguments.length === 0;\n  return domEach(this, function (i, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var index;\n      var changed;\n\n      for (var j = 0; j < numClasses; j++) {\n        index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true; // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n\n          j--;\n        }\n      }\n\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n};\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.apple.green').toggleClass('fruit green red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html()\n * //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {(string|Function)} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n *\n * @see {@link http://api.jquery.com/toggleClass/}\n */\n\n\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call([el], value.call(el, i, el.attribs['class'] || '', stateVal), stateVal);\n    });\n  } // Return if no value or not a string or function\n\n\n  if (!value || typeof value !== 'string') return this;\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? stateVal ? 1 : -1 : 0;\n  var numElements = this.length;\n  var elementClasses;\n  var index;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n    elementClasses = splitNames(this[i].attribs.class); // Check if class already exists\n\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      index = elementClasses.indexOf(classNames[j]); // Add if stateValue === true or we are toggling and there is no value\n\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n};\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate\n * function, the function is executed in the context of the selected element,\n * so `this` refers to the current element.\n *\n * @param {string|Function|cheerio|node} selector - Selector for the selection.\n *\n * @see {@link http://api.jquery.com/is/}\n */\n\n\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/cheerio/lib/api/attributes.js"],"names":["text","require","utils","isTag","domEach","hasOwn","Object","prototype","hasOwnProperty","camelCase","cssCase","rspace","dataAttrPrefix","primitives","null","true","false","rboolean","rbrace","getAttr","elem","name","attribs","call","test","children","type","setAttr","el","value","removeAttribute","exports","attr","undefined","i","keys","forEach","objName","objValue","getProp","setProp","prop","property","css","p","length","toUpperCase","clone","wrap","parent","html","j","__","key","val","setData","data","assign","readData","readAll","arguments","domNames","domName","jsNames","jsName","idx","filter","attrName","slice","map","_domName","String","Number","JSON","parse","e","querying","element","option","find","returnValue","removeAttr","push","splitNames","names","trim","split","attrNames","hasClass","className","toArray","some","attrs","clazz","end","indexOf","addClass","classNames","numElements","numClasses","setClass","join","appendClass","removeClass","classes","removeAll","class","elClasses","index","changed","splice","toggleClass","stateVal","state","elementClasses","is","selector"],"mappings":"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","sourcesContent":["/**\n * Methods for getting and modifying attributes.\n *\n * @module cheerio/attributes\n */\n\nvar text = require('../static').text;\nvar utils = require('../utils');\nvar isTag = utils.isTag;\nvar domEach = utils.domEach;\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar camelCase = utils.camelCase;\nvar cssCase = utils.cssCase;\nvar rspace = /\\s+/;\nvar dataAttrPrefix = 'data-';\n// Lookup table for coercing string data-* attributes to their corresponding\n// JavaScript primitives\nvar primitives = {\n  null: null,\n  true: true,\n  false: false,\n};\n// Attributes that are booleans\nvar rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;\n// Matches strings that look like JSON objects or arrays\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\n\nvar getAttr = function (elem, name) {\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.attribs) {\n    elem.attribs = {};\n  }\n\n  // Return the entire attribs object if no attribute specified\n  if (!name) {\n    return elem.attribs;\n  }\n\n  if (hasOwn.call(elem.attribs, name)) {\n    // Get the (decoded) attribute\n    return rboolean.test(name) ? name : elem.attribs[name];\n  }\n\n  // Mimic the DOM and return text content as value for `option's`\n  if (elem.name === 'option' && name === 'value') {\n    return text(elem.children);\n  }\n\n  // Mimic DOM with default value for radios/checkboxes\n  if (\n    elem.name === 'input' &&\n    (elem.attribs.type === 'radio' || elem.attribs.type === 'checkbox') &&\n    name === 'value'\n  ) {\n    return 'on';\n  }\n};\n\nvar setAttr = function (el, name, value) {\n  if (value === null) {\n    removeAttribute(el, name);\n  } else {\n    el.attribs[name] = value + '';\n  }\n};\n\n/**\n * Method for getting and setting attributes. Gets the attribute value for only\n * the first element in the matched set. If you set an attribute's value to\n * `null`, you remove that attribute. You may also pass a `map` and `function`\n * like jQuery.\n *\n * @example\n *\n * $('ul').attr('id')\n * //=> fruits\n *\n * $('.apple').attr('id', 'favorite').html()\n * //=> <li class=\"apple\" id=\"favorite\">Apple</li>\n *\n * @param {string} name - Name of the attribute.\n * @param {string} [value] - If specified sets the value of the attribute.\n *\n * @see {@link http://api.jquery.com/attr/}\n */\nexports.attr = function (name, value) {\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (i, el) {\n        setAttr(el, name, value.call(el, i, el.attribs[name]));\n      });\n    }\n    return domEach(this, function (i, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (objName) {\n          var objValue = name[objName];\n          setAttr(el, objName, objValue);\n        });\n      } else {\n        setAttr(el, name, value);\n      }\n    });\n  }\n\n  return getAttr(this[0], name);\n};\n\nvar getProp = function (el, name) {\n  if (!el || !isTag(el)) return;\n\n  return name in el\n    ? el[name]\n    : rboolean.test(name)\n    ? getAttr(el, name) !== undefined\n    : getAttr(el, name);\n};\n\nvar setProp = function (el, name, value) {\n  el[name] = rboolean.test(name) ? !!value : value;\n};\n\n/**\n * Method for getting and setting properties. Gets the property value for only\n * the first element in the matched set.\n *\n * @example\n *\n * $('input[type=\"checkbox\"]').prop('checked')\n * //=> false\n *\n * $('input[type=\"checkbox\"]').prop('checked', true).val()\n * //=> ok\n *\n * @param {string} name - Name of the property.\n * @param {any} [value] - If specified set the property to this.\n *\n * @see {@link http://api.jquery.com/prop/}\n */\nexports.prop = function (name, value) {\n  var i = 0;\n  var property;\n\n  if (typeof name === 'string' && value === undefined) {\n    switch (name) {\n      case 'style':\n        property = this.css();\n\n        Object.keys(property).forEach(function (p) {\n          property[i++] = p;\n        });\n\n        property.length = i;\n\n        break;\n      case 'tagName':\n      case 'nodeName':\n        property = this[0].name.toUpperCase();\n        break;\n      case 'outerHTML':\n        property = this.clone().wrap('<container />').parent().html();\n        break;\n      default:\n        property = getProp(this[0], name);\n    }\n\n    return property;\n  }\n\n  if (typeof name === 'object' || value !== undefined) {\n    if (typeof value === 'function') {\n      return domEach(this, function (j, el) {\n        setProp(el, name, value.call(el, j, getProp(el, name)));\n      });\n    }\n\n    return domEach(this, function (__, el) {\n      if (!isTag(el)) return;\n\n      if (typeof name === 'object') {\n        Object.keys(name).forEach(function (key) {\n          var val = name[key];\n          setProp(el, key, val);\n        });\n      } else {\n        setProp(el, name, value);\n      }\n    });\n  }\n};\n\nvar setData = function (el, name, value) {\n  if (!el.data) {\n    el.data = {};\n  }\n\n  if (typeof name === 'object') return Object.assign(el.data, name);\n  if (typeof name === 'string' && value !== undefined) {\n    el.data[name] = value;\n  }\n};\n\n// Read the specified attribute from the equivalent HTML5 `data-*` attribute,\n// and (if present) cache the value in the node's internal data store. If no\n// attribute name is specified, read *all* HTML5 `data-*` attributes in this\n// manner.\nvar readData = function (el, name) {\n  var readAll = arguments.length === 1;\n  var domNames;\n  var domName;\n  var jsNames;\n  var jsName;\n  var value;\n  var idx;\n  var length;\n\n  if (readAll) {\n    domNames = Object.keys(el.attribs).filter(function (attrName) {\n      return attrName.slice(0, dataAttrPrefix.length) === dataAttrPrefix;\n    });\n    jsNames = domNames.map(function (_domName) {\n      return camelCase(_domName.slice(dataAttrPrefix.length));\n    });\n  } else {\n    domNames = [dataAttrPrefix + cssCase(name)];\n    jsNames = [name];\n  }\n\n  for (idx = 0, length = domNames.length; idx < length; ++idx) {\n    domName = domNames[idx];\n    jsName = jsNames[idx];\n    if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {\n      value = el.attribs[domName];\n\n      if (hasOwn.call(primitives, value)) {\n        value = primitives[value];\n      } else if (value === String(Number(value))) {\n        value = Number(value);\n      } else if (rbrace.test(value)) {\n        try {\n          value = JSON.parse(value);\n        } catch (e) {\n          /* ignore */\n        }\n      }\n\n      el.data[jsName] = value;\n    }\n  }\n\n  return readAll ? el.data : value;\n};\n\n/**\n * Method for getting and setting data attributes. Gets or sets the data\n * attribute value for only the first element in the matched set.\n *\n * @example\n *\n * $('<div data-apple-color=\"red\"></div>').data()\n * //=> { appleColor: 'red' }\n *\n * $('<div data-apple-color=\"red\"></div>').data('apple-color')\n * //=> 'red'\n *\n * const apple = $('.apple').data('kind', 'mac')\n * apple.data('kind')\n * //=> 'mac'\n *\n * @param {string} name - Name of the attribute.\n * @param {any} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/data/}\n */\nexports.data = function (name, value) {\n  var elem = this[0];\n\n  if (!elem || !isTag(elem)) return;\n\n  if (!elem.data) {\n    elem.data = {};\n  }\n\n  // Return the entire data object if no data specified\n  if (!name) {\n    return readData(elem);\n  }\n\n  // Set the value (with attr map support)\n  if (typeof name === 'object' || value !== undefined) {\n    domEach(this, function (i, el) {\n      setData(el, name, value);\n    });\n    return this;\n  } else if (hasOwn.call(elem.data, name)) {\n    return elem.data[name];\n  }\n\n  return readData(elem, name);\n};\n\n/**\n * Method for getting and setting the value of input, select, and textarea.\n * Note: Support for `map`, and `function` has not been added yet.\n *\n * @example\n *\n * $('input[type=\"text\"]').val()\n * //=> input_text\n *\n * $('input[type=\"text\"]').val('test').html()\n * //=> <input type=\"text\" value=\"test\"/>\n *\n * @param {string} [value] - If specified new value.\n *\n * @see {@link http://api.jquery.com/val/}\n */\nexports.val = function (value) {\n  var querying = arguments.length === 0;\n  var element = this[0];\n\n  if (!element) return;\n\n  switch (element.name) {\n    case 'textarea':\n      return this.text(value);\n    case 'input':\n      if (this.attr('type') === 'radio') {\n        if (querying) {\n          return this.attr('value');\n        }\n\n        this.attr('value', value);\n        return this;\n      }\n\n      return this.attr('value', value);\n    case 'select':\n      var option = this.find('option:selected');\n      var returnValue;\n      if (option === undefined) return undefined;\n      if (!querying) {\n        if (!hasOwn.call(this.attr(), 'multiple') && typeof value == 'object') {\n          return this;\n        }\n        if (typeof value != 'object') {\n          value = [value];\n        }\n        this.find('option').removeAttr('selected');\n        for (var i = 0; i < value.length; i++) {\n          this.find('option[value=\"' + value[i] + '\"]').attr('selected', '');\n        }\n        return this;\n      }\n      returnValue = option.attr('value');\n      if (hasOwn.call(this.attr(), 'multiple')) {\n        returnValue = [];\n        domEach(option, function (__, el) {\n          returnValue.push(getAttr(el, 'value'));\n        });\n      }\n      return returnValue;\n    case 'option':\n      if (!querying) {\n        this.attr('value', value);\n        return this;\n      }\n      return this.attr('value');\n  }\n};\n\n/**\n * Remove an attribute.\n *\n * @private\n * @param {node} elem - Node to remove attribute from.\n * @param {string} name - Name of the attribute to remove.\n */\nvar removeAttribute = function (elem, name) {\n  if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;\n\n  delete elem.attribs[name];\n};\n\n/**\n * Splits a space-separated list of names to individual\n * names.\n *\n * @param {string} names -  Names to split.\n * @returns {string[]} - Split names.\n */\nvar splitNames = function (names) {\n  return names ? names.trim().split(rspace) : [];\n};\n\n/**\n * Method for removing attributes by `name`.\n *\n * @example\n *\n * $('.pear').removeAttr('class').html()\n * //=> <li>Pear</li>\n *\n * $('.apple').attr('id', 'favorite')\n * $('.apple').removeAttr('id class').html()\n * //=> <li>Apple</li>\n *\n * @param {string} name - Name of the attribute.\n *\n * @see {@link http://api.jquery.com/removeAttr/}\n */\nexports.removeAttr = function (name) {\n  var attrNames = splitNames(name);\n\n  for (var i = 0; i < attrNames.length; i++) {\n    domEach(this, function (j, elem) {\n      removeAttribute(elem, attrNames[i]);\n    });\n  }\n\n  return this;\n};\n\n/**\n * Check to see if *any* of the matched elements have the given `className`.\n *\n * @example\n *\n * $('.pear').hasClass('pear')\n * //=> true\n *\n * $('apple').hasClass('fruit')\n * //=> false\n *\n * $('li').hasClass('pear')\n * //=> true\n *\n * @param {string} className - Name of the class.\n *\n * @see {@link http://api.jquery.com/hasClass/}\n */\nexports.hasClass = function (className) {\n  return this.toArray().some(function (elem) {\n    var attrs = elem.attribs;\n    var clazz = attrs && attrs['class'];\n    var idx = -1;\n    var end;\n\n    if (clazz && className.length) {\n      while ((idx = clazz.indexOf(className, idx + 1)) > -1) {\n        end = idx + className.length;\n\n        if (\n          (idx === 0 || rspace.test(clazz[idx - 1])) &&\n          (end === clazz.length || rspace.test(clazz[end]))\n        ) {\n          return true;\n        }\n      }\n    }\n  });\n};\n\n/**\n * Adds class(es) to all of the matched elements. Also accepts a `function`\n * like jQuery.\n *\n * @example\n *\n * $('.pear').addClass('fruit').html()\n * //=> <li class=\"pear fruit\">Pear</li>\n *\n * $('.apple').addClass('fruit red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * @param {string} value - Name of new class.\n *\n * @see {@link http://api.jquery.com/addClass/}\n */\nexports.addClass = function (value) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      var className = el.attribs['class'] || '';\n      exports.addClass.call([el], value.call(el, i, className));\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numElements = this.length;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    // If we don't already have classes\n    var className = getAttr(this[i], 'class');\n    var numClasses;\n    var setClass;\n\n    if (!className) {\n      setAttr(this[i], 'class', classNames.join(' ').trim());\n    } else {\n      setClass = ' ' + className + ' ';\n      numClasses = classNames.length;\n\n      // Check if class already exists\n      for (var j = 0; j < numClasses; j++) {\n        var appendClass = classNames[j] + ' ';\n        if (setClass.indexOf(' ' + appendClass) < 0) setClass += appendClass;\n      }\n\n      setAttr(this[i], 'class', setClass.trim());\n    }\n  }\n\n  return this;\n};\n\n/**\n * Removes one or more space-separated classes from the selected elements. If\n * no `className` is defined, all classes will be removed. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.pear').removeClass('pear').html()\n * //=> <li class=\"\">Pear</li>\n *\n * $('.apple').addClass('red').removeClass().html()\n * //=> <li class=\"\">Apple</li>\n * @param {string} value - Name of the class.\n *\n * @see {@link http://api.jquery.com/removeClass/}\n */\nexports.removeClass = function (value) {\n  var classes;\n  var numClasses;\n  var removeAll;\n\n  // Handle if value is a function\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.removeClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '')\n      );\n    });\n  }\n\n  classes = splitNames(value);\n  numClasses = classes.length;\n  removeAll = arguments.length === 0;\n\n  return domEach(this, function (i, el) {\n    if (!isTag(el)) return;\n\n    if (removeAll) {\n      // Short circuit the remove all case as this is the nice one\n      el.attribs.class = '';\n    } else {\n      var elClasses = splitNames(el.attribs.class);\n      var index;\n      var changed;\n\n      for (var j = 0; j < numClasses; j++) {\n        index = elClasses.indexOf(classes[j]);\n\n        if (index >= 0) {\n          elClasses.splice(index, 1);\n          changed = true;\n\n          // We have to do another pass to ensure that there are not duplicate\n          // classes listed\n          j--;\n        }\n      }\n      if (changed) {\n        el.attribs.class = elClasses.join(' ');\n      }\n    }\n  });\n};\n\n/**\n * Add or remove class(es) from the matched elements, depending on either the\n * class's presence or the value of the switch argument. Also accepts a\n * `function` like jQuery.\n *\n * @example\n *\n * $('.apple.green').toggleClass('fruit green red').html()\n * //=> <li class=\"apple fruit red\">Apple</li>\n *\n * $('.apple.green').toggleClass('fruit green red', true).html()\n * //=> <li class=\"apple green fruit red\">Apple</li>\n *\n * @param {(string|Function)} value - Name of the class. Can also be a function.\n * @param {boolean} [stateVal] - If specified the state of the class.\n *\n * @see {@link http://api.jquery.com/toggleClass/}\n */\nexports.toggleClass = function (value, stateVal) {\n  // Support functions\n  if (typeof value === 'function') {\n    return domEach(this, function (i, el) {\n      exports.toggleClass.call(\n        [el],\n        value.call(el, i, el.attribs['class'] || '', stateVal),\n        stateVal\n      );\n    });\n  }\n\n  // Return if no value or not a string or function\n  if (!value || typeof value !== 'string') return this;\n\n  var classNames = value.split(rspace);\n  var numClasses = classNames.length;\n  var state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;\n  var numElements = this.length;\n  var elementClasses;\n  var index;\n\n  for (var i = 0; i < numElements; i++) {\n    // If selected element isn't a tag, move on\n    if (!isTag(this[i])) continue;\n\n    elementClasses = splitNames(this[i].attribs.class);\n\n    // Check if class already exists\n    for (var j = 0; j < numClasses; j++) {\n      // Check if the class name is currently defined\n      index = elementClasses.indexOf(classNames[j]);\n\n      // Add if stateValue === true or we are toggling and there is no value\n      if (state >= 0 && index < 0) {\n        elementClasses.push(classNames[j]);\n      } else if (state <= 0 && index >= 0) {\n        // Otherwise remove but only if the item exists\n        elementClasses.splice(index, 1);\n      }\n    }\n\n    this[i].attribs.class = elementClasses.join(' ');\n  }\n\n  return this;\n};\n\n/**\n * Checks the current list of elements and returns `true` if _any_ of the\n * elements match the selector. If using an element or Cheerio selection,\n * returns `true` if _any_ of the elements match. If using a predicate\n * function, the function is executed in the context of the selected element,\n * so `this` refers to the current element.\n *\n * @param {string|Function|cheerio|node} selector - Selector for the selection.\n *\n * @see {@link http://api.jquery.com/is/}\n */\nexports.is = function (selector) {\n  if (selector) {\n    return this.filter(selector).length > 0;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"script"}