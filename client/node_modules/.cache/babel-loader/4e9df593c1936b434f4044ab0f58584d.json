{"ast":null,"code":"'use strict';\n\nlet CeL;\n\ntry {\n  // Load CeJS library.\n  CeL = require('cejs');\n} catch (e)\n/* istanbul ignore next: Only for debugging locally */\n{\n  // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\n  // const wikiapi = require('./wikiapi.js');\n  require('./_CeL.loader.nodejs.js');\n\n  CeL = globalThis.CeL;\n} // assert: typeof CeL === 'function'\n// Load modules.\n// @see `wiki loader.js`:\n// https://github.com/kanasimi/wikibot/blob/master/wiki%20loader.js\n\n\nCeL.run(['interact.DOM', 'application.debug', // 載入不同地區語言的功能 for wiki.work()。\n'application.locale', // 載入操作維基百科的主要功能。\n'application.net.wiki', // Optional 可選功能\n'application.net.wiki.data', 'application.net.wiki.admin', // Add color to console messages. 添加主控端報告的顏色。\n'interact.console', // for 'application.platform.nodejs': CeL.env.arg_hash, CeL.wiki.cache(),\n// CeL.fs_mkdir(), CeL.wiki.read_dump()\n'application.storage']); // --------------------------------------------------------\n// syntactic sugar\n\nconst wiki_API = CeL.net.wiki;\nconst KEY_SESSION = wiki_API.KEY_SESSION; // Set default language. 改變預設之語言。\n\nwiki_API.set_language('en');\n/** @inner */\n\nconst KEY_wiki_session = Symbol('wiki session'); // for debug\n// wikiapi.KEY_wiki_session = KEY_wiki_session;\n\n/**\r\n * main wikiapi operator 操作子.\r\n * \r\n * @param {String}[API_URL]\r\n *            language code or API URL of MediaWiki project\r\n */\n\nfunction wikiapi(API_URL) {\n  const wiki_session = new wiki_API(null, null, API_URL); //this[KEY_wiki_session] = new wiki_API(null, null, API_URL);\n\n  this.setup_wiki_session(wiki_session);\n} // --------------------------------------------------------\n\n\nfunction setup_wiki_session(wiki_session) {\n  Object.defineProperty(wiki_session, 'setup_data_entity', {\n    value: setup_data_entity\n  });\n  Object.defineProperty(this, KEY_wiki_session, {\n    value: wiki_session,\n    writable: true\n  });\n}\n\nObject.defineProperty(wikiapi.prototype, 'setup_wiki_session', {\n  value: setup_wiki_session\n});\n\nfunction wikiapi_login(user_name, password, API_URL) {\n  let options;\n\n  if (!password && !API_URL && CeL.is_Object(user_name)) {\n    options = user_name;\n  } else if (CeL.is_Object(API_URL)) {\n    options = { ...API_URL,\n      user_name,\n      password\n    };\n  } else {\n    options = {\n      user_name,\n      password,\n      API_URL\n    };\n  }\n\n  function wikiapi_login_executor(resolve, reject) {\n    const wiki_session = wiki_API.login({\n      preserve_password: true,\n      ...options,\n      API_URL: options.API_URL || this[KEY_wiki_session].API_URL,\n\n      callback(data, error) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(data);\n        }\n      } // task_configuration_page: 'page title',\n\n\n    });\n    this.setup_wiki_session(wiki_session);\n  }\n\n  return new Promise(wikiapi_login_executor.bind(this));\n} // --------------------------------------------------------\n\n\nconst page_data_attributes = {\n  /**\r\n   * {String}page content, maybe undefined. 條目/頁面內容 =\r\n   * CeL.wiki.revision_content(revision)\r\n   */\n  wikitext: {\n    get() {\n      return wiki_API.content_of(this, 0);\n    }\n\n  },\n  revision: {\n    value: function revision(revision_NO) {\n      return wiki_API.content_of(this, revision_NO);\n    }\n  },\n  parse: {\n    value: function parse(options) {\n      // function parse_page(options) @ CeL.wiki\n      return wiki_API.parser(this).parse(options);\n    }\n  }\n};\n\nfunction wikiapi_page(title, options) {\n  function wikiapi_page_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n    wiki.page(title, (page_data, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        if (page_data) Object.defineProperties(page_data, page_data_attributes);\n        resolve(page_data);\n      }\n    }, {\n      rvlimit: options && options.revisions,\n      ...options\n    });\n  }\n\n  return new Promise(wikiapi_page_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_tracking_revisions(title, to_search, options) {\n  function wikiapi_tracking_revisions_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n    wiki.tracking_revisions(title, to_search, (revision, page_data, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        if (!revision) revision = Object.create(null);\n        revision.page = page_data;\n        resolve(revision);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_tracking_revisions_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction reject_edit_error(reject, error, result) {\n  // skip_edit is not error\n  if (error && error !==\n  /* 'skip' */\n  wikiapi.skip_edit[1] // @see wiki_API_edit.check_data\n  && error !== 'empty' && error !== 'cancel') {\n    if (typeof error === 'string') {\n      // console.log('' + reject);\n      // console.trace(error);\n      const error_object = new Error(error);\n      error_object.from_string = error;\n      error = error_object; // console.log(error);\n    }\n\n    if (result && typeof error === 'object') error.result = result;\n    reject(error);\n    return true;\n  }\n} // for page list, you had better use wiki.for_each_page(page_list)\n\n\nfunction wikiapi_edit_page(title, content, options) {\n  function wikiapi_edit_page_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // console.trace([title, content]);\n    // console.log(`wikiapi_edit_page 1: ${title}, ${wiki.actions.length}\n    // actions, ${wiki.running}/${wiki.thread_count}.`);\n    // console.trace(title);\n    // CeL.set_debug(3);\n\n    if (title) {\n      // console.trace(wiki);\n      options = CeL.setup_options(options); // options.page_to_edit = title;\n      // call wiki_API_prototype_method() @ CeL.application.net.wiki.list\n\n      wiki.page(title, (page_data, error) => {\n        // console.trace('Set .page_to_edit:');\n        // console.log([title, page_data, error]);\n        // console.log(wiki.actions[0]);\n        // 手動指定要編輯的頁面。避免多執行續打亂 wiki.last_page。\n        options.page_to_edit = page_data;\n      }, options);\n    } // console.log(`wikiapi_edit_page 2: ${title}, ${wiki.actions.length}\n    // actions, ${wiki.running}/${wiki.thread_count}.`);\n    // console.trace(wiki);\n    // console.trace(wiki.last_page);\n    // wiki.edit(page contents, options, callback)\n\n\n    wiki.edit(content, options, (title, error, result) => {\n      // console.trace('wikiapi_edit_page: callbacked');\n      // console.log(title);\n      // console.log(wiki.running);\n      // CeL.set_debug(6);\n      if (!reject_edit_error(reject, error, result)) {\n        resolve(title);\n      } // console.trace('wikiapi_edit_page: return');\n\n    }); // console.log(`wikiapi_edit_page 3: ${title}, ${wiki.actions.length}\n    // actions, ${wiki.running}/${wiki.thread_count}.`);\n  }\n\n  return new Promise(wikiapi_edit_page_executor.bind(this));\n} // `return Wikiapi.skip_edit;` as a symbol to skip this edit, do not generate\n// warning message.\n// 可以利用 ((return [ CeL.wiki.edit.cancel, 'reason' ];)) 來回傳 reason。\n// ((return [ CeL.wiki.edit.cancel, 'skip' ];)) 來跳過 (skip) 本次編輯動作，不特別顯示或處理。\n// 被 skip/pass 的話，連警告都不顯現，當作正常狀況。\n\n\nwikiapi.skip_edit = [wiki_API.edit.cancel, 'skip']; // --------------------------------------------------------\n\nfunction wikiapi_move_page(move_from_title, move_to_title, options) {\n  function wikiapi_move_page_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using wiki_API.prototype.move_page()\n\n    wiki.move_page(move_from_title, move_to_title, options, (data, error) => {\n      if (error) {\n        /**\r\n         * <code>\r\n        \t\te.g., { code: 'articleexists', info: 'A page of that name already exists, or the name you have chosen is not valid. Please choose another name.', '*': '...' }\r\n        e.g., { code: 'missingtitle', info: \"The page you specified doesn't exist.\", '*': '...' }\r\n        \t\t</code>\r\n         */\n        reject(error);\n      } else {\n        /**\r\n         * <code>\r\n        \t\te.g., { from: 'from', to: 'to', reason: 'move', redirectcreated: '', moveoverredirect: '' }\r\n        \t\t</code>\r\n         */\n        resolve(data);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_move_page_executor.bind(this));\n}\n/**\r\n * Move to `move_to_title`. Must call `wiki.page(move_from_title)` first!\r\n * \r\n * @example <code>\r\n\r\n\tpage_data = await wiki.page(move_from_title);\r\n\ttry { await wiki.move_to(move_to_title, { reason: reason, noredirect: true, movetalk: true }); } catch (e) {}\r\n\r\n * </code>\r\n * \r\n * @param {Object|String}[move_to_title]\r\n * @param {Object}[options]\r\n */\n\n\nfunction wikiapi_move_to(move_to_title, options) {\n  function wikiapi_move_to_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n\n    if (!wiki.last_page) {\n      reject(new Error('wikiapi_move_to: Must call .page() first!' + ' Can not move to ' + CeL.wiki.title_link_of(move_to_title)));\n      return;\n    } // using wiki_API.prototype.move_to()\n\n\n    wiki.move_to(move_to_title, options, (data, error) => {\n      if (error) {\n        /**\r\n         * <code>\r\n        \t\te.g., { code: 'articleexists', info: 'A page of that name already exists, or the name you have chosen is not valid. Please choose another name.', '*': '...' }\r\n        e.g., { code: 'missingtitle', info: \"The page you specified doesn't exist.\", '*': '...' }\r\n        \t\t</code>\r\n         */\n        reject(error);\n      } else {\n        /**\r\n         * <code>\r\n        \t\te.g., { from: 'from', to: 'to', reason: 'move', redirectcreated: '', moveoverredirect: '' }\r\n        \t\t</code>\r\n         */\n        resolve(data);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_move_to_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_purge(title, options) {\n  if (CeL.is_Object(title) && !options) {\n    // shift arguments.\n    [title, options] = [null, title];\n  }\n\n  function wikiapi_purge_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n\n    if (title) {\n      wiki.page(title);\n    } // using wiki_API.purge\n\n\n    wiki.purge((data, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(data);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_purge_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction modify_data_entity(data_to_modify, options) {\n  function modify_data_entity_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; //console.trace(wiki);\n    // using function wikidata_edit() @ https://github.com/kanasimi/CeJS/blob/master/application/net/wiki/data.js\n    // wiki.edit_data(id, data, options, callback)\n\n    wiki.data(this).edit_data(data_to_modify || this, options, (data_entity, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        wiki.setup_data_entity(data_entity);\n        resolve(data_entity);\n      }\n    });\n  }\n\n  return new Promise(modify_data_entity_executor.bind(this));\n}\n\nfunction setup_data_entity(data_entity) {\n  //assert: data_entity[KEY_SESSION].host === this\n  //console.trace(data_entity[KEY_SESSION].host === this);\n  delete data_entity[KEY_SESSION];\n  Object.defineProperties(data_entity, {\n    [KEY_wiki_session]: {\n      value: this\n    },\n    modify: {\n      value: modify_data_entity\n    }\n  });\n}\n\nfunction wikiapi_data(key, property, options) {\n  if (CeL.is_Object(property) && !options) {\n    // shift arguments.\n    [property, options] = [null, property];\n  }\n\n  function wikiapi_data_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using wikidata_entity() → wikidata_datavalue()\n\n    wiki.data(key, property, (data_entity, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        wiki.setup_data_entity(data_entity);\n        resolve(data_entity);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_data_executor.bind(this));\n} // --------------------------------------------------------\n// Warning: Won't throw if title isn't existed!\n\n\nfunction wikiapi_list(list_type, title, options) {\n  function wikiapi_list_executor(resolve, reject) {\n    options = CeL.setup_options(options);\n    const wiki = this[KEY_wiki_session];\n    CeL.wiki.list(title, (list\n    /* , target, options */\n    ) => {\n      // console.trace(list);\n      if (list.error) {\n        reject(list.error);\n      } else {\n        resolve(list);\n      }\n    }, {\n      [KEY_SESSION]: wiki,\n      type: list_type,\n      // namespace: '0|1',\n      ...options\n    });\n    /**\r\n     * <code>\r\n    \t\t// method 2: 使用循環取得資料版:\r\n    wiki.cache({\r\n    \t// Do not write cache file to disk.\r\n    \tcache: false,\r\n    \ttype: list_type,\r\n    \tlist: title\r\n    }, (list, error) => {\r\n    \tif (error) {\r\n    \t\treject(error);\r\n    \t} else {\r\n    \t\tresolve(list);\r\n    \t}\r\n    },\r\n    \t// default options === this\r\n    \t//{ namespace : '0|1' }\r\n    \toptions);\r\n    \t\t// NG: 不應使用單次版\r\n    wiki[list_type](title, (list, error) => {\r\n    \tif (error) {\r\n    \t\treject(error);\r\n    \t} else {\r\n    \t\tresolve(list);\r\n    \t}\r\n    }, {\r\n    \t\tlimit: 'max', ...options\r\n    \t});\r\n    \t\t</code>\r\n     */\n  }\n\n  return new Promise(wikiapi_list_executor.bind(this));\n} // functions for several kinds of lists\n\n\nfunction wikiapi_for_each(type, title, for_each, options) {\n  return wikiapi_list.call(this, type, title, {\n    for_each,\n    ...options\n  });\n} // --------------------------------------------------------\n\n\nfunction wikiapi_category_tree(root_category, options) {\n  function wikiapi_category_tree_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using CeL.wiki.prototype.category_tree\n\n    wiki.category_tree(root_category, (list, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(list);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_category_tree_executor.bind(this));\n} // export 子分類 subcategory\n\n\nwikiapi.KEY_subcategories = wiki_API.KEY_subcategories; // To use:\n// const KEY_subcategories = Wikiapi.KEY_subcategories;\n// --------------------------------------------------------\n\nfunction wikiapi_search(key, options) {\n  function wikiapi_search_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using wiki_API.search\n\n    wiki.search(key, (list, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(list);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_search_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_redirects_root(title, options) {\n  function wikiapi_redirects_root_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using wiki_API.redirects_root\n\n    wiki_API.redirects_root(title, (_title, page_data, error) => {\n      if (error) {\n        reject(error);\n      } else if (options && options.get_page) {\n        page_data.query_title = title;\n        resolve(page_data);\n      } else {\n        resolve(_title);\n      }\n    }, {\n      [KEY_SESSION]: wiki,\n      ...options\n    });\n  }\n\n  return new Promise(wikiapi_redirects_root_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_redirects_here(title, options) {\n  function wikiapi_redirects_here_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session]; // using wiki_API.redirects_here\n\n    wiki_API.redirects_here(title, (root_page_data, redirect_list, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        // assert: root_page_data.redirects === redirect_list\n        // console.log([root_page_data, redirect_list]);\n        resolve(redirect_list);\n      }\n    }, {\n      [KEY_SESSION]: wiki,\n      // redirect_list[0] === root_page_data\n      include_root: true,\n      ...options\n    });\n  }\n\n  return new Promise(wikiapi_redirects_here_executor.bind(this));\n} // --------------------------------------------------------\n// Upload a local file directly:\n//let result = await wiki_session.upload_file({ file_path: '/local/file/path', comment: '', });\n// Upload file from URL:\n//let result = await wiki_session.upload_file({ media_url: 'https://media.url/name.jpg', comment: '', });\n// Other file_data options: @see https://github.com/kanasimi/CeJS/blob/master/application/net/wiki/edit.js#L912 /options.text/\n// filename:'Will set via .file_path or .media_url if not settled.',\n// text: '', text: { description: '', source: '', author: '', permission: '',... },\n// bot: 1, tags:\"tag1|tag2\", ignorewarnings: 1, ...\n\n\nfunction wikiapi_upload_file(file_data) {\n  function wikiapi_upload_file_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n    wiki.upload(file_data, (result, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(result);\n      }\n    });\n  }\n\n  return new Promise(wikiapi_upload_file_executor.bind(this));\n} // --------------------------------------------------------\n\n/**\r\n * Edit / process pages listing in `page_list`.\r\n * \r\n * @param {Array}page_list\r\n *            title list or page_data list\r\n * @param {Function}for_each_page\r\n *            processor for each page. for_each_page(page_data with contents)\r\n * @param {Object}[options]\r\n *            e.g., { summary: '' }<br />\r\n *            e.g., { no_edit: true, no_warning: true, allow_empty: true, page_options: {\r\n *            redirects: 1, rvprop: 'ids|content|timestamp|user' } }<br />\r\n *            no_warning: hide \"wiki_API_page: No contents: [[title]]\" messages\r\n */\n\n\nfunction wikiapi_for_each_page(page_list, for_each_page, options) {\n  function wikiapi_for_each_page_executor(resolve, reject) {\n    const promises = [];\n    let error;\n    const wiki = this[KEY_wiki_session];\n    const work_options = {\n      // log_to: log_to,\n      // no_edit: true,\n      // tags: 'bot trial',\n      no_message: options && options.no_edit,\n      ...options,\n\n      onerror(_error) {\n        // console.trace('Get error (onerror): ' + _error);\n        if (reject_edit_error(_error => {\n          if (!error) error = _error;\n        }, _error) && options && options.onerror) {\n          options.onerror(_error);\n        }\n      },\n\n      each(page_data\n      /* , messages, config */\n      ) {\n        try {\n          // `page_data` maybe non-object when error occurres.\n          if (page_data) Object.defineProperties(page_data, page_data_attributes);\n\n          if (work_options.will_call_methods) {// ** 這邊的操作在 wiki.next() 中會因 .will_call_methods 先執行一次。\n            // 因為接下來的操作可能會呼叫 this.next() 本身，\n            // 因此必須把正在執行的標記消掉。\n            // wiki.running = false;\n            // 每次都設定 `wiki.running = false`，在這會出問題:\n            // 20200209.「S.P.A.L.」関連ページの貼り換えのbot作業依頼.js\n          }\n\n          const result = for_each_page.apply(this, arguments); // Promise.isPromise()\n\n          if (CeL.is_thenable(result)) {\n            promises.push(result); // https://stackoverflow.com/questions/30564053/how-can-i-synchronously-determine-a-javascript-promises-state\n            // https://github.com/kudla/promise-status-async/blob/master/lib/promiseState.js\n\n            const fulfilled = Object.create(null); // Promise.race([result, fulfilled])\n            // .then(v => { status = v === t ? \"pending\" :\n            // \"fulfilled\" },\n            // () => { status = \"rejected\" });\n\n            Promise.race([result, fulfilled]).then(first_fulfilled => {\n              // wiki.running === true\n              // console.trace(`wiki.running = ${wiki.running}`);\n              if (first_fulfilled === fulfilled) {\n                // assert: result is pending\n                // e.g.,\n                // await\n                // wiki.for_each_page(need_check_redirected_list,\n                // ...)\n                // @ await\n                // wiki.for_each_page(vital_articles_list,\n                // for_each_list_page, ...)\n                // @ 20200122.update_vital_articles.js\n                // console.trace('call wiki.next()');\n                wiki.next();\n              }\n            }, () => {\n              /* Do not catch error here. */\n            });\n          } // wiki.next() will wait for result.then() calling back\n          // if CeL.is_thenable(result).\n          // e.g., async function for_each_list_page(list_page_data) @\n          // 20200122.update_vital_articles.js\n\n\n          return result;\n        } catch (_error) {\n          if (typeof _error === 'object') console.error(_error);else CeL.error('wikiapi_for_each_page: Catched error: ' + _error);\n          if (!error) error = _error; // re-throw to wiki.work()\n          // throw _error;\n          // return wikiapi.skip_edit;\n        }\n      },\n\n      // Run after all list items (pages) processed.\n      last() {\n        // this === options\n        // console.trace('last()');\n        Promise.allSettled(promises) // 提早執行 resolve(), reject() 的話，可能導致後續的程式碼 `options.last`\n        // 延後執行，程式碼順序錯亂。\n        .catch(_error => {\n          if (!error) error = _error;\n        }).then(options && typeof options.last === 'function' && options.last.bind(this)) // .then(() => { console.trace(\n        // 'wikiapi_for_each_page_executor Promise finished.'); })\n        .then(() => {\n          if (error) {\n            if (options.throw_error) reject(error);else console.error(error);\n          }\n\n          resolve(this);\n        }, reject); // console.trace('wikiapi_for_each_page_executor finish:');\n        // console.log(options);\n        // console.log(\n        // 'wikiapi_for_each_page_executor last() finished');\n      }\n\n    }; // 一次取得多個頁面內容，以節省傳輸次數。\n\n    wiki.work(work_options, page_list);\n  }\n\n  return new Promise(wikiapi_for_each_page_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_convert_Chinese(text, options) {\n  function wikiapi_convert_Chinese(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n\n    if (typeof options === 'string') {\n      options = {\n        uselang: options\n      };\n    }\n\n    const site_name = wiki_API.site_name(null, {\n      [KEY_SESSION]: wiki\n    });\n\n    if (/^zh/.test(site_name)) {\n      options = Object.assign({\n        [KEY_SESSION]: wiki\n      }, options);\n    } // using wiki_API.search\n\n\n    CeL.wiki.convert_Chinese(text, (text, error) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(text);\n      }\n    }, options);\n  }\n\n  return new Promise(wikiapi_convert_Chinese.bind(this));\n} // --------------------------------------------------------\n// May only test in the [https://tools.wmflabs.org/ Wikimedia Toolforge]\n\n\nfunction wikiapi_run_SQL(SQL, for_each_row\n/* , options */\n) {\n  function wikiapi_run_SQL_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n\n    function run_callback() {\n      wiki.SQL_session.SQL(SQL, (error, rows\n      /* , fields */\n      ) => {\n        if (error) {\n          reject(error);\n        } else {\n          rows.forEach(for_each_row);\n        }\n      });\n      resolve();\n    }\n\n    if (wiki.SQL_session) {\n      run_callback();\n      return;\n    }\n\n    wiki.SQL_session = new wiki_API.SQL((error, rows, fields) => {\n      if (error) {\n        reject(error);\n      } else {\n        run_callback();\n      }\n    }, wiki);\n  }\n\n  return new Promise(wikiapi_run_SQL_executor.bind(this));\n} // --------------------------------------------------------\n\n\nfunction wikiapi_setup_layout_elements(options) {\n  function wikiapi_setup_layout_elements_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n    wiki_API.setup_layout_elements(resolve, {\n      [KEY_SESSION]: wiki,\n      ...options\n    });\n  }\n\n  return new Promise(wikiapi_setup_layout_elements_executor.bind(this));\n} // --------------------------------------------------------\n\n/**\r\n * Get featured content.\r\n * \r\n * @example<code>\r\n\r\n// MUST including wiki.featured_content first to get featured content!\r\nCeL.run('application.net.wiki.featured_content');\r\n...\r\nconst FC_data_hash = await wiki.get_featured_content();\r\nFC_data_hash === wiki.FC_data_hash;\r\n\r\n </code>\r\n * \r\n * @param {String|Object}[options]\r\n *            {String}type (FFA|GA|FA|FL) or options:\r\n *            {type,on_conflict(FC_title, {from,to})}\r\n */\n\n\nfunction wikiapi_get_featured_content(options) {\n  if (!options || !options.type) {\n    const session = this;\n    let promise = Promise.resolve();\n    wikiapi_get_featured_content.default_types.forEach(type => {\n      promise = promise.then(wikiapi_get_featured_content.bind(session, { ...options,\n        type\n      }));\n    });\n    return promise;\n  }\n\n  function wikiapi_get_featured_content_executor(resolve, reject) {\n    const wiki = this[KEY_wiki_session];\n    wiki.get_featured_content(options, FC_data_hash => {\n      try {\n        this.FC_data_hash = FC_data_hash;\n        resolve(FC_data_hash);\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n\n  return new Promise(wikiapi_get_featured_content_executor.bind(this));\n}\n\nwikiapi_get_featured_content.default_types = 'FFA|GA|FA|FL'.split('|'); // --------------------------------------------------------\n\nfunction wikiapi_site_name(language, options) {\n  if (language === undefined) {\n    const wiki = this[KEY_wiki_session];\n    options = {\n      [KEY_SESSION]: wiki,\n      ...options\n    };\n  }\n\n  return wiki_API.site_name(language, options);\n} // --------------------------------------------------------\n// exports\n\n\nObject.assign(wikiapi.prototype, {\n  site_name: wikiapi_site_name,\n  login: wikiapi_login,\n  page: wikiapi_page,\n  tracking_revisions: wikiapi_tracking_revisions,\n  edit_page: wikiapi_edit_page,\n\n  edit(content, options) {\n    return this.edit_page(null, content, options);\n  },\n\n  move_to: wikiapi_move_to,\n  move_page: wikiapi_move_page,\n  purge: wikiapi_purge,\n\n  // wrapper\n  listen(listener, options) {\n    const wiki = this[KEY_wiki_session];\n    return wiki.listen(listener, options);\n  },\n\n  category_tree: wikiapi_category_tree,\n  search: wikiapi_search,\n  redirects_root: wikiapi_redirects_root,\n  // Warning: 採用 wiki_API.redirects_here(title) 才能追溯重新導向的標的。\n  // wiki.redirects() 無法追溯重新導向的標的！\n  redirects_here: wikiapi_redirects_here,\n  upload: wikiapi_upload_file,\n  get_featured_content: wikiapi_get_featured_content,\n  for_each_page: wikiapi_for_each_page,\n  for_each: wikiapi_for_each,\n  data: wikiapi_data,\n  convert_Chinese: wikiapi_convert_Chinese,\n  run_SQL: wikiapi_run_SQL,\n  setup_layout_elements: wikiapi_setup_layout_elements\n}); // wrapper for properties\n\nfor (const property_name of 'task_configuration|latest_task_configuration'.split('|')) {\n  Object.defineProperty(wikiapi.prototype, property_name, {\n    get() {\n      const wiki = this[KEY_wiki_session];\n      return wiki[property_name];\n    }\n\n  });\n} // wrapper for sync functions\n\n\nfor (const function_name of ('namespace|remove_namespace|is_namespace|to_namespace|is_talk_namespace|to_talk_page|talk_page_to_main|normalize_title' // CeL.run('application.net.wiki.featured_content');\n// [].map(wiki.to_talk_page.bind(wiki))\n+ '|get_featured_content_configurations').split('|')) {\n  wikiapi.prototype[function_name] = function wrapper() {\n    const wiki = this[KEY_wiki_session];\n    return wiki[function_name].apply(wiki, arguments);\n  };\n}\n\nfor (const type of CeL.wiki.list.type_list) {\n  // Can not use `= (title, options) {}` !\n  // arrow function expression DO NOT has this, arguments, super, or\n  // new.target keywords.\n  wikiapi.prototype[type] = function (title, options) {\n    const _this = this;\n    /**\r\n     * @example <code>\r\n    \r\n    const page_list = await wiki.embeddedin(template_name, options);\r\n    await page_list.each((page_data) => { }, options);\r\n    \t\t * </code>\r\n     */\n\n\n    return wikiapi_list.call(this, type, title, options).then(page_list => {\n      // console.log(page_list);\n      page_list.each = wikiapi_for_each_page.bind(_this, page_list);\n      return page_list;\n    });\n  };\n}\n\nmodule.exports = wikiapi; // export default wikiapi;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/wikiapi/wikiapi.js"],"names":["CeL","require","e","globalThis","run","wiki_API","net","wiki","KEY_SESSION","set_language","KEY_wiki_session","Symbol","wikiapi","API_URL","wiki_session","setup_wiki_session","Object","defineProperty","value","setup_data_entity","writable","prototype","wikiapi_login","user_name","password","options","is_Object","wikiapi_login_executor","resolve","reject","login","preserve_password","callback","data","error","Promise","bind","page_data_attributes","wikitext","get","content_of","revision","revision_NO","parse","parser","wikiapi_page","title","wikiapi_page_executor","page","page_data","defineProperties","rvlimit","revisions","wikiapi_tracking_revisions","to_search","wikiapi_tracking_revisions_executor","tracking_revisions","create","reject_edit_error","result","skip_edit","error_object","Error","from_string","wikiapi_edit_page","content","wikiapi_edit_page_executor","setup_options","page_to_edit","edit","cancel","wikiapi_move_page","move_from_title","move_to_title","wikiapi_move_page_executor","move_page","wikiapi_move_to","wikiapi_move_to_executor","last_page","title_link_of","move_to","wikiapi_purge","wikiapi_purge_executor","purge","modify_data_entity","data_to_modify","modify_data_entity_executor","edit_data","data_entity","modify","wikiapi_data","key","property","wikiapi_data_executor","wikiapi_list","list_type","wikiapi_list_executor","list","type","wikiapi_for_each","for_each","call","wikiapi_category_tree","root_category","wikiapi_category_tree_executor","category_tree","KEY_subcategories","wikiapi_search","wikiapi_search_executor","search","wikiapi_redirects_root","wikiapi_redirects_root_executor","redirects_root","_title","get_page","query_title","wikiapi_redirects_here","wikiapi_redirects_here_executor","redirects_here","root_page_data","redirect_list","include_root","wikiapi_upload_file","file_data","wikiapi_upload_file_executor","upload","wikiapi_for_each_page","page_list","for_each_page","wikiapi_for_each_page_executor","promises","work_options","no_message","no_edit","onerror","_error","each","will_call_methods","apply","arguments","is_thenable","push","fulfilled","race","then","first_fulfilled","next","console","last","allSettled","catch","throw_error","work","wikiapi_convert_Chinese","text","uselang","site_name","test","assign","convert_Chinese","wikiapi_run_SQL","SQL","for_each_row","wikiapi_run_SQL_executor","run_callback","SQL_session","rows","forEach","fields","wikiapi_setup_layout_elements","wikiapi_setup_layout_elements_executor","setup_layout_elements","wikiapi_get_featured_content","session","promise","default_types","wikiapi_get_featured_content_executor","get_featured_content","FC_data_hash","split","wikiapi_site_name","language","undefined","edit_page","listen","listener","run_SQL","property_name","function_name","wrapper","type_list","_this","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nlet CeL;\r\n\r\ntry {\r\n\t// Load CeJS library.\r\n\tCeL = require('cejs');\r\n} catch (e) /* istanbul ignore next: Only for debugging locally */ {\r\n\t// https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md\r\n\t// const wikiapi = require('./wikiapi.js');\r\n\trequire('./_CeL.loader.nodejs.js');\r\n\tCeL = globalThis.CeL;\r\n}\r\n// assert: typeof CeL === 'function'\r\n\r\n// Load modules.\r\n// @see `wiki loader.js`:\r\n// https://github.com/kanasimi/wikibot/blob/master/wiki%20loader.js\r\nCeL.run(['interact.DOM', 'application.debug',\r\n\t// 載入不同地區語言的功能 for wiki.work()。\r\n\t'application.locale',\r\n\t// 載入操作維基百科的主要功能。\r\n\t'application.net.wiki',\r\n\t// Optional 可選功能\r\n\t'application.net.wiki.data', 'application.net.wiki.admin',\r\n\t// Add color to console messages. 添加主控端報告的顏色。\r\n\t'interact.console',\r\n\t// for 'application.platform.nodejs': CeL.env.arg_hash, CeL.wiki.cache(),\r\n\t// CeL.fs_mkdir(), CeL.wiki.read_dump()\r\n\t'application.storage']);\r\n\r\n// --------------------------------------------------------\r\n\r\n// syntactic sugar\r\nconst wiki_API = CeL.net.wiki;\r\nconst KEY_SESSION = wiki_API.KEY_SESSION;\r\n\r\n// Set default language. 改變預設之語言。\r\nwiki_API.set_language('en');\r\n\r\n/** @inner */\r\nconst KEY_wiki_session = Symbol('wiki session');\r\n// for debug\r\n// wikiapi.KEY_wiki_session = KEY_wiki_session;\r\n\r\n/**\r\n * main wikiapi operator 操作子.\r\n * \r\n * @param {String}[API_URL]\r\n *            language code or API URL of MediaWiki project\r\n */\r\nfunction wikiapi(API_URL) {\r\n\tconst wiki_session = new wiki_API(null, null, API_URL);\r\n\t//this[KEY_wiki_session] = new wiki_API(null, null, API_URL);\r\n\tthis.setup_wiki_session(wiki_session);\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction setup_wiki_session(wiki_session) {\r\n\tObject.defineProperty(wiki_session, 'setup_data_entity', { value: setup_data_entity });\r\n\tObject.defineProperty(this, KEY_wiki_session, {\r\n\t\tvalue: wiki_session,\r\n\t\twritable: true,\r\n\t});\r\n}\r\n\r\nObject.defineProperty(wikiapi.prototype, 'setup_wiki_session', { value: setup_wiki_session });\r\n\r\nfunction wikiapi_login(user_name, password, API_URL) {\r\n\tlet options;\r\n\tif (!password && !API_URL && CeL.is_Object(user_name)) {\r\n\t\toptions = user_name;\r\n\t} else if (CeL.is_Object(API_URL)) {\r\n\t\toptions = { ...API_URL, user_name, password };\r\n\t} else {\r\n\t\toptions = { user_name, password, API_URL };\r\n\t}\r\n\r\n\tfunction wikiapi_login_executor(resolve, reject) {\r\n\t\tconst wiki_session = wiki_API.login({\r\n\t\t\tpreserve_password: true,\r\n\t\t\t...options,\r\n\r\n\t\t\tAPI_URL: options.API_URL || this[KEY_wiki_session].API_URL,\r\n\t\t\tcallback(data, error) {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresolve(data);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// task_configuration_page: 'page title',\r\n\t\t});\r\n\t\tthis.setup_wiki_session(wiki_session);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_login_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nconst page_data_attributes = {\r\n\t/**\r\n\t * {String}page content, maybe undefined. 條目/頁面內容 =\r\n\t * CeL.wiki.revision_content(revision)\r\n\t */\r\n\twikitext: {\r\n\t\tget() {\r\n\t\t\treturn wiki_API.content_of(this, 0);\r\n\t\t}\r\n\t},\r\n\trevision: {\r\n\t\tvalue: function revision(revision_NO) {\r\n\t\t\treturn wiki_API.content_of(this, revision_NO);\r\n\t\t}\r\n\t},\r\n\tparse: {\r\n\t\tvalue: function parse(options) {\r\n\t\t\t// function parse_page(options) @ CeL.wiki\r\n\t\t\treturn wiki_API.parser(this).parse(options);\r\n\t\t}\r\n\t},\r\n};\r\n\r\nfunction wikiapi_page(title, options) {\r\n\tfunction wikiapi_page_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\twiki.page(title, (page_data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tif (page_data)\r\n\t\t\t\t\tObject.defineProperties(page_data, page_data_attributes);\r\n\t\t\t\tresolve(page_data);\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\trvlimit: options && options.revisions,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_page_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_tracking_revisions(title, to_search, options) {\r\n\tfunction wikiapi_tracking_revisions_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\twiki.tracking_revisions(title, to_search, (revision, page_data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tif (!revision)\r\n\t\t\t\t\trevision = Object.create(null);\r\n\t\t\t\trevision.page = page_data;\r\n\t\t\t\tresolve(revision);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_tracking_revisions_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction reject_edit_error(reject, error, result) {\r\n\t// skip_edit is not error\r\n\tif (error && error !== /* 'skip' */ wikiapi.skip_edit[1]\r\n\t\t// @see wiki_API_edit.check_data\r\n\t\t&& error !== 'empty' && error !== 'cancel') {\r\n\t\tif (typeof error === 'string') {\r\n\t\t\t// console.log('' + reject);\r\n\t\t\t// console.trace(error);\r\n\t\t\tconst error_object = new Error(error);\r\n\t\t\terror_object.from_string = error;\r\n\t\t\terror = error_object\r\n\t\t\t// console.log(error);\r\n\t\t}\r\n\t\tif (result && typeof error === 'object')\r\n\t\t\terror.result = result;\r\n\t\treject(error);\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n// for page list, you had better use wiki.for_each_page(page_list)\r\nfunction wikiapi_edit_page(title, content, options) {\r\n\tfunction wikiapi_edit_page_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\r\n\t\t// console.trace([title, content]);\r\n\t\t// console.log(`wikiapi_edit_page 1: ${title}, ${wiki.actions.length}\r\n\t\t// actions, ${wiki.running}/${wiki.thread_count}.`);\r\n\t\t// console.trace(title);\r\n\t\t// CeL.set_debug(3);\r\n\t\tif (title) {\r\n\t\t\t// console.trace(wiki);\r\n\t\t\toptions = CeL.setup_options(options);\r\n\t\t\t// options.page_to_edit = title;\r\n\t\t\t// call wiki_API_prototype_method() @ CeL.application.net.wiki.list\r\n\t\t\twiki.page(title, (page_data, error) => {\r\n\t\t\t\t// console.trace('Set .page_to_edit:');\r\n\t\t\t\t// console.log([title, page_data, error]);\r\n\t\t\t\t// console.log(wiki.actions[0]);\r\n\r\n\t\t\t\t// 手動指定要編輯的頁面。避免多執行續打亂 wiki.last_page。\r\n\t\t\t\toptions.page_to_edit = page_data;\r\n\t\t\t}, options);\r\n\t\t}\r\n\t\t// console.log(`wikiapi_edit_page 2: ${title}, ${wiki.actions.length}\r\n\t\t// actions, ${wiki.running}/${wiki.thread_count}.`);\r\n\t\t// console.trace(wiki);\r\n\t\t// console.trace(wiki.last_page);\r\n\r\n\t\t// wiki.edit(page contents, options, callback)\r\n\t\twiki.edit(content, options, (title, error, result) => {\r\n\t\t\t// console.trace('wikiapi_edit_page: callbacked');\r\n\t\t\t// console.log(title);\r\n\t\t\t// console.log(wiki.running);\r\n\t\t\t// CeL.set_debug(6);\r\n\r\n\t\t\tif (!reject_edit_error(reject, error, result)) {\r\n\t\t\t\tresolve(title);\r\n\t\t\t}\r\n\t\t\t// console.trace('wikiapi_edit_page: return');\r\n\t\t});\r\n\r\n\t\t// console.log(`wikiapi_edit_page 3: ${title}, ${wiki.actions.length}\r\n\t\t// actions, ${wiki.running}/${wiki.thread_count}.`);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_edit_page_executor.bind(this));\r\n}\r\n\r\n// `return Wikiapi.skip_edit;` as a symbol to skip this edit, do not generate\r\n// warning message.\r\n// 可以利用 ((return [ CeL.wiki.edit.cancel, 'reason' ];)) 來回傳 reason。\r\n// ((return [ CeL.wiki.edit.cancel, 'skip' ];)) 來跳過 (skip) 本次編輯動作，不特別顯示或處理。\r\n// 被 skip/pass 的話，連警告都不顯現，當作正常狀況。\r\nwikiapi.skip_edit = [wiki_API.edit.cancel, 'skip'];\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_move_page(move_from_title, move_to_title, options) {\r\n\tfunction wikiapi_move_page_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using wiki_API.prototype.move_page()\r\n\t\twiki.move_page(move_from_title, move_to_title, options, (data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\t/**\r\n\t\t\t\t * <code>\r\n\r\n\t\t\t\te.g., { code: 'articleexists', info: 'A page of that name already exists, or the name you have chosen is not valid. Please choose another name.', '*': '...' }\r\n\t\t\t\te.g., { code: 'missingtitle', info: \"The page you specified doesn't exist.\", '*': '...' }\r\n\r\n\t\t\t\t</code>\r\n\t\t\t\t */\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\t/**\r\n\t\t\t\t * <code>\r\n\r\n\t\t\t\te.g., { from: 'from', to: 'to', reason: 'move', redirectcreated: '', moveoverredirect: '' }\r\n\r\n\t\t\t\t</code>\r\n\t\t\t\t */\r\n\t\t\t\tresolve(data);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_move_page_executor.bind(this));\r\n\r\n}\r\n\r\n/**\r\n * Move to `move_to_title`. Must call `wiki.page(move_from_title)` first!\r\n * \r\n * @example <code>\r\n\r\n\tpage_data = await wiki.page(move_from_title);\r\n\ttry { await wiki.move_to(move_to_title, { reason: reason, noredirect: true, movetalk: true }); } catch (e) {}\r\n\r\n * </code>\r\n * \r\n * @param {Object|String}[move_to_title]\r\n * @param {Object}[options]\r\n */\r\nfunction wikiapi_move_to(move_to_title, options) {\r\n\tfunction wikiapi_move_to_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tif (!wiki.last_page) {\r\n\t\t\treject(new Error('wikiapi_move_to: Must call .page() first!'\r\n\t\t\t\t+ ' Can not move to ' + CeL.wiki.title_link_of(move_to_title)));\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// using wiki_API.prototype.move_to()\r\n\t\twiki.move_to(move_to_title, options, (data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\t/**\r\n\t\t\t\t * <code>\r\n\r\n\t\t\t\te.g., { code: 'articleexists', info: 'A page of that name already exists, or the name you have chosen is not valid. Please choose another name.', '*': '...' }\r\n\t\t\t\te.g., { code: 'missingtitle', info: \"The page you specified doesn't exist.\", '*': '...' }\r\n\r\n\t\t\t\t</code>\r\n\t\t\t\t */\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\t/**\r\n\t\t\t\t * <code>\r\n\r\n\t\t\t\te.g., { from: 'from', to: 'to', reason: 'move', redirectcreated: '', moveoverredirect: '' }\r\n\r\n\t\t\t\t</code>\r\n\t\t\t\t */\r\n\t\t\t\tresolve(data);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_move_to_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_purge(title, options) {\r\n\tif (CeL.is_Object(title) && !options) {\r\n\t\t// shift arguments.\r\n\t\t[title, options] = [null, title];\r\n\t}\r\n\r\n\tfunction wikiapi_purge_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tif (title) {\r\n\t\t\twiki.page(title);\r\n\t\t}\r\n\t\t// using wiki_API.purge\r\n\t\twiki.purge((data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(data);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_purge_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction modify_data_entity(data_to_modify, options) {\r\n\tfunction modify_data_entity_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t//console.trace(wiki);\r\n\r\n\t\t// using function wikidata_edit() @ https://github.com/kanasimi/CeJS/blob/master/application/net/wiki/data.js\r\n\t\t// wiki.edit_data(id, data, options, callback)\r\n\t\twiki.data(this).edit_data(data_to_modify || this, options, (data_entity, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\twiki.setup_data_entity(data_entity);\r\n\t\t\t\tresolve(data_entity);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(modify_data_entity_executor.bind(this));\r\n}\r\n\r\nfunction setup_data_entity(data_entity) {\r\n\t//assert: data_entity[KEY_SESSION].host === this\r\n\t//console.trace(data_entity[KEY_SESSION].host === this);\r\n\tdelete data_entity[KEY_SESSION];\r\n\r\n\tObject.defineProperties(data_entity, {\r\n\t\t[KEY_wiki_session]: { value: this },\r\n\t\tmodify: { value: modify_data_entity },\r\n\t});\r\n}\r\n\r\nfunction wikiapi_data(key, property, options) {\r\n\tif (CeL.is_Object(property) && !options) {\r\n\t\t// shift arguments.\r\n\t\t[property, options] = [null, property];\r\n\t}\r\n\r\n\tfunction wikiapi_data_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using wikidata_entity() → wikidata_datavalue()\r\n\t\twiki.data(key, property, (data_entity, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\twiki.setup_data_entity(data_entity);\r\n\t\t\t\tresolve(data_entity);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_data_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\n// Warning: Won't throw if title isn't existed!\r\nfunction wikiapi_list(list_type, title, options) {\r\n\tfunction wikiapi_list_executor(resolve, reject) {\r\n\t\toptions = CeL.setup_options(options);\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tCeL.wiki.list(title, (list/* , target, options */) => {\r\n\t\t\t// console.trace(list);\r\n\t\t\tif (list.error) {\r\n\t\t\t\treject(list.error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(list);\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t[KEY_SESSION]: wiki,\r\n\t\t\ttype: list_type,\r\n\t\t\t// namespace: '0|1',\r\n\t\t\t...options\r\n\t\t});\r\n\r\n\t\t/**\r\n\t\t * <code>\r\n\r\n\t\t// method 2: 使用循環取得資料版:\r\n\t\twiki.cache({\r\n\t\t\t// Do not write cache file to disk.\r\n\t\t\tcache: false,\r\n\t\t\ttype: list_type,\r\n\t\t\tlist: title\r\n\t\t}, (list, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(list);\r\n\t\t\t}\r\n\t\t},\r\n\t\t\t// default options === this\r\n\t\t\t//{ namespace : '0|1' }\r\n\t\t\toptions);\r\n\r\n\t\t// NG: 不應使用單次版\r\n\t\twiki[list_type](title, (list, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(list);\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t\tlimit: 'max', ...options\r\n\t\t\t});\r\n\r\n\t\t</code>\r\n\t\t */\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_list_executor.bind(this));\r\n}\r\n\r\n// functions for several kinds of lists\r\nfunction wikiapi_for_each(type, title, for_each, options) {\r\n\treturn wikiapi_list.call(this, type, title, {\r\n\t\tfor_each,\r\n\t\t...options\r\n\t});\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_category_tree(root_category, options) {\r\n\tfunction wikiapi_category_tree_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using CeL.wiki.prototype.category_tree\r\n\t\twiki.category_tree(root_category, (list, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(list);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_category_tree_executor.bind(this));\r\n}\r\n\r\n// export 子分類 subcategory\r\nwikiapi.KEY_subcategories = wiki_API.KEY_subcategories;\r\n// To use:\r\n// const KEY_subcategories = Wikiapi.KEY_subcategories;\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_search(key, options) {\r\n\tfunction wikiapi_search_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using wiki_API.search\r\n\t\twiki.search(key, (list, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(list);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_search_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_redirects_root(title, options) {\r\n\tfunction wikiapi_redirects_root_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using wiki_API.redirects_root\r\n\t\twiki_API.redirects_root(title, (_title, page_data, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else if (options && options.get_page) {\r\n\t\t\t\tpage_data.query_title = title;\r\n\t\t\t\tresolve(page_data);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(_title);\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t[KEY_SESSION]: wiki,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_redirects_root_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_redirects_here(title, options) {\r\n\tfunction wikiapi_redirects_here_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t// using wiki_API.redirects_here\r\n\t\twiki_API.redirects_here(title, (root_page_data, redirect_list, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\t// assert: root_page_data.redirects === redirect_list\r\n\t\t\t\t// console.log([root_page_data, redirect_list]);\r\n\t\t\t\tresolve(redirect_list);\r\n\t\t\t}\r\n\t\t}, {\r\n\t\t\t[KEY_SESSION]: wiki,\r\n\t\t\t// redirect_list[0] === root_page_data\r\n\t\t\tinclude_root: true,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_redirects_here_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\n// Upload a local file directly:\r\n//let result = await wiki_session.upload_file({ file_path: '/local/file/path', comment: '', });\r\n// Upload file from URL:\r\n//let result = await wiki_session.upload_file({ media_url: 'https://media.url/name.jpg', comment: '', });\r\n// Other file_data options: @see https://github.com/kanasimi/CeJS/blob/master/application/net/wiki/edit.js#L912 /options.text/\r\n// filename:'Will set via .file_path or .media_url if not settled.',\r\n// text: '', text: { description: '', source: '', author: '', permission: '',... },\r\n// bot: 1, tags:\"tag1|tag2\", ignorewarnings: 1, ...\r\nfunction wikiapi_upload_file(file_data) {\r\n\tfunction wikiapi_upload_file_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\twiki.upload(file_data, (result, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(result);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_upload_file_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\n/**\r\n * Edit / process pages listing in `page_list`.\r\n * \r\n * @param {Array}page_list\r\n *            title list or page_data list\r\n * @param {Function}for_each_page\r\n *            processor for each page. for_each_page(page_data with contents)\r\n * @param {Object}[options]\r\n *            e.g., { summary: '' }<br />\r\n *            e.g., { no_edit: true, no_warning: true, allow_empty: true, page_options: {\r\n *            redirects: 1, rvprop: 'ids|content|timestamp|user' } }<br />\r\n *            no_warning: hide \"wiki_API_page: No contents: [[title]]\" messages\r\n */\r\nfunction wikiapi_for_each_page(page_list, for_each_page, options) {\r\n\tfunction wikiapi_for_each_page_executor(resolve, reject) {\r\n\t\tconst promises = [];\r\n\t\tlet error;\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tconst work_options = {\r\n\t\t\t// log_to: log_to,\r\n\t\t\t// no_edit: true,\r\n\t\t\t// tags: 'bot trial',\r\n\t\t\tno_message: options && options.no_edit,\r\n\r\n\t\t\t...options,\r\n\r\n\t\t\tonerror(_error) {\r\n\t\t\t\t// console.trace('Get error (onerror): ' + _error);\r\n\t\t\t\tif (reject_edit_error(_error => { if (!error) error = _error; }, _error)\r\n\t\t\t\t\t&& options && options.onerror) {\r\n\t\t\t\t\toptions.onerror(_error);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\teach(page_data/* , messages, config */) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\t// `page_data` maybe non-object when error occurres.\r\n\t\t\t\t\tif (page_data)\r\n\t\t\t\t\t\tObject.defineProperties(page_data, page_data_attributes);\r\n\r\n\t\t\t\t\tif (work_options.will_call_methods) {\r\n\t\t\t\t\t\t// ** 這邊的操作在 wiki.next() 中會因 .will_call_methods 先執行一次。\r\n\r\n\t\t\t\t\t\t// 因為接下來的操作可能會呼叫 this.next() 本身，\r\n\t\t\t\t\t\t// 因此必須把正在執行的標記消掉。\r\n\t\t\t\t\t\t// wiki.running = false;\r\n\t\t\t\t\t\t// 每次都設定 `wiki.running = false`，在這會出問題:\r\n\t\t\t\t\t\t// 20200209.「S.P.A.L.」関連ページの貼り換えのbot作業依頼.js\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst result = for_each_page.apply(this, arguments);\r\n\t\t\t\t\t// Promise.isPromise()\r\n\t\t\t\t\tif (CeL.is_thenable(result)) {\r\n\t\t\t\t\t\tpromises.push(result);\r\n\r\n\t\t\t\t\t\t// https://stackoverflow.com/questions/30564053/how-can-i-synchronously-determine-a-javascript-promises-state\r\n\t\t\t\t\t\t// https://github.com/kudla/promise-status-async/blob/master/lib/promiseState.js\r\n\t\t\t\t\t\tconst fulfilled = Object.create(null);\r\n\t\t\t\t\t\t// Promise.race([result, fulfilled])\r\n\t\t\t\t\t\t// .then(v => { status = v === t ? \"pending\" :\r\n\t\t\t\t\t\t// \"fulfilled\" },\r\n\t\t\t\t\t\t// () => { status = \"rejected\" });\r\n\t\t\t\t\t\tPromise.race([result, fulfilled]).then(first_fulfilled => {\r\n\t\t\t\t\t\t\t// wiki.running === true\r\n\t\t\t\t\t\t\t// console.trace(`wiki.running = ${wiki.running}`);\r\n\t\t\t\t\t\t\tif (first_fulfilled === fulfilled) {\r\n\t\t\t\t\t\t\t\t// assert: result is pending\r\n\t\t\t\t\t\t\t\t// e.g.,\r\n\t\t\t\t\t\t\t\t// await\r\n\t\t\t\t\t\t\t\t// wiki.for_each_page(need_check_redirected_list,\r\n\t\t\t\t\t\t\t\t// ...)\r\n\t\t\t\t\t\t\t\t// @ await\r\n\t\t\t\t\t\t\t\t// wiki.for_each_page(vital_articles_list,\r\n\t\t\t\t\t\t\t\t// for_each_list_page, ...)\r\n\t\t\t\t\t\t\t\t// @ 20200122.update_vital_articles.js\r\n\r\n\t\t\t\t\t\t\t\t// console.trace('call wiki.next()');\r\n\t\t\t\t\t\t\t\twiki.next();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, () => { /* Do not catch error here. */ });\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// wiki.next() will wait for result.then() calling back\r\n\t\t\t\t\t// if CeL.is_thenable(result).\r\n\t\t\t\t\t// e.g., async function for_each_list_page(list_page_data) @\r\n\t\t\t\t\t// 20200122.update_vital_articles.js\r\n\t\t\t\t\treturn result;\r\n\t\t\t\t} catch (_error) {\r\n\t\t\t\t\tif (typeof _error === 'object')\r\n\t\t\t\t\t\tconsole.error(_error);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tCeL.error('wikiapi_for_each_page: Catched error: ' + _error);\r\n\t\t\t\t\tif (!error) error = _error;\r\n\r\n\t\t\t\t\t// re-throw to wiki.work()\r\n\t\t\t\t\t// throw _error;\r\n\r\n\t\t\t\t\t// return wikiapi.skip_edit;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t// Run after all list items (pages) processed.\r\n\t\t\tlast() {\r\n\t\t\t\t// this === options\r\n\t\t\t\t// console.trace('last()');\r\n\t\t\t\tPromise.allSettled(promises)\r\n\t\t\t\t\t// 提早執行 resolve(), reject() 的話，可能導致後續的程式碼 `options.last`\r\n\t\t\t\t\t// 延後執行，程式碼順序錯亂。\r\n\t\t\t\t\t.catch(_error => { if (!error) error = _error; })\r\n\t\t\t\t\t.then(options && typeof options.last === 'function' && options.last.bind(this))\r\n\t\t\t\t\t// .then(() => { console.trace(\r\n\t\t\t\t\t// 'wikiapi_for_each_page_executor Promise finished.'); })\r\n\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\tif (error) {\r\n\t\t\t\t\t\t\tif (options.throw_error)\r\n\t\t\t\t\t\t\t\treject(error);\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tconsole.error(error);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tresolve(this);\r\n\t\t\t\t\t}, reject);\r\n\t\t\t\t// console.trace('wikiapi_for_each_page_executor finish:');\r\n\t\t\t\t// console.log(options);\r\n\t\t\t\t// console.log(\r\n\t\t\t\t// 'wikiapi_for_each_page_executor last() finished');\r\n\t\t\t}\r\n\t\t};\r\n\t\t// 一次取得多個頁面內容，以節省傳輸次數。\r\n\t\twiki.work(work_options, page_list);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_for_each_page_executor.bind(this));\r\n}\r\n\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_convert_Chinese(text, options) {\r\n\tfunction wikiapi_convert_Chinese(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tif (typeof options === 'string') {\r\n\t\t\toptions = { uselang: options };\r\n\t\t}\r\n\t\tconst site_name = wiki_API.site_name(null, { [KEY_SESSION]: wiki });\r\n\t\tif (/^zh/.test(site_name)) {\r\n\t\t\toptions = Object.assign({ [KEY_SESSION]: wiki }, options);\r\n\t\t}\r\n\r\n\t\t// using wiki_API.search\r\n\t\tCeL.wiki.convert_Chinese(text, (text, error) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\tresolve(text);\r\n\t\t\t}\r\n\t\t}, options);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_convert_Chinese.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\n// May only test in the [https://tools.wmflabs.org/ Wikimedia Toolforge]\r\nfunction wikiapi_run_SQL(SQL, for_each_row/* , options */) {\r\n\tfunction wikiapi_run_SQL_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\tfunction run_callback() {\r\n\t\t\twiki.SQL_session.SQL(SQL, (error, rows/* , fields */) => {\r\n\t\t\t\tif (error) {\r\n\t\t\t\t\treject(error);\r\n\t\t\t\t} else {\r\n\t\t\t\t\trows.forEach(for_each_row);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tresolve();\r\n\t\t}\r\n\t\tif (wiki.SQL_session) {\r\n\t\t\trun_callback();\r\n\t\t\treturn;\r\n\t\t}\r\n\t\twiki.SQL_session = new wiki_API.SQL((error, rows, fields) => {\r\n\t\t\tif (error) {\r\n\t\t\t\treject(error);\r\n\t\t\t} else {\r\n\t\t\t\trun_callback();\r\n\t\t\t}\r\n\t\t}, wiki);\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_run_SQL_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_setup_layout_elements(options) {\r\n\tfunction wikiapi_setup_layout_elements_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\twiki_API.setup_layout_elements(resolve, {\r\n\t\t\t[KEY_SESSION]: wiki,\r\n\t\t\t...options\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_setup_layout_elements_executor.bind(this));\r\n}\r\n\r\n// --------------------------------------------------------\r\n\r\n/**\r\n * Get featured content.\r\n * \r\n * @example<code>\r\n\r\n// MUST including wiki.featured_content first to get featured content!\r\nCeL.run('application.net.wiki.featured_content');\r\n...\r\nconst FC_data_hash = await wiki.get_featured_content();\r\nFC_data_hash === wiki.FC_data_hash;\r\n\r\n </code>\r\n * \r\n * @param {String|Object}[options]\r\n *            {String}type (FFA|GA|FA|FL) or options:\r\n *            {type,on_conflict(FC_title, {from,to})}\r\n */\r\nfunction wikiapi_get_featured_content(options) {\r\n\tif (!options || !options.type) {\r\n\t\tconst session = this;\r\n\t\tlet promise = Promise.resolve();\r\n\t\twikiapi_get_featured_content.default_types.forEach(type => {\r\n\t\t\tpromise = promise.then(wikiapi_get_featured_content.bind(session, { ...options, type }));\r\n\t\t});\r\n\t\treturn promise;\r\n\t}\r\n\r\n\tfunction wikiapi_get_featured_content_executor(resolve, reject) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\twiki.get_featured_content(options, (FC_data_hash) => {\r\n\t\t\ttry {\r\n\t\t\t\tthis.FC_data_hash = FC_data_hash;\r\n\t\t\t\tresolve(FC_data_hash);\r\n\t\t\t} catch (e) {\r\n\t\t\t\treject(e);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn new Promise(wikiapi_get_featured_content_executor.bind(this));\r\n}\r\n\r\nwikiapi_get_featured_content.default_types = 'FFA|GA|FA|FL'.split('|');\r\n\r\n// --------------------------------------------------------\r\n\r\nfunction wikiapi_site_name(language, options) {\r\n\tif (language === undefined) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\toptions = { [KEY_SESSION]: wiki, ...options };\r\n\t}\r\n\treturn wiki_API.site_name(language, options);\r\n}\r\n\r\n// --------------------------------------------------------\r\n// exports\r\n\r\nObject.assign(wikiapi.prototype, {\r\n\tsite_name: wikiapi_site_name,\r\n\tlogin: wikiapi_login,\r\n\r\n\tpage: wikiapi_page,\r\n\ttracking_revisions: wikiapi_tracking_revisions,\r\n\tedit_page: wikiapi_edit_page,\r\n\tedit(content, options) {\r\n\t\treturn this.edit_page(null, content, options);\r\n\t},\r\n\tmove_to: wikiapi_move_to,\r\n\tmove_page: wikiapi_move_page,\r\n\tpurge: wikiapi_purge,\r\n\t// wrapper\r\n\tlisten(listener, options) {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\treturn wiki.listen(listener, options);\r\n\t},\r\n\r\n\tcategory_tree: wikiapi_category_tree,\r\n\tsearch: wikiapi_search,\r\n\r\n\tredirects_root: wikiapi_redirects_root,\r\n\t// Warning: 採用 wiki_API.redirects_here(title) 才能追溯重新導向的標的。\r\n\t// wiki.redirects() 無法追溯重新導向的標的！\r\n\tredirects_here: wikiapi_redirects_here,\r\n\r\n\tupload: wikiapi_upload_file,\r\n\r\n\tget_featured_content: wikiapi_get_featured_content,\r\n\r\n\tfor_each_page: wikiapi_for_each_page,\r\n\r\n\tfor_each: wikiapi_for_each,\r\n\r\n\tdata: wikiapi_data,\r\n\r\n\tconvert_Chinese: wikiapi_convert_Chinese,\r\n\r\n\trun_SQL: wikiapi_run_SQL,\r\n\r\n\tsetup_layout_elements: wikiapi_setup_layout_elements,\r\n});\r\n\r\n// wrapper for properties\r\nfor (const property_name of ('task_configuration|latest_task_configuration').split('|')) {\r\n\tObject.defineProperty(wikiapi.prototype, property_name, {\r\n\t\tget() {\r\n\t\t\tconst wiki = this[KEY_wiki_session];\r\n\t\t\treturn wiki[property_name];\r\n\t\t}\r\n\t});\r\n}\r\n\r\n// wrapper for sync functions\r\nfor (const function_name of ('namespace|remove_namespace|is_namespace|to_namespace|is_talk_namespace|to_talk_page|talk_page_to_main|normalize_title'\r\n\t// CeL.run('application.net.wiki.featured_content');\r\n\t// [].map(wiki.to_talk_page.bind(wiki))\r\n\t+ '|get_featured_content_configurations').split('|')) {\r\n\twikiapi.prototype[function_name] = function wrapper() {\r\n\t\tconst wiki = this[KEY_wiki_session];\r\n\t\treturn wiki[function_name].apply(wiki, arguments);\r\n\t};\r\n}\r\n\r\nfor (const type of CeL.wiki.list.type_list) {\r\n\t// Can not use `= (title, options) {}` !\r\n\t// arrow function expression DO NOT has this, arguments, super, or\r\n\t// new.target keywords.\r\n\twikiapi.prototype[type] = function (title, options) {\r\n\t\tconst _this = this;\r\n\t\t/**\r\n\t\t * @example <code>\r\n\t\t\r\n\t\tconst page_list = await wiki.embeddedin(template_name, options);\r\n\t\tawait page_list.each((page_data) => { }, options);\r\n\r\n\t\t * </code>\r\n\t\t */\r\n\t\treturn wikiapi_list.call(this, type, title, options)\r\n\t\t\t.then((page_list) => {\r\n\t\t\t\t// console.log(page_list);\r\n\t\t\t\tpage_list.each = wikiapi_for_each_page.bind(_this, page_list);\r\n\t\t\t\treturn page_list;\r\n\t\t\t});\r\n\t};\r\n}\r\n\r\nmodule.exports = wikiapi;\r\n\r\n// export default wikiapi;\r\n"]},"metadata":{},"sourceType":"script"}