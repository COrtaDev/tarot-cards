{"ast":null,"code":"const mime = require(\"./mime.js\");\n\nconst {\n  extname\n} = require(\"path\");\n/**\n * Represents a multipart/form-data\n */\n\n\nclass FormData {\n  constructor() {\n    /**\n     * The boundary for this form\n     * @readonly\n     * @type {String}\n     */\n    this.boundary = `----------------Ladybug${Math.random().toString().slice(2, 5)}`;\n    /**\n     * Current buffers list\n     * @readonly\n     * @type {Array<Buffer>}\n     */\n\n    this.buffers = [];\n  }\n  /**\n   * Gets the content type for this form data.\n   * @type {String}\n   */\n\n\n  get contentType() {\n    return `multipart/form-data; boundary=${this.boundary}`;\n  }\n  /**\n   * Appends a form data field\n   * @param {String} name - The field name.\n   * @param {String|Buffer|Object} value - The data for this field.\n   * @param {String} [filename] - Filename if sending a file, the extension will also be used to detect the mime type.\n   * @returns {this}\n   */\n\n\n  append(name, value, filename) {\n    if (typeof value === \"undefined\") return;\n    let str = `\\r\\n--${this.boundary}\\r\\nContent-Disposition: form-data; name=\"${name}\"`;\n    let mimeType = null;\n    if (filename) str += `; filename=\"${filename}\"`;\n    if (filename && extname(filename)) mimeType = mime.lookup(extname(filename));\n\n    if (Buffer.isBuffer(value)) {\n      if (!mimeType) mimeType = \"application/octet-stream\";\n    } else if (typeof value === \"object\") {\n      if (!mimeType) mimeType = \"application/json\";\n      value = Buffer.from(JSON.stringify(value));\n    } else if (typeof value === \"string\") {\n      if (!mimeType) mimeType = \"text/plain\";\n      value = Buffer.from(value);\n    }\n\n    if (mimeType) str += `\\r\\nContent-Type: ${mimeType}`;\n    this.buffers.push(Buffer.from(`${str}\\r\\n\\r\\n`), value);\n    return this;\n  }\n  /**\n   * Builds the final form buffer ready to be sent in a request.\n   * @returns {Buffer}\n   */\n\n\n  build() {\n    return Buffer.concat([...this.buffers, Buffer.from(`\\r\\n--${this.boundary}--`)]);\n  }\n\n}\n\nmodule.exports = FormData;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/ladybug-fetch/src/FormData.js"],"names":["mime","require","extname","FormData","constructor","boundary","Math","random","toString","slice","buffers","contentType","append","name","value","filename","str","mimeType","lookup","Buffer","isBuffer","from","JSON","stringify","push","build","concat","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,WAAD,CAApB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,MAAD,CAA3B;AAEA;AACA;AACA;;;AACA,MAAME,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAEZ;AACJ;AACA;AACA;AACA;AACI,SAAKC,QAAL,GAAiB,0BAAyBC,IAAI,CAACC,MAAL,GAAcC,QAAd,GAAyBC,KAAzB,CAA+B,CAA/B,EAAkC,CAAlC,CAAqC,EAA/E;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,OAAL,GAAe,EAAf;AACD;AAED;AACF;AACA;AACA;;;AACE,MAAIC,WAAJ,GAAkB;AAChB,WAAQ,iCAAgC,KAAKN,QAAS,EAAtD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,MAAM,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwB;AAC5B,QAAG,OAAOD,KAAP,KAAiB,WAApB,EAAiC;AACjC,QAAIE,GAAG,GAAI,SAAQ,KAAKX,QAAS,6CAA4CQ,IAAK,GAAlF;AACA,QAAII,QAAQ,GAAG,IAAf;AACA,QAAGF,QAAH,EAAaC,GAAG,IAAK,eAAcD,QAAS,GAA/B;AACb,QAAGA,QAAQ,IAAIb,OAAO,CAACa,QAAD,CAAtB,EAAkCE,QAAQ,GAAGjB,IAAI,CAACkB,MAAL,CAAYhB,OAAO,CAACa,QAAD,CAAnB,CAAX;;AAElC,QAAGI,MAAM,CAACC,QAAP,CAAgBN,KAAhB,CAAH,EAA2B;AACzB,UAAG,CAACG,QAAJ,EAAcA,QAAQ,GAAG,0BAAX;AACf,KAFD,MAEO,IAAG,OAAOH,KAAP,KAAiB,QAApB,EAA8B;AACnC,UAAG,CAACG,QAAJ,EAAcA,QAAQ,GAAG,kBAAX;AACdH,MAAAA,KAAK,GAAGK,MAAM,CAACE,IAAP,CAAYC,IAAI,CAACC,SAAL,CAAeT,KAAf,CAAZ,CAAR;AACD,KAHM,MAGA,IAAG,OAAOA,KAAP,KAAiB,QAApB,EAA8B;AACnC,UAAG,CAACG,QAAJ,EAAcA,QAAQ,GAAG,YAAX;AACdH,MAAAA,KAAK,GAAGK,MAAM,CAACE,IAAP,CAAYP,KAAZ,CAAR;AACD;;AACD,QAAGG,QAAH,EAAaD,GAAG,IAAK,qBAAoBC,QAAS,EAArC;AACb,SAAKP,OAAL,CAAac,IAAb,CAAkBL,MAAM,CAACE,IAAP,CAAa,GAAEL,GAAI,UAAnB,CAAlB,EAAiDF,KAAjD;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACEW,EAAAA,KAAK,GAAG;AACN,WAAON,MAAM,CAACO,MAAP,CAAc,CAAC,GAAG,KAAKhB,OAAT,EAAkBS,MAAM,CAACE,IAAP,CAAa,SAAQ,KAAKhB,QAAS,IAAnC,CAAlB,CAAd,CAAP;AACD;;AA5DY;;AA+DfsB,MAAM,CAACC,OAAP,GAAiBzB,QAAjB","sourcesContent":["const mime = require(\"./mime.js\");\nconst { extname } = require(\"path\");\n\n/**\n * Represents a multipart/form-data\n */\nclass FormData {\n  constructor() {\n\n    /**\n     * The boundary for this form\n     * @readonly\n     * @type {String}\n     */\n    this.boundary = `----------------Ladybug${Math.random().toString().slice(2, 5)}`;\n\n    /**\n     * Current buffers list\n     * @readonly\n     * @type {Array<Buffer>}\n     */\n    this.buffers = [];\n  }\n\n  /**\n   * Gets the content type for this form data.\n   * @type {String}\n   */\n  get contentType() {\n    return `multipart/form-data; boundary=${this.boundary}`;\n  }\n\n  /**\n   * Appends a form data field\n   * @param {String} name - The field name.\n   * @param {String|Buffer|Object} value - The data for this field.\n   * @param {String} [filename] - Filename if sending a file, the extension will also be used to detect the mime type.\n   * @returns {this}\n   */\n  append(name, value, filename) {\n    if(typeof value === \"undefined\") return;\n    let str = `\\r\\n--${this.boundary}\\r\\nContent-Disposition: form-data; name=\"${name}\"`;\n    let mimeType = null;\n    if(filename) str += `; filename=\"${filename}\"`;\n    if(filename && extname(filename)) mimeType = mime.lookup(extname(filename));\n\n    if(Buffer.isBuffer(value)) {\n      if(!mimeType) mimeType = \"application/octet-stream\";\n    } else if(typeof value === \"object\") {\n      if(!mimeType) mimeType = \"application/json\";\n      value = Buffer.from(JSON.stringify(value));\n    } else if(typeof value === \"string\") {\n      if(!mimeType) mimeType = \"text/plain\";\n      value = Buffer.from(value);\n    }\n    if(mimeType) str += `\\r\\nContent-Type: ${mimeType}`;\n    this.buffers.push(Buffer.from(`${str}\\r\\n\\r\\n`), value);\n    return this;\n  }\n\n  /**\n   * Builds the final form buffer ready to be sent in a request.\n   * @returns {Buffer}\n   */\n  build() {\n    return Buffer.concat([...this.buffers, Buffer.from(`\\r\\n--${this.boundary}--`)]);\n  }\n}\n\nmodule.exports = FormData;\n"]},"metadata":{},"sourceType":"script"}