{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Deck from './Components/Deck';\nimport SelectDeck from './Modals/SelectDeck';\nimport { getMajorArcana } from './Helpers/getCards';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  _s();\n\n  const [modalShow, setModalShow] = useState(true);\n  useEffect(() => {\n    if (modalShow) return;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(SelectDeck, {\n      show: modalShow,\n      onHide: () => setModalShow(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(App, \"un3ltAzJZOIiRbFtOALfZxQpBsc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/App.js"],"names":["React","useEffect","useState","Deck","SelectDeck","getMajorArcana","App","modalShow","setModalShow"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;AACA,SAASC,cAAT,QAA+B,oBAA/B;AAEA,OAAO,sCAAP;;AAIA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,SAAJ,EAAe;AAChB,GAFQ,CAAT;AAIA,sBACE;AAAA,2BACE,QAAC,UAAD;AACE,MAAA,IAAI,EAAEA,SADR;AAEE,MAAA,MAAM,EAAE,MAAMC,YAAY,CAAC,KAAD;AAF5B;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAQD;;GAfQF,G;;KAAAA,G;AAiBT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Deck from './Components/Deck';\nimport SelectDeck from './Modals/SelectDeck';\nimport { getMajorArcana } from './Helpers/getCards';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nfunction App() {\n  const [modalShow, setModalShow] = useState(true);\n  \n  useEffect(() => {\n    if (modalShow) return;\n  });\n\n  return (\n    <>\n      <SelectDeck\n        show={modalShow}\n        onHide={() => setModalShow(false)}\n      />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}