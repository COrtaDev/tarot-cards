{"ast":null,"code":"/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\nvar parse = require('../parse');\n\nvar html = require('../static').html;\n\nvar text = require('../static').text;\n\nvar updateDOM = parse.update;\n\nvar utils = require('../utils');\n\nvar domEach = utils.domEach;\nvar cloneDom = utils.cloneDom;\nvar isHtml = utils.isHtml;\nvar slice = Array.prototype.slice;\n\nvar domhandler = require('domhandler');\n\nvar DomUtils = require('htmlparser2').DomUtils;\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if\n * necessary.\n *\n * @param {cheerio|string|cheerio[]|string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @private\n */\n\n\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  } else if (elem.cheerio) {\n    return clone ? cloneDom(elem.get(), elem.options) : elem.get();\n  } else if (Array.isArray(elem)) {\n    return elem.reduce(function (newElems, el) {\n      return newElems.concat(this._makeDomArray(el, clone));\n    }.bind(this), []);\n  } else if (typeof elem === 'string') {\n    return parse(elem, this.options, false).children;\n  }\n\n  return clone ? cloneDom([elem]) : [elem];\n};\n\nvar _insert = function (concatenator) {\n  return function () {\n    var elems = slice.call(arguments);\n    var lastIdx = this.length - 1;\n    return domEach(this, function (i, el) {\n      var dom;\n      var domSrc;\n\n      if (typeof elems[0] === 'function') {\n        domSrc = elems[0].call(el, i, html(el.children));\n      } else {\n        domSrc = elems;\n      }\n\n      dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n};\n/*\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @param {Array} array Target array to splice.\n * @param {Number} spliceIdx Index at which to begin changing the array.\n * @param {Number} spliceCount Number of elements to remove from the array.\n * @param {Array} newElems Elements to insert into the array.\n *\n * @private\n */\n\n\nvar uniqueSplice = function (array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null;\n  var idx;\n  var len;\n  var prevIdx;\n  var node;\n  var oldParent; // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\n    node = newElems[idx];\n    oldParent = node.parent;\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n\n  return array.splice.apply(array, spliceArgs);\n};\n/**\n * Insert every element in the set of matched elements to the end of the\n * target.\n *\n * @param {string|cheerio} target - Element to append elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/appendTo/}\n */\n\n\nexports.appendTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target.append(this);\n  return this;\n};\n/**\n * Insert every element in the set of matched elements to the beginning of the\n * target.\n *\n * @param {string|cheerio} target - Element to prepend elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prependTo/}\n */\n\n\nexports.prependTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target.prepend(this);\n  return this;\n};\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').append('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/append/}\n */\n\n\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').prepend('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prepend/}\n */\n\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var wrapperFn = typeof wrapper === 'function' && wrapper;\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n      var wrapperDom;\n      var elInsertLocation;\n      var j;\n\n      if (wrapperFn) {\n        wrapper = wrapperFn.call(el, i);\n      }\n\n      if (typeof wrapper === 'string' && !isHtml(wrapper)) {\n        wrapper = lastParent.find(wrapper).clone();\n      }\n\n      wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);\n      elInsertLocation = wrapperDom[0]; // Find the deepest child. Only consider the first tag child of each node\n      // (ignore text); stop if no children are found.\n\n      j = 0;\n\n      while (elInsertLocation && elInsertLocation.children) {\n        if (j >= elInsertLocation.children.length) {\n          break;\n        }\n\n        if (elInsertLocation.children[j].type === 'tag') {\n          elInsertLocation = elInsertLocation.children[j];\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, wrapperDom);\n    }\n\n    return this;\n  };\n}\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the\n * set of matched elements. This method returns the original set of elements\n * for chaining purposes.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrap(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrap(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrap/}\n */\n\n\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n  updateDOM([el], elInsertLocation); // The previous operation removed the current element from the `siblings`\n  // array, so the `dom` array can be inserted without removing any\n  // additional elements.\n\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n/**\n * The .wrapInner() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the set\n * of matched elements.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around the content of each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrapInner(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrapInner(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrapInner/}\n */\n\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').after('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/after/}\n */\n\nexports.after = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom; // If not found, move on\n\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx); // Add element after `this` element\n\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n  return this;\n};\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements after.\n *\n * @see {@link http://api.jquery.com/insertAfter/}\n */\n\n\nexports.insertAfter = function (target) {\n  var clones = [];\n  var self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').before('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/before/}\n */\n\n\nexports.before = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom; // If not found, move on\n\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx); // Add element before `el` element\n\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n  return this;\n};\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements before.\n *\n * @see {@link http://api.jquery.com/insertBefore/}\n */\n\n\nexports.insertBefore = function (target) {\n  var clones = [];\n  var self = this;\n\n  if (typeof target === 'string') {\n    target = this.constructor.call(this.constructor, target, null, this._originalRoot);\n  }\n\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el); // If not found, move on\n\n    if (index < 0) return; // Add cloned `this` element(s) after target element\n\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @example\n *\n * $('.pear').remove()\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n *\n * @param {string} [selector] - Optional selector for elements to remove.\n *\n * @see {@link http://api.jquery.com/remove/}\n */\n\n\nexports.remove = function (selector) {\n  var elems = this; // Filter if we have selector\n\n  if (selector) elems = elems.filter(selector);\n  domEach(elems, function (i, el) {\n    DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n  return this;\n};\n/**\n * Replaces matched elements with `content`.\n *\n * @example\n *\n * const plum = $('<li class=\"plum\">Plum</li>')\n * $('.pear').replaceWith(plum)\n * $.html()\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * @param {cheerio|Function} content - Replacement for matched elements.\n *\n * @see {@link http://api.jquery.com/replaceWith/}\n */\n\n\nexports.replaceWith = function (content) {\n  var self = this;\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n\n    var dom = self._makeDomArray(typeof content === 'function' ? content.call(el, i, el) : content);\n\n    var index; // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n\n    updateDOM(dom, null);\n    index = siblings.indexOf(el); // Completely remove old element\n\n    uniqueSplice(siblings, index, 1, dom, parent);\n    el.parent = el.prev = el.next = null;\n  });\n  return this;\n};\n/**\n * Empties an element, removing all its children.\n *\n * @example\n *\n * $('ul').empty()\n * $.html()\n * //=>  <ul id=\"fruits\"></ul>\n *\n * @see {@link http://api.jquery.com/empty/}\n */\n\n\nexports.empty = function () {\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    el.children.length = 0;\n  });\n  return this;\n};\n/**\n * Gets an HTML content string from the first selected element. If `htmlString`\n * is specified, each selected element's content is replaced by the new\n * content.\n *\n * @param {string} str - If specified used to replace selection's contents.\n *\n * @example\n *\n * $('.orange').html()\n * //=> Orange\n *\n * $('#fruits').html('<li class=\"mango\">Mango</li>').html()\n * //=> <li class=\"mango\">Mango</li>\n *\n * @see {@link http://api.jquery.com/html/}\n */\n\n\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return html(this[0].children, this.options);\n  }\n\n  var opts = this.options;\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var content = str.cheerio ? str.clone().get() : parse('' + str, opts, false).children;\n    updateDOM(content, el);\n  });\n  return this;\n};\n\nexports.toString = function () {\n  return html(this, this.options);\n};\n/**\n * Get the combined text contents of each element in the set of matched\n * elements, including their descendants. If `textString` is specified, each\n * selected element's content is replaced by the new text content.\n *\n * @param {string} [str] - If specified replacement for the selected element's contents.\n *\n * @example\n *\n * $('.orange').text()\n * //=> Orange\n *\n * $('ul').text()\n * //=>  Apple\n * //    Orange\n * //    Pear\n *\n * @see {@link http://api.jquery.com/text/}\n */\n\n\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return text(this);\n  } else if (typeof str === 'function') {\n    // Function support\n    var self = this;\n    return domEach(this, function (i, el) {\n      return exports.text.call(self._make(el), str.call(el, i, text([el])));\n    });\n  } // Append text node to each selected elements\n\n\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n    var textNode = new domhandler.Text(str);\n    updateDOM(textNode, el);\n  });\n  return this;\n};\n/**\n * Clone the cheerio object.\n *\n * @example\n *\n * const moreFruit = $('#fruits').clone()\n *\n * @see {@link http://api.jquery.com/clone/}\n */\n\n\nexports.clone = function () {\n  return this._make(cloneDom(this.get(), this.options));\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/cheerio/lib/api/manipulation.js"],"names":["parse","require","html","text","updateDOM","update","utils","domEach","cloneDom","isHtml","slice","Array","prototype","domhandler","DomUtils","exports","_makeDomArray","makeDomArray","elem","clone","cheerio","get","options","isArray","reduce","newElems","el","concat","bind","children","_insert","concatenator","elems","call","arguments","lastIdx","length","i","dom","domSrc","uniqueSplice","array","spliceIdx","spliceCount","parent","spliceArgs","prev","next","idx","len","prevIdx","node","oldParent","indexOf","splice","apply","appendTo","target","constructor","_originalRoot","append","prependTo","prepend","_wrap","insert","wrapper","wrapperFn","lastParent","parents","last","wrapperDom","elInsertLocation","j","find","type","wrap","siblings","index","wrapInner","after","insertAfter","clones","self","remove","clonedSelf","push","before","insertBefore","selector","filter","removeElement","replaceWith","content","empty","forEach","child","str","undefined","opts","toString","_make","textNode","Text"],"mappings":"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","sourcesContent":["/**\n * Methods for modifying the DOM structure.\n *\n * @module cheerio/manipulation\n */\n\nvar parse = require('../parse');\nvar html = require('../static').html;\nvar text = require('../static').text;\nvar updateDOM = parse.update;\nvar utils = require('../utils');\nvar domEach = utils.domEach;\nvar cloneDom = utils.cloneDom;\nvar isHtml = utils.isHtml;\nvar slice = Array.prototype.slice;\nvar domhandler = require('domhandler');\nvar DomUtils = require('htmlparser2').DomUtils;\n\n/**\n * Create an array of nodes, recursing into arrays and parsing strings if\n * necessary.\n *\n * @param {cheerio|string|cheerio[]|string[]} [elem] - Elements to make an array of.\n * @param {boolean} [clone] - Optionally clone nodes.\n * @private\n */\nexports._makeDomArray = function makeDomArray(elem, clone) {\n  if (elem == null) {\n    return [];\n  } else if (elem.cheerio) {\n    return clone ? cloneDom(elem.get(), elem.options) : elem.get();\n  } else if (Array.isArray(elem)) {\n    return elem.reduce(\n      function (newElems, el) {\n        return newElems.concat(this._makeDomArray(el, clone));\n      }.bind(this),\n      []\n    );\n  } else if (typeof elem === 'string') {\n    return parse(elem, this.options, false).children;\n  }\n  return clone ? cloneDom([elem]) : [elem];\n};\n\nvar _insert = function (concatenator) {\n  return function () {\n    var elems = slice.call(arguments);\n    var lastIdx = this.length - 1;\n\n    return domEach(this, function (i, el) {\n      var dom;\n      var domSrc;\n\n      if (typeof elems[0] === 'function') {\n        domSrc = elems[0].call(el, i, html(el.children));\n      } else {\n        domSrc = elems;\n      }\n\n      dom = this._makeDomArray(domSrc, i < lastIdx);\n      concatenator(dom, el.children, el);\n    });\n  };\n};\n\n/*\n * Modify an array in-place, removing some number of elements and adding new\n * elements directly following them.\n *\n * @param {Array} array Target array to splice.\n * @param {Number} spliceIdx Index at which to begin changing the array.\n * @param {Number} spliceCount Number of elements to remove from the array.\n * @param {Array} newElems Elements to insert into the array.\n *\n * @private\n */\nvar uniqueSplice = function (array, spliceIdx, spliceCount, newElems, parent) {\n  var spliceArgs = [spliceIdx, spliceCount].concat(newElems);\n  var prev = array[spliceIdx - 1] || null;\n  var next = array[spliceIdx + spliceCount] || null;\n  var idx;\n  var len;\n  var prevIdx;\n  var node;\n  var oldParent;\n\n  // Before splicing in new elements, ensure they do not already appear in the\n  // current array.\n  for (idx = 0, len = newElems.length; idx < len; ++idx) {\n    node = newElems[idx];\n    oldParent = node.parent;\n    prevIdx = oldParent && oldParent.children.indexOf(newElems[idx]);\n\n    if (oldParent && prevIdx > -1) {\n      oldParent.children.splice(prevIdx, 1);\n      if (parent === oldParent && spliceIdx > prevIdx) {\n        spliceArgs[0]--;\n      }\n    }\n\n    node.parent = parent;\n\n    if (node.prev) {\n      node.prev.next = node.next || null;\n    }\n\n    if (node.next) {\n      node.next.prev = node.prev || null;\n    }\n\n    node.prev = newElems[idx - 1] || prev;\n    node.next = newElems[idx + 1] || next;\n  }\n\n  if (prev) {\n    prev.next = newElems[0];\n  }\n  if (next) {\n    next.prev = newElems[newElems.length - 1];\n  }\n  return array.splice.apply(array, spliceArgs);\n};\n\n/**\n * Insert every element in the set of matched elements to the end of the\n * target.\n *\n * @param {string|cheerio} target - Element to append elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').appendTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/appendTo/}\n */\nexports.appendTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.append(this);\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements to the beginning of the\n * target.\n *\n * @param {string|cheerio} target - Element to prepend elements to.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').prependTo('#fruits')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prependTo/}\n */\nexports.prependTo = function (target) {\n  if (!target.cheerio) {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n\n  target.prepend(this);\n\n  return this;\n};\n\n/**\n * Inserts content as the *last* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').append('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //      <li class=\"plum\">Plum</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/append/}\n */\nexports.append = _insert(function (dom, children, parent) {\n  uniqueSplice(children, children.length, 0, dom, parent);\n});\n\n/**\n * Inserts content as the *first* child of each of the selected elements.\n *\n * @function\n *\n * @example\n *\n * $('ul').prepend('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/prepend/}\n */\nexports.prepend = _insert(function (dom, children, parent) {\n  uniqueSplice(children, 0, 0, dom, parent);\n});\n\nfunction _wrap(insert) {\n  return function (wrapper) {\n    var wrapperFn = typeof wrapper === 'function' && wrapper;\n    var lastIdx = this.length - 1;\n    var lastParent = this.parents().last();\n\n    for (var i = 0; i < this.length; i++) {\n      var el = this[i];\n      var wrapperDom;\n      var elInsertLocation;\n      var j;\n\n      if (wrapperFn) {\n        wrapper = wrapperFn.call(el, i);\n      }\n\n      if (typeof wrapper === 'string' && !isHtml(wrapper)) {\n        wrapper = lastParent.find(wrapper).clone();\n      }\n\n      wrapperDom = this._makeDomArray(wrapper, i < lastIdx).slice(0, 1);\n      elInsertLocation = wrapperDom[0];\n      // Find the deepest child. Only consider the first tag child of each node\n      // (ignore text); stop if no children are found.\n      j = 0;\n\n      while (elInsertLocation && elInsertLocation.children) {\n        if (j >= elInsertLocation.children.length) {\n          break;\n        }\n\n        if (elInsertLocation.children[j].type === 'tag') {\n          elInsertLocation = elInsertLocation.children[j];\n          j = 0;\n        } else {\n          j++;\n        }\n      }\n\n      insert(el, elInsertLocation, wrapperDom);\n    }\n\n    return this;\n  };\n}\n\n/**\n * The .wrap() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. A\n * copy of this structure will be wrapped around each of the elements in the\n * set of matched elements. This method returns the original set of elements\n * for chaining purposes.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrap(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"red-fruit\">\n * //      <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrap(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <div class=\"healthy\">\n * //       <li class=\"apple\">Apple</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //       <li class=\"orange\">Orange</li>\n * //     </div>\n * //     <div class=\"healthy\">\n * //        <li class=\"plum\">Plum</li>\n * //     </div>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrap/}\n */\nexports.wrap = _wrap(function (el, elInsertLocation, wrapperDom) {\n  var parent = el.parent;\n  var siblings = parent.children;\n  var index = siblings.indexOf(el);\n\n  updateDOM([el], elInsertLocation);\n  // The previous operation removed the current element from the `siblings`\n  // array, so the `dom` array can be inserted without removing any\n  // additional elements.\n  uniqueSplice(siblings, index, 0, wrapperDom, parent);\n});\n\n/**\n * The .wrapInner() function can take any string or object that could be passed to\n * the $() factory function to specify a DOM structure. This structure may be\n * nested several levels deep, but should contain only one inmost element. The\n * structure will be wrapped around the content of each of the elements in the set\n * of matched elements.\n *\n * @param {cheerio} wrapper - The DOM structure to wrap around the content of each element in the selection.\n *\n * @example\n *\n * const redFruit = $('<div class=\"red-fruit\"></div>')\n * $('.apple').wrapInner(redFruit)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"red-fruit\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"pear\">Pear</li>\n * //   </ul>\n *\n * const healthy = $('<div class=\"healthy\"></div>')\n * $('li').wrapInner(healthy)\n *\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">\n * //       <div class=\"healthy\">Apple</div>\n * //     </li>\n * //     <li class=\"orange\">\n * //       <div class=\"healthy\">Orange</div>\n * //     </li>\n * //     <li class=\"pear\">\n * //       <div class=\"healthy\">Pear</div>\n * //     </li>\n * //   </ul>\n *\n * @see {@link http://api.jquery.com/wrapInner/}\n */\nexports.wrapInner = _wrap(function (el, elInsertLocation, wrapperDom) {\n  updateDOM(el.children, elInsertLocation);\n  updateDOM(wrapperDom, el);\n});\n\n/**\n * Insert content next to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').after('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/after/}\n */\nexports.after = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element after `this` element\n    uniqueSplice(siblings, index + 1, 0, dom, parent);\n  });\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements after the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertAfter('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements after.\n *\n * @see {@link http://api.jquery.com/insertAfter/}\n */\nexports.insertAfter = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index + 1, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/**\n * Insert content previous to each element in the set of matched elements.\n *\n * @example\n *\n * $('.apple').before('<li class=\"plum\">Plum</li>')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @see {@link http://api.jquery.com/before/}\n */\nexports.before = function () {\n  var elems = slice.call(arguments);\n  var lastIdx = this.length - 1;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n    var domSrc;\n    var dom;\n\n    // If not found, move on\n    if (index < 0) return;\n\n    if (typeof elems[0] === 'function') {\n      domSrc = elems[0].call(el, i, html(el.children));\n    } else {\n      domSrc = elems;\n    }\n\n    dom = this._makeDomArray(domSrc, i < lastIdx);\n\n    // Add element before `el` element\n    uniqueSplice(siblings, index, 0, dom, parent);\n  });\n\n  return this;\n};\n\n/**\n * Insert every element in the set of matched elements before the target.\n *\n * @example\n *\n * $('<li class=\"plum\">Plum</li>').insertBefore('.apple')\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"plum\">Plum</li>\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //      <li class=\"pear\">Pear</li>\n * //    </ul>\n *\n * @param {string|cheerio} target - Element to insert elements before.\n *\n * @see {@link http://api.jquery.com/insertBefore/}\n */\nexports.insertBefore = function (target) {\n  var clones = [];\n  var self = this;\n  if (typeof target === 'string') {\n    target = this.constructor.call(\n      this.constructor,\n      target,\n      null,\n      this._originalRoot\n    );\n  }\n  target = this._makeDomArray(target);\n  self.remove();\n  domEach(target, function (i, el) {\n    var clonedSelf = self._makeDomArray(self.clone());\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var index = siblings.indexOf(el);\n\n    // If not found, move on\n    if (index < 0) return;\n\n    // Add cloned `this` element(s) after target element\n    uniqueSplice(siblings, index, 0, clonedSelf, parent);\n    clones.push(clonedSelf);\n  });\n  return this.constructor.call(this.constructor, this._makeDomArray(clones));\n};\n\n/**\n * Removes the set of matched elements from the DOM and all their children.\n * `selector` filters the set of matched elements to be removed.\n *\n * @example\n *\n * $('.pear').remove()\n * $.html()\n * //=>  <ul id=\"fruits\">\n * //      <li class=\"apple\">Apple</li>\n * //      <li class=\"orange\">Orange</li>\n * //    </ul>\n *\n * @param {string} [selector] - Optional selector for elements to remove.\n *\n * @see {@link http://api.jquery.com/remove/}\n */\nexports.remove = function (selector) {\n  var elems = this;\n\n  // Filter if we have selector\n  if (selector) elems = elems.filter(selector);\n\n  domEach(elems, function (i, el) {\n    DomUtils.removeElement(el);\n    el.prev = el.next = el.parent = null;\n  });\n\n  return this;\n};\n\n/**\n * Replaces matched elements with `content`.\n *\n * @example\n *\n * const plum = $('<li class=\"plum\">Plum</li>')\n * $('.pear').replaceWith(plum)\n * $.html()\n * //=> <ul id=\"fruits\">\n * //     <li class=\"apple\">Apple</li>\n * //     <li class=\"orange\">Orange</li>\n * //     <li class=\"plum\">Plum</li>\n * //   </ul>\n *\n * @param {cheerio|Function} content - Replacement for matched elements.\n *\n * @see {@link http://api.jquery.com/replaceWith/}\n */\nexports.replaceWith = function (content) {\n  var self = this;\n\n  domEach(this, function (i, el) {\n    var parent = el.parent;\n    if (!parent) {\n      return;\n    }\n\n    var siblings = parent.children;\n    var dom = self._makeDomArray(\n      typeof content === 'function' ? content.call(el, i, el) : content\n    );\n    var index;\n\n    // In the case that `dom` contains nodes that already exist in other\n    // structures, ensure those nodes are properly removed.\n    updateDOM(dom, null);\n\n    index = siblings.indexOf(el);\n\n    // Completely remove old element\n    uniqueSplice(siblings, index, 1, dom, parent);\n    el.parent = el.prev = el.next = null;\n  });\n\n  return this;\n};\n\n/**\n * Empties an element, removing all its children.\n *\n * @example\n *\n * $('ul').empty()\n * $.html()\n * //=>  <ul id=\"fruits\"></ul>\n *\n * @see {@link http://api.jquery.com/empty/}\n */\nexports.empty = function () {\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    el.children.length = 0;\n  });\n  return this;\n};\n\n/**\n * Gets an HTML content string from the first selected element. If `htmlString`\n * is specified, each selected element's content is replaced by the new\n * content.\n *\n * @param {string} str - If specified used to replace selection's contents.\n *\n * @example\n *\n * $('.orange').html()\n * //=> Orange\n *\n * $('#fruits').html('<li class=\"mango\">Mango</li>').html()\n * //=> <li class=\"mango\">Mango</li>\n *\n * @see {@link http://api.jquery.com/html/}\n */\nexports.html = function (str) {\n  if (str === undefined) {\n    if (!this[0] || !this[0].children) return null;\n    return html(this[0].children, this.options);\n  }\n\n  var opts = this.options;\n\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    var content = str.cheerio\n      ? str.clone().get()\n      : parse('' + str, opts, false).children;\n\n    updateDOM(content, el);\n  });\n\n  return this;\n};\n\nexports.toString = function () {\n  return html(this, this.options);\n};\n\n/**\n * Get the combined text contents of each element in the set of matched\n * elements, including their descendants. If `textString` is specified, each\n * selected element's content is replaced by the new text content.\n *\n * @param {string} [str] - If specified replacement for the selected element's contents.\n *\n * @example\n *\n * $('.orange').text()\n * //=> Orange\n *\n * $('ul').text()\n * //=>  Apple\n * //    Orange\n * //    Pear\n *\n * @see {@link http://api.jquery.com/text/}\n */\nexports.text = function (str) {\n  // If `str` is undefined, act as a \"getter\"\n  if (str === undefined) {\n    return text(this);\n  } else if (typeof str === 'function') {\n    // Function support\n    var self = this;\n    return domEach(this, function (i, el) {\n      return exports.text.call(self._make(el), str.call(el, i, text([el])));\n    });\n  }\n\n  // Append text node to each selected elements\n  domEach(this, function (i, el) {\n    el.children.forEach(function (child) {\n      child.next = child.prev = child.parent = null;\n    });\n\n    var textNode = new domhandler.Text(str);\n\n    updateDOM(textNode, el);\n  });\n\n  return this;\n};\n\n/**\n * Clone the cheerio object.\n *\n * @example\n *\n * const moreFruit = $('#fruits').clone()\n *\n * @see {@link http://api.jquery.com/clone/}\n */\nexports.clone = function () {\n  return this._make(cloneDom(this.get(), this.options));\n};\n"]},"metadata":{},"sourceType":"script"}