{"ast":null,"code":"/**\n * @module cheerio/forms\n */\n// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @see {@link http://api.jquery.com/serialize/}\n */\n\nexports.serialize = function () {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray(); // Serialize each element into a key/value string\n\n  var retArr = arr.map(function (data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  }); // Return the resulting serialization\n\n  return retArr.join('&').replace(r20, '+');\n};\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @example\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray()\n * //=> [ { name: 'foo', value: 'bar' } ]\n *\n * @see {@link http://api.jquery.com/serializeArray/}\n */\n\n\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n\n    return $elem.filter(submittableSelector).toArray();\n  }).filter( // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n  '[name!=\"\"]:not(:disabled)' + // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n  ':not(:submit, :button, :image, :reset, :file)' + // and are either checked/don't have a checkable state\n  ':matches([checked], :not(:checkbox, :radio))' // Convert each of the elements to its value(s)\n  ).map(function (i, elem) {\n    var $elem = Cheerio(elem);\n    var name = $elem.attr('name');\n    var value = $elem.val(); // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n\n    if (value == null) {\n      value = '';\n    } // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n\n\n    if (Array.isArray(value)) {\n      return value.map(function (val) {\n        // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n        //   These can occur inside of `<textarea>'s`\n        return {\n          name: name,\n          value: val.replace(rCRLF, '\\r\\n')\n        };\n      }); // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n    }\n\n    return {\n      name: name,\n      value: value.replace(rCRLF, '\\r\\n')\n    }; // Convert our result to an array\n  }).get();\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/cheerio/lib/api/forms.js"],"names":["submittableSelector","r20","rCRLF","exports","serialize","arr","serializeArray","retArr","map","data","encodeURIComponent","name","value","join","replace","Cheerio","constructor","elem","$elem","find","toArray","filter","i","attr","val","Array","isArray","get"],"mappings":"AAAA;AACA;AACA;AAEA;AACA;AACA,IAAIA,mBAAmB,GAAG,8BAA1B;AACA,IAAIC,GAAG,GAAG,MAAV;AACA,IAAIC,KAAK,GAAG,QAAZ;AAEA;AACA;AACA;AACA;AACA;;AACAC,OAAO,CAACC,SAAR,GAAoB,YAAY;AAC9B;AACA,MAAIC,GAAG,GAAG,KAAKC,cAAL,EAAV,CAF8B,CAI9B;;AACA,MAAIC,MAAM,GAAGF,GAAG,CAACG,GAAJ,CAAQ,UAAUC,IAAV,EAAgB;AACnC,WAAOC,kBAAkB,CAACD,IAAI,CAACE,IAAN,CAAlB,GAAgC,GAAhC,GAAsCD,kBAAkB,CAACD,IAAI,CAACG,KAAN,CAA/D;AACD,GAFY,CAAb,CAL8B,CAS9B;;AACA,SAAOL,MAAM,CAACM,IAAP,CAAY,GAAZ,EAAiBC,OAAjB,CAAyBb,GAAzB,EAA8B,GAA9B,CAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,OAAO,CAACG,cAAR,GAAyB,YAAY;AACnC;AACA,MAAIS,OAAO,GAAG,KAAKC,WAAnB;AACA,SAAO,KAAKR,GAAL,CAAS,YAAY;AAC1B,QAAIS,IAAI,GAAG,IAAX;AACA,QAAIC,KAAK,GAAGH,OAAO,CAACE,IAAD,CAAnB;;AACA,QAAIA,IAAI,CAACN,IAAL,KAAc,MAAlB,EAA0B;AACxB,aAAOO,KAAK,CAACC,IAAN,CAAWnB,mBAAX,EAAgCoB,OAAhC,EAAP;AACD;;AACD,WAAOF,KAAK,CAACG,MAAN,CAAarB,mBAAb,EAAkCoB,OAAlC,EAAP;AACD,GAPM,EAQJC,MARI,EASH;AACA,gCACE;AACA,iDAFF,GAGE;AACA,gDAdC,CAeH;AAfG,IAiBJb,GAjBI,CAiBA,UAAUc,CAAV,EAAaL,IAAb,EAAmB;AACtB,QAAIC,KAAK,GAAGH,OAAO,CAACE,IAAD,CAAnB;AACA,QAAIN,IAAI,GAAGO,KAAK,CAACK,IAAN,CAAW,MAAX,CAAX;AACA,QAAIX,KAAK,GAAGM,KAAK,CAACM,GAAN,EAAZ,CAHsB,CAKtB;;AACA,QAAIZ,KAAK,IAAI,IAAb,EAAmB;AACjBA,MAAAA,KAAK,GAAG,EAAR;AACD,KARqB,CAUtB;;;AACA,QAAIa,KAAK,CAACC,OAAN,CAAcd,KAAd,CAAJ,EAA0B;AACxB,aAAOA,KAAK,CAACJ,GAAN,CAAU,UAAUgB,GAAV,EAAe;AAC9B;AACA;AACA,eAAO;AAAEb,UAAAA,IAAI,EAAEA,IAAR;AAAcC,UAAAA,KAAK,EAAEY,GAAG,CAACV,OAAJ,CAAYZ,KAAZ,EAAmB,MAAnB;AAArB,SAAP;AACD,OAJM,CAAP,CADwB,CAMxB;AACD;;AACD,WAAO;AAAES,MAAAA,IAAI,EAAEA,IAAR;AAAcC,MAAAA,KAAK,EAAEA,KAAK,CAACE,OAAN,CAAcZ,KAAd,EAAqB,MAArB;AAArB,KAAP,CAnBsB,CAqBtB;AACD,GAvCI,EAwCJyB,GAxCI,EAAP;AAyCD,CA5CD","sourcesContent":["/**\n * @module cheerio/forms\n */\n\n// https://github.com/jquery/jquery/blob/2.1.3/src/manipulation/var/rcheckableType.js\n// https://github.com/jquery/jquery/blob/2.1.3/src/serialize.js\nvar submittableSelector = 'input,select,textarea,keygen';\nvar r20 = /%20/g;\nvar rCRLF = /\\r?\\n/g;\n\n/**\n * Encode a set of form elements as a string for submission.\n *\n * @see {@link http://api.jquery.com/serialize/}\n */\nexports.serialize = function () {\n  // Convert form elements into name/value objects\n  var arr = this.serializeArray();\n\n  // Serialize each element into a key/value string\n  var retArr = arr.map(function (data) {\n    return encodeURIComponent(data.name) + '=' + encodeURIComponent(data.value);\n  });\n\n  // Return the resulting serialization\n  return retArr.join('&').replace(r20, '+');\n};\n\n/**\n * Encode a set of form elements as an array of names and values.\n *\n * @example\n * $('<form><input name=\"foo\" value=\"bar\" /></form>').serializeArray()\n * //=> [ { name: 'foo', value: 'bar' } ]\n *\n * @see {@link http://api.jquery.com/serializeArray/}\n */\nexports.serializeArray = function () {\n  // Resolve all form elements from either forms or collections of form elements\n  var Cheerio = this.constructor;\n  return this.map(function () {\n    var elem = this;\n    var $elem = Cheerio(elem);\n    if (elem.name === 'form') {\n      return $elem.find(submittableSelector).toArray();\n    }\n    return $elem.filter(submittableSelector).toArray();\n  })\n    .filter(\n      // Verify elements have a name (`attr.name`) and are not disabled (`:disabled`)\n      '[name!=\"\"]:not(:disabled)' +\n        // and cannot be clicked (`[type=submit]`) or are used in `x-www-form-urlencoded` (`[type=file]`)\n        ':not(:submit, :button, :image, :reset, :file)' +\n        // and are either checked/don't have a checkable state\n        ':matches([checked], :not(:checkbox, :radio))'\n      // Convert each of the elements to its value(s)\n    )\n    .map(function (i, elem) {\n      var $elem = Cheerio(elem);\n      var name = $elem.attr('name');\n      var value = $elem.val();\n\n      // If there is no value set (e.g. `undefined`, `null`), then default value to empty\n      if (value == null) {\n        value = '';\n      }\n\n      // If we have an array of values (e.g. `<select multiple>`), return an array of key/value pairs\n      if (Array.isArray(value)) {\n        return value.map(function (val) {\n          // We trim replace any line endings (e.g. `\\r` or `\\r\\n` with `\\r\\n`) to guarantee consistency across platforms\n          //   These can occur inside of `<textarea>'s`\n          return { name: name, value: val.replace(rCRLF, '\\r\\n') };\n        });\n        // Otherwise (e.g. `<input type=\"text\">`, return only one key/value pair\n      }\n      return { name: name, value: value.replace(rCRLF, '\\r\\n') };\n\n      // Convert our result to an array\n    })\n    .get();\n};\n"]},"metadata":{},"sourceType":"script"}