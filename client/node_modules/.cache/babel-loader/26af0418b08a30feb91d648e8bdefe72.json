{"ast":null,"code":"'use strict';\n\nvar color = require('color'),\n    hex = require('text-hex');\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\n\n\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base).mix(color(hex(split[i + 1]))).saturate(1).hex();\n  }\n\n  return base;\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/colorspace/index.js"],"names":["color","require","hex","module","exports","colorspace","namespace","delimiter","split","base","length","i","l","mix","saturate"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;AAAA,IACIC,GAAG,GAAGD,OAAO,CAAC,UAAD,CADjB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0C;AACzD,MAAIC,KAAK,GAAGF,SAAS,CAACE,KAAV,CAAgBD,SAAS,IAAI,GAA7B,CAAZ;AACA,MAAIE,IAAI,GAAGP,GAAG,CAACM,KAAK,CAAC,CAAD,CAAN,CAAd;AAEA,MAAI,CAACA,KAAK,CAACE,MAAX,EAAmB,OAAOD,IAAP;;AAEnB,OAAK,IAAIE,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGJ,KAAK,CAACE,MAAN,GAAe,CAAnC,EAAsCC,CAAC,GAAGC,CAA1C,EAA6CD,CAAC,EAA9C,EAAkD;AAChDF,IAAAA,IAAI,GAAGT,KAAK,CAACS,IAAD,CAAL,CACNI,GADM,CACFb,KAAK,CAACE,GAAG,CAACM,KAAK,CAACG,CAAC,GAAG,CAAL,CAAN,CAAJ,CADH,EAENG,QAFM,CAEG,CAFH,EAGNZ,GAHM,EAAP;AAID;;AAED,SAAOO,IAAP;AACD,CAdD","sourcesContent":["'use strict';\n\nvar color = require('color')\n  , hex = require('text-hex');\n\n/**\n * Generate a color for a given name. But be reasonably smart about it by\n * understanding name spaces and coloring each namespace a bit lighter so they\n * still have the same base color as the root.\n *\n * @param {string} namespace The namespace\n * @param {string} [delimiter] The delimiter\n * @returns {string} color\n */\nmodule.exports = function colorspace(namespace, delimiter) {\n  var split = namespace.split(delimiter || ':');\n  var base = hex(split[0]);\n\n  if (!split.length) return base;\n\n  for (var i = 0, l = split.length - 1; i < l; i++) {\n    base = color(base)\n    .mix(color(hex(split[i + 1])))\n    .saturate(1)\n    .hex();\n  }\n\n  return base;\n};\n"]},"metadata":{},"sourceType":"script"}