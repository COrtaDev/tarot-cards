{"ast":null,"code":"/**\n * Utilities used by the library\n * @static\n */\nclass Utils {\n  /**\n   * Merges an object's properties to the other\n   * @param {Object} base - The base object\n   * @param {...Object} merge - The objects to merge with base\n   * @returns {Object}\n   * @example\n   * const obj = { key: \"value\" };\n   * const two = { foo: \"bar\" };\n   * const merged = mergeObject(obj, two); // merge two's properties to obj\n   * console.log(merged.foo); // => bar\n   * console.log(merged.key); // => value\n   * console.log(obj.foo); // => undefined, uses a clone without touching the object\n   */\n  static mergeObjects(base = {}, ...merge) {\n    const clone = Object.assign(Object.create(base), base);\n\n    for (const obj of merge) {\n      for (const [key, value] of Object.entries(obj)) {\n        if (typeof clone[key] === \"object\" && typeof value === \"object\") {\n          clone[key] = Utils.mergeObjects(clone[key], value);\n        } else {\n          clone[key] = value;\n        }\n      }\n    }\n\n    return clone;\n  }\n\n  static isPromise(p) {\n    if (!p) return false;\n    return p instanceof Promise || typeof p.then === \"function\" && typeof p.catch === \"function\";\n  }\n\n  static clone(obj) {\n    return Object.assign(Object.create(obj), obj);\n  }\n\n  static isAbsoluteURL(str) {\n    return /^[a-z][a-z0-9+.-]*:/.test(str);\n  }\n\n  static URLJoin(...args) {\n    return args.join(\"/\").replace(/[\\/]+/g, \"/\") // eslint-disable-line no-useless-escape\n    .replace(/^(.+):\\//, \"$1://\").replace(/^file:/, \"file:/\").replace(/\\/(\\?|&|#[^!])/g, \"$1\").replace(/\\?/g, \"&\").replace(\"&\", \"?\");\n  }\n\n  static isRedirect(code) {\n    return ~[301, 302, 303, 305, 307, 308].indexOf(code);\n  }\n\n}\n\nmodule.exports = Utils;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/ladybug-fetch/src/utils/utils.js"],"names":["Utils","mergeObjects","base","merge","clone","Object","assign","create","obj","key","value","entries","isPromise","p","Promise","then","catch","isAbsoluteURL","str","test","URLJoin","args","join","replace","isRedirect","code","indexOf","module","exports"],"mappings":"AACA;AACA;AACA;AACA;AACA,MAAMA,KAAN,CAAY;AAEV;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,SAAOC,YAAP,CAAoBC,IAAI,GAAG,EAA3B,EAA+B,GAAGC,KAAlC,EAAyC;AACvC,UAAMC,KAAK,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcL,IAAd,CAAd,EAAmCA,IAAnC,CAAd;;AACA,SAAI,MAAMM,GAAV,IAAiBL,KAAjB,EAAwB;AACtB,WAAI,MAAM,CAACM,GAAD,EAAMC,KAAN,CAAV,IAA0BL,MAAM,CAACM,OAAP,CAAeH,GAAf,CAA1B,EAA+C;AAC7C,YAAG,OAAOJ,KAAK,CAACK,GAAD,CAAZ,KAAsB,QAAtB,IAAkC,OAAOC,KAAP,KAAiB,QAAtD,EAAgE;AAC9DN,UAAAA,KAAK,CAACK,GAAD,CAAL,GAAaT,KAAK,CAACC,YAAN,CAAmBG,KAAK,CAACK,GAAD,CAAxB,EAA+BC,KAA/B,CAAb;AACD,SAFD,MAEO;AACLN,UAAAA,KAAK,CAACK,GAAD,CAAL,GAAaC,KAAb;AACD;AACF;AACF;;AACD,WAAON,KAAP;AACD;;AAED,SAAOQ,SAAP,CAAiBC,CAAjB,EAAoB;AAClB,QAAG,CAACA,CAAJ,EAAO,OAAO,KAAP;AACP,WAAOA,CAAC,YAAYC,OAAb,IAAwB,OAAOD,CAAC,CAACE,IAAT,KAAkB,UAAlB,IAAgC,OAAOF,CAAC,CAACG,KAAT,KAAmB,UAAlF;AACD;;AAED,SAAOZ,KAAP,CAAaI,GAAb,EAAkB;AAChB,WAAOH,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcC,GAAd,CAAd,EAAkCA,GAAlC,CAAP;AACD;;AAED,SAAOS,aAAP,CAAqBC,GAArB,EAA0B;AACxB,WAAO,sBAAsBC,IAAtB,CAA2BD,GAA3B,CAAP;AACD;;AAED,SAAOE,OAAP,CAAe,GAAGC,IAAlB,EAAwB;AACtB,WAAOA,IAAI,CACRC,IADI,CACC,GADD,EAEJC,OAFI,CAEI,QAFJ,EAEc,GAFd,EAEmB;AAFnB,KAGJA,OAHI,CAGI,UAHJ,EAGgB,OAHhB,EAIJA,OAJI,CAII,QAJJ,EAIc,QAJd,EAKJA,OALI,CAKI,iBALJ,EAKuB,IALvB,EAMJA,OANI,CAMI,KANJ,EAMW,GANX,EAOJA,OAPI,CAOI,GAPJ,EAOS,GAPT,CAAP;AAQD;;AAED,SAAOC,UAAP,CAAkBC,IAAlB,EAAwB;AACtB,WAAO,CAAC,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+BC,OAA/B,CAAuCD,IAAvC,CAAR;AACD;;AAvDS;;AA0DZE,MAAM,CAACC,OAAP,GAAiB5B,KAAjB","sourcesContent":["\n/**\n * Utilities used by the library\n * @static\n */\nclass Utils {\n\n  /**\n   * Merges an object's properties to the other\n   * @param {Object} base - The base object\n   * @param {...Object} merge - The objects to merge with base\n   * @returns {Object}\n   * @example\n   * const obj = { key: \"value\" };\n   * const two = { foo: \"bar\" };\n   * const merged = mergeObject(obj, two); // merge two's properties to obj\n   * console.log(merged.foo); // => bar\n   * console.log(merged.key); // => value\n   * console.log(obj.foo); // => undefined, uses a clone without touching the object\n   */\n  static mergeObjects(base = {}, ...merge) {\n    const clone = Object.assign(Object.create(base), base);\n    for(const obj of merge) {\n      for(const [key, value] of Object.entries(obj)) {\n        if(typeof clone[key] === \"object\" && typeof value === \"object\") {\n          clone[key] = Utils.mergeObjects(clone[key], value);\n        } else {\n          clone[key] = value;\n        }\n      }\n    }\n    return clone;\n  }\n\n  static isPromise(p) {\n    if(!p) return false;\n    return p instanceof Promise || typeof p.then === \"function\" && typeof p.catch === \"function\";\n  }\n\n  static clone(obj) {\n    return Object.assign(Object.create(obj), obj);\n  }\n  \n  static isAbsoluteURL(str) {\n    return /^[a-z][a-z0-9+.-]*:/.test(str);\n  }\n\n  static URLJoin(...args) {\n    return args\n      .join(\"/\")\n      .replace(/[\\/]+/g, \"/\") // eslint-disable-line no-useless-escape\n      .replace(/^(.+):\\//, \"$1://\")\n      .replace(/^file:/, \"file:/\")\n      .replace(/\\/(\\?|&|#[^!])/g, \"$1\")\n      .replace(/\\?/g, \"&\")\n      .replace(\"&\", \"?\");\n  }\n  \n  static isRedirect(code) {\n    return ~[301, 302, 303, 305, 307, 308].indexOf(code);\n  }\n}\n\nmodule.exports = Utils;\n"]},"metadata":{},"sourceType":"script"}