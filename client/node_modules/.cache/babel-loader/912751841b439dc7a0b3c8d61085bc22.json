{"ast":null,"code":"/**\n * Helper \"class\" for accessing MediaWiki API and handling cookie-based session\n */\n'use strict'; // introspect package.json to get module version\n\nconst VERSION = require('../package').version; // @see https://github.com/caolan/async\n\n\nconst async = require('async'); // @see https://github.com/mikeal/request\n\n\nconst request = require('request');\n\nfunction doRequest(params, callback, method, done) {\n  // store requested action - will be used when parsing a response\n  const actionName = params.action; // \"request\" options\n\n  const options = {\n    method: method || 'GET',\n    proxy: this.proxy || false,\n    jar: this.jar,\n    headers: {\n      'User-Agent': this.userAgent\n    }\n  }; // HTTP request parameters\n\n  params = params || {}; // force JSON format\n\n  params.format = 'json'; // handle uploads\n\n  if (method === 'UPLOAD') {\n    options.method = 'POST';\n    const CRLF = '\\r\\n',\n          postBody = [],\n          boundary = `nodemw${Math.random().toString().substr(2)}`; // encode each field\n\n    Object.keys(params).forEach(function (fieldName) {\n      const value = params[fieldName];\n      postBody.push(`--${boundary}`);\n      postBody.push(CRLF);\n\n      if (typeof value === 'string') {\n        // properly encode UTF8 in binary-safe POST data\n        postBody.push(`Content-Disposition: form-data; name=\"${fieldName}\"`);\n        postBody.push(CRLF);\n        postBody.push(CRLF);\n        postBody.push(Buffer.from(value, 'utf8'));\n      } else {\n        // send attachment\n        postBody.push(`Content-Disposition: form-data; name=\"${fieldName}\"; filename=\"foo\"`);\n        postBody.push(CRLF);\n        postBody.push(CRLF);\n        postBody.push(value);\n      }\n\n      postBody.push(CRLF);\n    });\n    postBody.push(`--${boundary}--`); // encode post data\n\n    options.headers['content-type'] = `multipart/form-data; boundary=${boundary}`;\n    options.body = postBody;\n    params = {};\n  } // form an URL to API\n\n\n  options.url = this.formatUrl({\n    protocol: this.protocol,\n    port: this.port,\n    hostname: this.server,\n    pathname: this.path + '/api.php',\n    query: options.method === 'GET' ? params : {}\n  }); // POST all parameters (avoid \"request string too long\" errors)\n\n  if (method === 'POST') {\n    options.form = params;\n  }\n\n  this.logger.debug('API action: %s', actionName);\n  this.logger.debug('%s <%s>', options.method, options.url);\n\n  if (options.form) {\n    this.logger.debug('POST fields: %s', Object.keys(options.form).join(', '));\n  }\n\n  request(options, (error, response, body) => {\n    response = response || {};\n\n    if (error) {\n      this.logger.error('Request to API failed: %s', error);\n      callback(new Error(`Request to API failed: ${error}`));\n      done();\n      return;\n    }\n\n    if (response.statusCode !== 200) {\n      this.logger.error('Request to API failed: HTTP status code was %d for <%s>', response.statusCode || 'unknown', options.url);\n      this.logger.debug('Body: %s', body);\n      this.logger.error('Stacktrace', new Error().stack);\n      callback(new Error(`Request to API failed: HTTP status code was ${response.statusCode}`));\n      done();\n      return;\n    } // parse response\n\n\n    let data, info, next;\n\n    try {\n      data = JSON.parse(body);\n      info = data && data[actionName]; // acfrom=Zeppelin Games\n\n      next = data && data['query-continue'] && data['query-continue'][params.list || params.prop]; // handle the new continuing queries introduced in MW 1.21\n      // (and to be made default in MW 1.26)\n      // issue #64\n      // @see https://www.mediawiki.org/wiki/API:Query#Continuing_queries\n\n      if (!next) {\n        // cmcontinue=page|5820414e44205920424f534f4e53|12253446, continue=-||\n        next = data && data.continue;\n      }\n    } catch (e) {\n      this.logger.error('Error parsing JSON response: %s', body);\n      callback(new Error('Error parsing JSON response'));\n      done();\n      return;\n    } // if (!callback) data.error = {info: 'foo'}; // debug\n\n\n    if (data && !data.error) {\n      if (next) {\n        this.logger.debug('There\\'s more data');\n        this.logger.debug(next);\n      }\n\n      callback(null, info, next, data);\n    } else if (data.error) {\n      this.logger.error('Error returned by API: %s', data.error.info);\n      this.logger.error('Raw error', data.error);\n      callback(new Error(`Error returned by API: ${data.error.info}`));\n    }\n\n    done();\n  });\n}\n\nfunction Api(options) {\n  this.protocol = options.protocol || 'http';\n  this.port = options.port;\n  this.server = options.server;\n  this.path = options.path;\n  this.proxy = options.proxy;\n  this.jar = request.jar(); // create new cookie jar for each instance\n\n  this.debug = options.debug; // set up logging\n\n  const winston = require('winston'),\n        // file logging\n  path = require('path'),\n        fs = require('fs'),\n        logDir = path.dirname(process.argv[1]) + '/log/',\n        logFile = logDir + path.basename(process.argv[1], '.js') + '.log',\n        // how many tasks (i.e. requests) to run in parallel\n  concurrency = options.concurrency || 3;\n\n  this.logger = winston.createLogger(); // console logging\n\n  this.logger.add(new winston.transports.Console({\n    level: this.debug ? 'debug' : 'error'\n  }));\n\n  if (fs.existsSync(logDir)) {\n    this.logger.add(new winston.transports.File({\n      colorize: true,\n      filename: logFile,\n      json: false,\n      level: this.debug ? 'debug' : 'info'\n    }));\n  } // requests queue\n  // @see https://github.com/caolan/async#queue\n\n\n  this.queue = async.queue(function (task, callback) {\n    // process the task (and call the provided callback once it's completed)\n    task(callback);\n  }, concurrency); // HTTP client\n\n  this.formatUrl = require('url').format;\n  this.userAgent = options.userAgent || `nodemw/${VERSION} (node.js ${process.version}; ${process.platform} ${process.arch})`;\n  this.version = VERSION; // debug info\n\n  this.info(process.argv.join(' '));\n  this.info(this.userAgent);\n  let port = this.port ? `:${this.port}` : '';\n  this.info(`Using <${this.protocol}://${this.server}${port}${this.path}/api.php> as API entry point`);\n  this.info('----');\n} // public interface\n\n\nApi.prototype = {\n  log() {\n    this.logger.log.apply(this.logger, arguments);\n  },\n\n  info() {\n    this.logger.info.apply(this.logger, arguments);\n  },\n\n  warn() {\n    this.logger.warn.apply(this.logger, arguments);\n  },\n\n  error() {\n    this.logger.error.apply(this.logger, arguments);\n  },\n\n  // adds request to the queue\n  call(params, callback, method) {\n    this.queue.push(done => {\n      doRequest.apply(this, [params, callback, method, done]);\n    });\n  },\n\n  // fetch an external resource\n  fetchUrl(url, callback, encoding) {\n    encoding = encoding || 'utf-8'; // add a request to the queue\n\n    this.queue.push(done => {\n      this.info('Fetching <%s> (as %s)...', url, encoding);\n      const options = {\n        url,\n        method: 'GET',\n        proxy: this.proxy || false,\n        jar: this.jar,\n        encoding: encoding === 'binary' ? null : encoding,\n        headers: {\n          'User-Agent': this.userAgent\n        }\n      };\n      request(options, (error, response, body) => {\n        if (!error && response.statusCode === 200) {\n          this.info('<%s>: fetched %s kB', url, (body.length / 1024).toFixed(2));\n          callback(null, body);\n        } else {\n          if (!error) {\n            error = new Error(`HTTP status ${response.statusCode}`);\n          }\n\n          this.error(`Failed to fetch <${url}>`);\n          this.error(error.message);\n          callback(error, body);\n        }\n\n        done();\n      });\n    });\n  }\n\n};\nmodule.exports = Api;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/nodemw/lib/api.js"],"names":["VERSION","require","version","async","request","doRequest","params","callback","method","done","actionName","action","options","proxy","jar","headers","userAgent","format","CRLF","postBody","boundary","Math","random","toString","substr","Object","keys","forEach","fieldName","value","push","Buffer","from","body","url","formatUrl","protocol","port","hostname","server","pathname","path","query","form","logger","debug","join","error","response","Error","statusCode","stack","data","info","next","JSON","parse","list","prop","continue","e","Api","winston","fs","logDir","dirname","process","argv","logFile","basename","concurrency","createLogger","add","transports","Console","level","existsSync","File","colorize","filename","json","queue","task","platform","arch","prototype","log","apply","arguments","warn","call","fetchUrl","encoding","length","toFixed","message","module","exports"],"mappings":"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","sourcesContent":["/**\n * Helper \"class\" for accessing MediaWiki API and handling cookie-based session\n */\n'use strict';\n\n// introspect package.json to get module version\nconst VERSION = require( '../package' ).version;\n\n// @see https://github.com/caolan/async\nconst async = require( 'async' );\n\n// @see https://github.com/mikeal/request\nconst request = require( 'request' );\n\nfunction doRequest( params, callback, method, done ) {\n\t// store requested action - will be used when parsing a response\n\tconst actionName = params.action;\n\t// \"request\" options\n\tconst options = {\n\t\tmethod: method || 'GET',\n\t\tproxy: this.proxy || false,\n\t\tjar: this.jar,\n\t\theaders: {\n\t\t\t'User-Agent': this.userAgent\n\t\t}\n\t};\n\n\t// HTTP request parameters\n\tparams = params || {};\n\n\t// force JSON format\n\tparams.format = 'json';\n\n\t// handle uploads\n\tif ( method === 'UPLOAD' ) {\n\t\toptions.method = 'POST';\n\n\t\tconst CRLF = '\\r\\n',\n\t\t\tpostBody = [],\n\t\t\tboundary = `nodemw${Math.random().toString().substr( 2 )}`;\n\n\t\t// encode each field\n\t\tObject.keys( params ).forEach( function ( fieldName ) {\n\t\t\tconst value = params[ fieldName ];\n\n\t\t\tpostBody.push( `--${boundary}` );\n\t\t\tpostBody.push( CRLF );\n\n\t\t\tif ( typeof value === 'string' ) {\n\t\t\t\t// properly encode UTF8 in binary-safe POST data\n\t\t\t\tpostBody.push( `Content-Disposition: form-data; name=\"${fieldName}\"` );\n\t\t\t\tpostBody.push( CRLF );\n\t\t\t\tpostBody.push( CRLF );\n\t\t\t\tpostBody.push( Buffer.from( value, 'utf8' ) );\n\t\t\t} else {\n\t\t\t\t// send attachment\n\t\t\t\tpostBody.push( `Content-Disposition: form-data; name=\"${fieldName}\"; filename=\"foo\"` );\n\t\t\t\tpostBody.push( CRLF );\n\t\t\t\tpostBody.push( CRLF );\n\t\t\t\tpostBody.push( value );\n\t\t\t}\n\n\t\t\tpostBody.push( CRLF );\n\t\t} );\n\n\t\tpostBody.push( `--${boundary}--` );\n\n\t\t// encode post data\n\t\toptions.headers[ 'content-type' ] = `multipart/form-data; boundary=${boundary}`;\n\t\toptions.body = postBody;\n\n\t\tparams = {};\n\t}\n\n\t// form an URL to API\n\toptions.url = this.formatUrl( {\n\t\tprotocol: this.protocol,\n\t\tport: this.port,\n\t\thostname: this.server,\n\t\tpathname: this.path + '/api.php',\n\t\tquery: ( options.method === 'GET' ) ? params : {}\n\t} );\n\n\t// POST all parameters (avoid \"request string too long\" errors)\n\tif ( method === 'POST' ) {\n\t\toptions.form = params;\n\t}\n\n\tthis.logger.debug( 'API action: %s', actionName );\n\tthis.logger.debug( '%s <%s>', options.method, options.url );\n\n\tif ( options.form ) {\n\t\tthis.logger.debug( 'POST fields: %s', Object.keys( options.form ).join( ', ' ) );\n\t}\n\n\trequest( options, ( error, response, body ) => {\n\t\tresponse = response || {};\n\n\t\tif ( error ) {\n\t\t\tthis.logger.error( 'Request to API failed: %s', error );\n\t\t\tcallback( new Error( `Request to API failed: ${error}` ) );\n\t\t\tdone();\n\t\t\treturn;\n\t\t}\n\n\t\tif ( response.statusCode !== 200 ) {\n\t\t\tthis.logger.error( 'Request to API failed: HTTP status code was %d for <%s>', response.statusCode || 'unknown', options.url );\n\t\t\tthis.logger.debug( 'Body: %s', body );\n\t\t\tthis.logger.error( 'Stacktrace', new Error().stack );\n\n\t\t\tcallback( new Error( `Request to API failed: HTTP status code was ${response.statusCode}` ) );\n\t\t\tdone();\n\t\t\treturn;\n\t\t}\n\n\t\t// parse response\n\t\tlet data,\n\t\t\tinfo,\n\t\t\tnext;\n\n\t\ttry {\n\t\t\tdata = JSON.parse( body );\n\t\t\tinfo = data && data[ actionName ];\n\n\t\t\t// acfrom=Zeppelin Games\n\t\t\tnext = data && data[ 'query-continue' ] && data[ 'query-continue' ][ params.list || params.prop ];\n\n\t\t\t// handle the new continuing queries introduced in MW 1.21\n\t\t\t// (and to be made default in MW 1.26)\n\t\t\t// issue #64\n\t\t\t// @see https://www.mediawiki.org/wiki/API:Query#Continuing_queries\n\t\t\tif ( !next ) {\n\t\t\t// cmcontinue=page|5820414e44205920424f534f4e53|12253446, continue=-||\n\t\t\t\tnext = data && data.continue;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tthis.logger.error( 'Error parsing JSON response: %s', body );\n\n\t\t\tcallback( new Error( 'Error parsing JSON response' ) );\n\t\t\tdone();\n\t\t\treturn;\n\t\t}\n\n\t\t// if (!callback) data.error = {info: 'foo'}; // debug\n\n\t\tif ( data && !data.error ) {\n\t\t\tif ( next ) {\n\t\t\t\tthis.logger.debug( 'There\\'s more data' );\n\t\t\t\tthis.logger.debug( next );\n\t\t\t}\n\n\t\t\tcallback( null, info, next, data );\n\t\t} else if ( data.error ) {\n\t\t\tthis.logger.error( 'Error returned by API: %s', data.error.info );\n\t\t\tthis.logger.error( 'Raw error', data.error );\n\n\t\t\tcallback( new Error( `Error returned by API: ${data.error.info}` ) );\n\t\t}\n\t\tdone();\n\t} );\n}\n\nfunction Api( options ) {\n\tthis.protocol = options.protocol || 'http';\n\tthis.port = options.port;\n\tthis.server = options.server;\n\tthis.path = options.path;\n\tthis.proxy = options.proxy;\n\tthis.jar = request.jar(); // create new cookie jar for each instance\n\n\tthis.debug = options.debug;\n\n\t// set up logging\n\tconst winston = require( 'winston' ),\n\t\t// file logging\n\t\tpath = require( 'path' ),\n\t\tfs = require( 'fs' ),\n\t\tlogDir = path.dirname( process.argv[ 1 ] ) + '/log/',\n\t\tlogFile = logDir + path.basename( process.argv[ 1 ], '.js' ) + '.log',\n\t\t// how many tasks (i.e. requests) to run in parallel\n\t\tconcurrency = options.concurrency || 3;\n\n\tthis.logger = winston.createLogger();\n\n\t// console logging\n\tthis.logger.add( new winston.transports.Console( {\n\t\tlevel: this.debug ? 'debug' : 'error'\n\t} ) );\n\n\tif ( fs.existsSync( logDir ) ) {\n\t\tthis.logger.add( new winston.transports.File( {\n\t\t\tcolorize: true,\n\t\t\tfilename: logFile,\n\t\t\tjson: false,\n\t\t\tlevel: this.debug ? 'debug' : 'info'\n\t\t} ) );\n\t}\n\n\t// requests queue\n\t// @see https://github.com/caolan/async#queue\n\tthis.queue = async.queue( function ( task, callback ) {\n\t// process the task (and call the provided callback once it's completed)\n\t\ttask( callback );\n\t}, concurrency );\n\n\t// HTTP client\n\tthis.formatUrl = require( 'url' ).format;\n\n\tthis.userAgent = options.userAgent || ( `nodemw/${VERSION} (node.js ${process.version}; ${process.platform} ${process.arch})` );\n\tthis.version = VERSION;\n\n\t// debug info\n\tthis.info( process.argv.join( ' ' ) );\n\tthis.info( this.userAgent );\n\n\tlet port = this.port ? `:${this.port}` : '';\n\n\tthis.info( `Using <${this.protocol}://${this.server}${port}${this.path}/api.php> as API entry point` );\n\tthis.info( '----' );\n}\n\n// public interface\nApi.prototype = {\n\tlog() {\n\t\tthis.logger.log.apply( this.logger, arguments );\n\t},\n\n\tinfo() {\n\t\tthis.logger.info.apply( this.logger, arguments );\n\t},\n\n\twarn() {\n\t\tthis.logger.warn.apply( this.logger, arguments );\n\t},\n\n\terror() {\n\t\tthis.logger.error.apply( this.logger, arguments );\n\t},\n\n\t// adds request to the queue\n\tcall( params, callback, method ) {\n\t\tthis.queue.push( ( done ) => {\n\t\t\tdoRequest.apply( this, [ params, callback, method, done ] );\n\t\t} );\n\t},\n\n\t// fetch an external resource\n\tfetchUrl( url, callback, encoding ) {\n\t\tencoding = encoding || 'utf-8';\n\n\t\t// add a request to the queue\n\t\tthis.queue.push( ( done ) => {\n\t\t\tthis.info( 'Fetching <%s> (as %s)...', url, encoding );\n\n\t\t\tconst options = {\n\t\t\t\turl,\n\t\t\t\tmethod: 'GET',\n\t\t\t\tproxy: this.proxy || false,\n\t\t\t\tjar: this.jar,\n\t\t\t\tencoding: ( encoding === 'binary' ) ? null : encoding,\n\t\t\t\theaders: {\n\t\t\t\t\t'User-Agent': this.userAgent\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest( options, ( error, response, body ) => {\n\t\t\t\tif ( !error && response.statusCode === 200 ) {\n\t\t\t\t\tthis.info( '<%s>: fetched %s kB', url, ( body.length / 1024 ).toFixed( 2 ) );\n\t\t\t\t\tcallback( null, body );\n\t\t\t\t} else {\n\t\t\t\t\tif ( !error ) {\n\t\t\t\t\t\terror = new Error( `HTTP status ${response.statusCode}` );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.error( `Failed to fetch <${url}>` );\n\t\t\t\t\tthis.error( error.message );\n\t\t\t\t\tcallback( error, body );\n\t\t\t\t}\n\n\t\t\t\tdone();\n\t\t\t} );\n\t\t} );\n\t}\n};\n\nmodule.exports = Api;\n"]},"metadata":{},"sourceType":"script"}