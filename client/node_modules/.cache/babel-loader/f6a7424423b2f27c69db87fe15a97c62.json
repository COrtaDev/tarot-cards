{"ast":null,"code":"const parse = require(\"./parse.js\");\n\nconst {\n  STATUS_CODES\n} = require(\"http\");\n/**\n * Represents a request response\n */\n\n\nclass LadybugResponse {\n  constructor(response, data) {\n    /**\n     * Response headers for this request\n     * @readonly\n     * @type {Object<String, any>}\n     */\n    this.headers = response.headers;\n    /**\n     * Parsed body of the request\n     * The value of this varies depending om the content-type header\n     * @type {any}\n     * @readonly\n     */\n\n    this.body = parse(data, response.headers[\"content-type\"] || \"\");\n    /**\n     * Wether this request was success\n     * status code greater than or equal to 200 and less than 400\n     * @type {Boolean}\n     * @readonly\n     */\n\n    this.ok = response.statusCode >= 200 && response.statusCode < 400;\n    /**\n     * The raw http response object\n     * @readonly\n     * @type {http.IncomingMessage}\n     */\n\n    this.res = response;\n    /**\n     * The status code for the response\n     * @type {Number}\n     * @readonly\n     */\n\n    this.status = response.statusCode || NaN;\n    /**\n     * Human readable string of the response status code\n     * @type {String}\n     * @readonly\n     */\n\n    this.statusText = STATUS_CODES[this.status] || \"\";\n    /**\n     * The text representation of the body non parsed\n     * most of times you would use body instead\n     * it is equal to rawBuffer.toString(); where rawBuffer is the non parsed buffer\n     * @type {String}\n     */\n\n    this.text = data.toString() || \"\";\n  }\n  /**\n   * A getter alias to {@link LadybugResponse#res}\n   */\n\n\n  get response() {\n    return this.res;\n  }\n  /**\n   * Gets a response header case insensitive\n   * @param {String} field - The header field name\n   * @returns {any}\n   */\n\n\n  get(field) {\n    return this.headers[field.toLowerCase()];\n  }\n\n}\n\nmodule.exports = LadybugResponse;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/ladybug-fetch/src/LadybugResponse.js"],"names":["parse","require","STATUS_CODES","LadybugResponse","constructor","response","data","headers","body","ok","statusCode","res","status","NaN","statusText","text","toString","get","field","toLowerCase","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAmBD,OAAO,CAAC,MAAD,CAAhC;AAEA;AACA;AACA;;;AACA,MAAME,eAAN,CAAsB;AACpBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,IAAX,EAAiB;AAE1B;AACJ;AACA;AACA;AACA;AACI,SAAKC,OAAL,GAAeF,QAAQ,CAACE,OAAxB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKC,IAAL,GAAYR,KAAK,CAACM,IAAD,EAAOD,QAAQ,CAACE,OAAT,CAAiB,cAAjB,KAAoC,EAA3C,CAAjB;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKE,EAAL,GAAUJ,QAAQ,CAACK,UAAT,IAAuB,GAAvB,IAA8BL,QAAQ,CAACK,UAAT,GAAsB,GAA9D;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,GAAL,GAAWN,QAAX;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKO,MAAL,GAAcP,QAAQ,CAACK,UAAT,IAAuBG,GAArC;AAEA;AACJ;AACA;AACA;AACA;;AACI,SAAKC,UAAL,GAAkBZ,YAAY,CAAC,KAAKU,MAAN,CAAZ,IAA6B,EAA/C;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACI,SAAKG,IAAL,GAAYT,IAAI,CAACU,QAAL,MAAmB,EAA/B;AACD;AAED;AACF;AACA;;;AACE,MAAIX,QAAJ,GAAe;AACb,WAAO,KAAKM,GAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEM,EAAAA,GAAG,CAACC,KAAD,EAAQ;AACT,WAAO,KAAKX,OAAL,CAAaW,KAAK,CAACC,WAAN,EAAb,CAAP;AACD;;AAtEmB;;AAyEtBC,MAAM,CAACC,OAAP,GAAiBlB,eAAjB","sourcesContent":["const parse = require(\"./parse.js\");\nconst { STATUS_CODES } = require(\"http\");\n\n/**\n * Represents a request response\n */\nclass LadybugResponse {\n  constructor(response, data) {\n\n    /**\n     * Response headers for this request\n     * @readonly\n     * @type {Object<String, any>}\n     */\n    this.headers = response.headers;\n\n    /**\n     * Parsed body of the request\n     * The value of this varies depending om the content-type header\n     * @type {any}\n     * @readonly\n     */\n    this.body = parse(data, response.headers[\"content-type\"] || \"\");\n\n    /**\n     * Wether this request was success\n     * status code greater than or equal to 200 and less than 400\n     * @type {Boolean}\n     * @readonly\n     */\n    this.ok = response.statusCode >= 200 && response.statusCode < 400;\n\n    /**\n     * The raw http response object\n     * @readonly\n     * @type {http.IncomingMessage}\n     */\n    this.res = response;\n\n    /**\n     * The status code for the response\n     * @type {Number}\n     * @readonly\n     */\n    this.status = response.statusCode || NaN;\n\n    /**\n     * Human readable string of the response status code\n     * @type {String}\n     * @readonly\n     */\n    this.statusText = STATUS_CODES[this.status] || \"\";\n\n    /**\n     * The text representation of the body non parsed\n     * most of times you would use body instead\n     * it is equal to rawBuffer.toString(); where rawBuffer is the non parsed buffer\n     * @type {String}\n     */\n    this.text = data.toString() || \"\";\n  }\n\n  /**\n   * A getter alias to {@link LadybugResponse#res}\n   */\n  get response() {\n    return this.res;\n  }\n\n  /**\n   * Gets a response header case insensitive\n   * @param {String} field - The header field name\n   * @returns {any}\n   */\n  get(field) {\n    return this.headers[field.toLowerCase()];\n  }\n}\n\nmodule.exports = LadybugResponse;\n"]},"metadata":{},"sourceType":"script"}