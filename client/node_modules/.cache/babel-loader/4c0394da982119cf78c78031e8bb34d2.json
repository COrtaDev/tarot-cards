{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n});\n\nvar _slicedToArray = function () {\n  function c(d, e) {\n    var f = [],\n        g = !0,\n        h = !1,\n        j = void 0;\n\n    try {\n      for (var l, k = d[Symbol.iterator](); !(g = (l = k.next()).done) && (f.push(l.value), !(e && f.length === e)); g = !0);\n    } catch (m) {\n      h = !0, j = m;\n    } finally {\n      try {\n        !g && k['return'] && k['return']();\n      } finally {\n        if (h) throw j;\n      }\n    }\n\n    return f;\n  }\n\n  return function (d, e) {\n    if (Array.isArray(d)) return d;\n    if (Symbol.iterator in Object(d)) return c(d, e);\n    throw new TypeError('Invalid attempt to destructure non-iterable instance');\n  };\n}(),\n    _typeof = 'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator ? function (c) {\n  return typeof c;\n} : function (c) {\n  return c && 'function' == typeof Symbol && c.constructor === Symbol && c !== Symbol.prototype ? 'symbol' : typeof c;\n};\n\nexports.default = wikiPage;\n\nvar _util = require('./util'),\n    _infoboxParser = require('infobox-parser'),\n    _infoboxParser2 = _interopRequireDefault(_infoboxParser),\n    _cheerio = require('cheerio'),\n    _cheerio2 = _interopRequireDefault(_cheerio),\n    _coordinates = require('./coordinates');\n\nfunction _interopRequireDefault(c) {\n  return c && c.__esModule ? c : {\n    default: c\n  };\n}\n\nfunction _toConsumableArray(c) {\n  if (Array.isArray(c)) {\n    for (var d = 0, e = Array(c.length); d < c.length; d++) e[d] = c[d];\n\n    return e;\n  }\n\n  return Array.from(c);\n}\n\nvar get = function (c, d) {\n  for (var e = arguments.length, f = Array(2 < e ? e - 2 : 0), g = 2; g < e; g++) f[g - 2] = arguments[g];\n\n  return void 0 === c || void 0 === d ? c : 'function' == typeof d ? get.apply(void 0, [d(c)].concat(f)) : get.apply(void 0, [c[d]].concat(f));\n},\n    firstValue = function (c) {\n  return 'object' === ('undefined' == typeof c ? 'undefined' : _typeof(c)) ? c[Object.keys(c)[0]] : c[0];\n},\n    getFileName = function (c) {\n  if (Array.isArray(c) && (c = c[0]), !!c) {\n    if (-1 !== c.indexOf(':')) {\n      var d = c.split(':'),\n          e = _slicedToArray(d, 2),\n          f = e[1];\n\n      return f;\n    }\n\n    return c;\n  }\n};\n\nfunction wikiPage(c, d) {\n  function e() {\n    return (0, _util.api)(d, {\n      prop: 'revisions',\n      rvprop: 'content',\n      rvlimit: 1,\n      rvparse: '',\n      titles: y.title\n    }).then(function (A) {\n      return A.query.pages[y.pageid].revisions[0]['*'];\n    });\n  }\n\n  function f() {\n    return g().then(_util.parseContent);\n  }\n\n  function g() {\n    return (0, _util.api)(d, {\n      prop: 'extracts',\n      explaintext: '',\n      titles: y.title\n    }).then(function (A) {\n      return A.query.pages[y.pageid].extract;\n    });\n  }\n\n  function j() {\n    return (0, _util.api)(d, {\n      generator: 'images',\n      gimlimit: 'max',\n      prop: 'imageinfo',\n      iiprop: 'url',\n      titles: y.title\n    }).then(function (A) {\n      return A.query ? Object.keys(A.query.pages).map(function (B) {\n        return A.query.pages[B];\n      }) : [];\n    });\n  }\n\n  function r(A) {\n    return (0, _util.api)(d, {\n      prop: 'revisions',\n      rvprop: 'content',\n      rvsection: 0,\n      titles: A || y.title\n    }).then(function (B) {\n      return get(B, 'query', 'pages', firstValue, 'revisions', 0, '*');\n    });\n  }\n\n  function t(A) {\n    return r().then(function (B) {\n      var C = (0, _infoboxParser2.default)(B, d.parser).general;\n      return 0 === Object.keys(C).length ? r('Template:Infobox ' + y.title.toLowerCase()).then(function (D) {\n        return (0, _infoboxParser2.default)(D || '', d.parser).general;\n      }) : C;\n    }).then(function (B) {\n      return A ? B.hasOwnProperty(A) ? B[A] : void 0 : B;\n    });\n  }\n\n  var y = c;\n  return {\n    raw: y,\n    html: e,\n    rawContent: g,\n    content: f,\n    sections: f,\n    summary: function () {\n      return (0, _util.api)(d, {\n        prop: 'extracts',\n        explaintext: '',\n        exintro: '',\n        titles: y.title\n      }).then(function (A) {\n        return A.query.pages[y.pageid].extract;\n      });\n    },\n    images: function () {\n      return j().then(function (A) {\n        return A.map(function (B) {\n          return B.imageinfo;\n        }).reduce(function (B, C) {\n          return [].concat(_toConsumableArray(B), _toConsumableArray(C));\n        }, []).map(function (B) {\n          return B.url;\n        });\n      });\n    },\n    references: function () {\n      return e().then(_cheerio2.default.load).then(function (A) {\n        return A('.references cite a.external').map(function () {\n          return A(this).attr('href');\n        }).get();\n      });\n    },\n    links: function () {\n      var A = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : !0,\n          B = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 100,\n          C = (0, _util.pagination)(d, {\n        prop: 'links',\n        plnamespace: 0,\n        pllimit: B,\n        titles: y.title\n      }, function (D) {\n        return D.query.pages[y.pageid].links.map(function (E) {\n          return E.title;\n        });\n      });\n      return A ? (0, _util.aggregatePagination)(C) : C;\n    },\n    externalLinks: function () {\n      return (0, _util.api)(d, {\n        prop: 'extlinks',\n        ellimit: 'max',\n        titles: y.title\n      }).then(function (A) {\n        return A.query.pages[y.pageid].extlinks.map(function (B) {\n          return B['*'];\n        });\n      });\n    },\n    categories: function () {\n      var A = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : !0,\n          B = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 100,\n          C = (0, _util.pagination)(d, {\n        prop: 'categories',\n        pllimit: B,\n        titles: y.title\n      }, function (D) {\n        return D.query.pages[y.pageid].categories.map(function (E) {\n          return E.title;\n        });\n      });\n      return A ? (0, _util.aggregatePagination)(C) : C;\n    },\n    coordinates: function () {\n      return (0, _util.api)(d, {\n        prop: 'coordinates',\n        titles: y.title\n      }).then(function (A) {\n        var B = A.query.pages[y.pageid];\n        return B.coordinates ? B.coordinates[0] : t().then(function (C) {\n          return (0, _coordinates.parseCoordinates)(C);\n        });\n      });\n    },\n    info: t,\n    backlinks: function () {\n      var A = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : !0,\n          B = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 100,\n          C = (0, _util.pagination)(d, {\n        list: 'backlinks',\n        bllimit: B,\n        bltitle: y.title\n      }, function (D) {\n        return D.query.backlinks.map(function (E) {\n          return E.title;\n        });\n      });\n      return A ? (0, _util.aggregatePagination)(C) : C;\n    },\n    rawImages: j,\n    mainImage: function () {\n      return Promise.all([j(), t()]).then(function (A) {\n        var B = _slicedToArray(A, 2),\n            C = B[0],\n            D = B[1],\n            E = getFileName(D.image || D.bildname || D.imagen || D.Immagine || D.badge || D.logo);\n\n        if (!E) return r().then(function (G) {\n          if (C.length) {\n            C.sort(function (I, J) {\n              return G.indexOf(J.title) - G.indexOf(I.title);\n            });\n            var H = C[0];\n            return 0 < H.imageinfo.length ? H.imageinfo[0].url : void 0;\n          }\n        });\n        var F = C.find(function (G) {\n          var H = G.title,\n              I = getFileName(H);\n          return I.toUpperCase() === E.toUpperCase() || I.replace(/\\s/g, '_') === E;\n        });\n        return F && 0 < F.imageinfo.length ? F.imageinfo[0].url : void 0;\n      });\n    },\n    langlinks: function () {\n      return (0, _util.api)(d, {\n        prop: 'langlinks',\n        lllimit: 'max',\n        titles: y.title\n      }).then(function (A) {\n        return A.query.pages[y.pageid].langlinks.map(function (B) {\n          return {\n            lang: B.lang,\n            title: B['*']\n          };\n        });\n      });\n    },\n    rawInfo: r,\n    fullInfo: function () {\n      return r().then(function (A) {\n        return (0, _infoboxParser2.default)(A, d.parser);\n      });\n    },\n    tables: function () {\n      return (0, _util.api)(d, {\n        prop: 'revisions',\n        rvprop: 'content',\n        titles: y.title\n      }).then(function (A) {\n        return get(A, 'query', 'pages', firstValue, 'revisions', 0, '*');\n      }).then(function (A) {\n        return (0, _infoboxParser2.default)(A, d.parser).tables;\n      });\n    },\n    url: function () {\n      return y.canonicalurl;\n    }\n  };\n}","map":{"version":3,"sources":["../src/page.js"],"names":["get","rest","first","obj","firstValue","Object","getFileName","Array","text","name","wikiPage","prop","rvprop","rvlimit","rvparse","titles","raw","res","rawContent","parseContent","explaintext","exintro","generator","gimlimit","iiprop","Promise","rawImages","info","rawInfo","images","b","a","image","title","filename","mainImageName","ellimit","link","html","cheerio","$","plnamespace","pllimit","aggregated","_pagination","category","page","rvsection","apiOptions","_wikitext","key","metadata","list","bllimit","bltitle","lllimit","lang","canonicalurl","content","sections","summary","references","links","externalLinks","categories","coordinates","backlinks","mainImage","langlinks","fullInfo","tables","url"],"mappings":"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","sourcesContent":["import { aggregatePagination, pagination, api, parseContent } from './util';\nimport infoboxParser from 'infobox-parser';\nimport cheerio from 'cheerio';\nimport { parseCoordinates } from './coordinates';\n\nconst get = (obj, first, ...rest) => {\n\tif (obj === undefined || first === undefined) return obj;\n\tif (typeof first === 'function') {\n\t\treturn get(first(obj), ...rest);\n\t}\n\treturn get(obj[first], ...rest);\n};\n\nconst firstValue = obj => {\n\tif (typeof obj === 'object') return obj[Object.keys(obj)[0]];\n\treturn obj[0];\n};\n\nconst getFileName = text => {\n\tif (Array.isArray(text)) text = text[0];\n\tif (!text) return undefined;\n\tif (text.indexOf(':') !== -1) {\n\t\tconst [, name] = text.split(':');\n\t\treturn name;\n\t}\n\treturn text;\n};\n\n/**\n * WikiPage\n * @namespace WikiPage\n */\nexport default function wikiPage(rawPageInfo, apiOptions) {\n\tconst raw = rawPageInfo;\n\n\t/**\n\t * HTML from page\n\t * @example\n\t * wiki.page('batman').then(page => page.html()).then(console.log);\n\t * @method WikiPage#html\n\t * @return {Promise}\n\t */\n\tfunction html() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvlimit: 1,\n\t\t\trvparse: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].revisions[0]['*']);\n\t}\n\n\t/**\n\t * @summary Useful for extracting structured section content from the page\n\t * @alias sections\n\t * @example\n\t * wiki.page('batman').then(page => page.content()).then(console.log);\n\t * @method WikiPage#content\n\t * @return {Promise}\n\t */\n\tfunction content() {\n\t\treturn rawContent().then(parseContent);\n\t}\n\n\t/**\n\t * Raw content from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawContent()).then(console.log);\n\t * @method WikiPage#rawContent\n\t * @return {Promise}\n\t */\n\tfunction rawContent() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Text summary from page\n\t * @example\n\t * wiki.page('batman').then(page => page.summary()).then(console.log);\n\t * @method WikiPage#summary\n\t * @return {Promise}\n\t */\n\tfunction summary() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extracts',\n\t\t\texplaintext: '',\n\t\t\texintro: '',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extract);\n\t}\n\n\t/**\n\t * Raw data from images from page\n\t * @example\n\t * wiki.page('batman').then(page => page.rawImages()).then(console.log);\n\t * @method WikiPage#rawImages\n\t * @return {Promise}\n\t */\n\tfunction rawImages() {\n\t\treturn api(apiOptions, {\n\t\t\tgenerator: 'images',\n\t\t\tgimlimit: 'max',\n\t\t\tprop: 'imageinfo',\n\t\t\tiiprop: 'url',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tif (res.query) {\n\t\t\t\treturn Object.keys(res.query.pages).map(id => res.query.pages[id]);\n\t\t\t}\n\t\t\treturn [];\n\t\t});\n\t}\n\n\t/**\n\t * Main image URL from infobox on page\n\t * @example\n\t * wiki.page('batman').then(page => page.mainImage()).then(console.log);\n\t * @method WikiPage#mainImage\n\t * @return {Promise}\n\t */\n\tfunction mainImage() {\n\t\treturn Promise.all([rawImages(), info()]).then(([images, info]) => {\n\t\t\t// Handle different translations of \"image\" here\n\t\t\tconst mainImageName = getFileName(\n\t\t\t\tinfo.image ||\n\t\t\t\t\tinfo.bildname ||\n\t\t\t\t\tinfo.imagen ||\n\t\t\t\t\tinfo.Immagine ||\n\t\t\t\t\tinfo.badge ||\n\t\t\t\t\tinfo.logo\n\t\t\t);\n\t\t\t// Handle case where no info box exists\n\t\t\tif (!mainImageName) {\n\t\t\t\treturn rawInfo().then(text => {\n\t\t\t\t\tif (!images.length) return undefined;\n\t\t\t\t\t// Sort images by what is seen first in page's info text\n\t\t\t\t\timages.sort((a, b) => text.indexOf(b.title) - text.indexOf(a.title));\n\t\t\t\t\tconst image = images[0];\n\t\t\t\t\treturn image.imageinfo.length > 0\n\t\t\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t\t\t: undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst image = images.find(({ title }) => {\n\t\t\t\tconst filename = getFileName(title);\n\t\t\t\t// Some wikis use underscores for spaces, some don't\n\t\t\t\treturn (\n\t\t\t\t\tfilename.toUpperCase() === mainImageName.toUpperCase() ||\n\t\t\t\t\tfilename.replace(/\\s/g, '_') === mainImageName\n\t\t\t\t);\n\t\t\t});\n\t\t\treturn image && image.imageinfo.length > 0\n\t\t\t\t? image.imageinfo[0].url\n\t\t\t\t: undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Image URL's from page\n\t * @example\n\t * wiki.page('batman').then(page => page.image()).then(console.log);\n\t * @method WikiPage#images\n\t * @return {Promise}\n\t */\n\tfunction images() {\n\t\treturn rawImages().then(images => {\n\t\t\treturn images\n\t\t\t\t.map(image => image.imageinfo)\n\t\t\t\t.reduce((imageInfos, list) => [...imageInfos, ...list], [])\n\t\t\t\t.map(info => info.url);\n\t\t});\n\t}\n\n\t/**\n\t * External links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.externalLinks()).then(console.log);\n\t * @method WikiPage#externalLinks\n\t * @return {Promise}\n\t */\n\tfunction externalLinks() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'extlinks',\n\t\t\tellimit: 'max',\n\t\t\ttitles: raw.title\n\t\t}).then(res => res.query.pages[raw.pageid].extlinks.map(link => link['*']));\n\t}\n\n\t/**\n\t * References from page\n\t * @example\n\t * wiki.page('batman').then(page => page.references()).then(console.log);\n\t * @method WikiPage#references\n\t * @return {Promise}\n\t */\n\tfunction references() {\n\t\treturn html()\n\t\t\t.then(cheerio.load)\n\t\t\t.then($ => {\n\t\t\t\treturn $('.references cite a.external')\n\t\t\t\t\t.map(function() {\n\t\t\t\t\t\treturn $(this).attr('href');\n\t\t\t\t\t})\n\t\t\t\t\t.get();\n\t\t\t});\n\t}\n\n\t/**\n\t * Paginated links from page\n\t * @example\n\t * wiki.page('batman').then(page => page.links()).then(console.log);\n\t * @method WikiPage#links\n\t * @param  {Boolean} [aggregated] - return all links (default is true)\n\t * @param  {Number} [limit] - number of links per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction links(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'links',\n\t\t\t\tplnamespace: 0,\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres => res.query.pages[raw.pageid].links.map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Paginated categories from page\n\t * @example\n\t * wiki.page('batman').then(page => page.categories()).then(console.log);\n\t * @method WikiPage#categories\n\t * @param  {Boolean} [aggregated] - return all categories (default is true)\n\t * @param  {Number} [limit] - number of categories per page\n\t * @return {Promise} - returns results if aggregated [and next function for more results if not aggregated]\n\t */\n\tfunction categories(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tprop: 'categories',\n\t\t\t\tpllimit: limit,\n\t\t\t\ttitles: raw.title\n\t\t\t},\n\t\t\tres =>\n\t\t\t\tres.query.pages[raw.pageid].categories.map(category => category.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Geographical coordinates from page\n\t * @example\n\t * wiki().page('Texas').then(texas => texas.coordinates())\n\t * @method WikiPage#coordinates\n\t * @return {Promise}\n\t */\n\tfunction coordinates() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'coordinates',\n\t\t\ttitles: raw.title\n\t\t}).then(res => {\n\t\t\tconst page = res.query.pages[raw.pageid];\n\t\t\tif (page.coordinates) {\n\t\t\t\treturn page.coordinates[0];\n\t\t\t}\n\t\t\t// No coordinates for this page, check infobox for deprecated version\n\t\t\treturn info().then(data => parseCoordinates(data));\n\t\t});\n\t}\n\n\tfunction rawInfo(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\trvsection: 0,\n\t\t\ttitles: title || raw.title\n\t\t}).then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'));\n\t}\n\n\t/**\n\t * Fetch and parse tables within page\n\t * @method WikiPage#tables\n\t * @return {Promise} Resolves to a collection of tables\n\t */\n\tfunction tables() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'revisions',\n\t\t\trvprop: 'content',\n\t\t\ttitles: raw.title\n\t\t})\n\t\t\t.then(res => get(res, 'query', 'pages', firstValue, 'revisions', 0, '*'))\n\t\t\t.then(wikitext => infoboxParser(wikitext, apiOptions.parser).tables);\n\t}\n\n\t/**\n\t * Get general information from page, with optional specifc property\n\t * @deprecated This method will be dropped and replaced with the `fullInfo` implementation in v5\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.info('alter_ego'));\n\t * @method WikiPage#info\n\t * @param  {String} [key] - Information key. Falsy keys are ignored\n\t * @return {Promise} - info Object contains key/value pairs of infobox data, or specific value if key given\n\t */\n\tfunction info(key) {\n\t\treturn rawInfo()\n\t\t\t.then(wikitext => {\n\t\t\t\t// Use general data for now...\n\t\t\t\tconst info = infoboxParser(wikitext, apiOptions.parser).general;\n\t\t\t\tif (Object.keys(info).length === 0) {\n\t\t\t\t\t// If empty, check to see if this page has a templated infobox\n\t\t\t\t\treturn rawInfo(`Template:Infobox ${raw.title.toLowerCase()}`).then(\n\t\t\t\t\t\t_wikitext =>\n\t\t\t\t\t\t\tinfoboxParser(_wikitext || '', apiOptions.parser).general\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn info;\n\t\t\t})\n\t\t\t.then(metadata => {\n\t\t\t\tif (!key) {\n\t\t\t\t\treturn metadata;\n\t\t\t\t}\n\t\t\t\tif (metadata.hasOwnProperty(key)) {\n\t\t\t\t\treturn metadata[key];\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Get the full infobox data, parsed in a easy to use manner\n\t * @example\n\t * new Wiki().page('Batman').then(page => page.fullInfo()).then(info => info.general.aliases);\n\t * @method WikiPage#fullInfo\n\t * @return {Promise} - Parsed object of all infobox data\n\t */\n\tfunction fullInfo() {\n\t\treturn rawInfo().then(wikitext =>\n\t\t\tinfoboxParser(wikitext, apiOptions.parser)\n\t\t);\n\t}\n\n\t/**\n\t * Paginated backlinks from page\n\t * @method WikiPage#backlinks\n\t * @param  {Boolean} [aggregated] - return all backlinks (default is true)\n\t * @param  {Number} [limit] - number of backlinks per page\n\t * @return {Promise} - includes results [and next function for more results if not aggregated]\n\t */\n\tfunction backlinks(aggregated = true, limit = 100) {\n\t\tconst _pagination = pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'backlinks',\n\t\t\t\tbllimit: limit,\n\t\t\t\tbltitle: raw.title\n\t\t\t},\n\t\t\tres => res.query.backlinks.map(link => link.title)\n\t\t);\n\t\tif (aggregated) {\n\t\t\treturn aggregatePagination(_pagination);\n\t\t}\n\t\treturn _pagination;\n\t}\n\n\t/**\n\t * Get list of links to different translations\n\t * @method WikiPage#langlinks\n\t * @return {Promise} - includes link objects { lang, title }\n\t */\n\tfunction langlinks() {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'langlinks',\n\t\t\tlllimit: 'max',\n\t\t\ttitles: raw.title\n\t\t}).then(res =>\n\t\t\tres.query.pages[raw.pageid].langlinks.map(link => {\n\t\t\t\treturn {\n\t\t\t\t\tlang: link.lang,\n\t\t\t\t\ttitle: link['*']\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\t}\n\n\t/**\n\t * Get URL for wiki page\n\t * @method WikiPage#url\n\t * @return {URL}\n\t */\n\tfunction url() {\n\t\treturn raw.canonicalurl;\n\t}\n\n\tconst page = {\n\t\traw,\n\t\thtml,\n\t\trawContent,\n\t\tcontent,\n\t\tsections: content,\n\t\tsummary,\n\t\timages,\n\t\treferences,\n\t\tlinks,\n\t\texternalLinks,\n\t\tcategories,\n\t\tcoordinates,\n\t\tinfo,\n\t\tbacklinks,\n\t\trawImages,\n\t\tmainImage,\n\t\tlanglinks,\n\t\trawInfo,\n\t\tfullInfo,\n\t\ttables,\n\t\turl\n\t};\n\n\treturn page;\n}\n"]},"metadata":{},"sourceType":"script"}