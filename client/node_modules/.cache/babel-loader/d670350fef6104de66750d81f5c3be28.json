{"ast":null,"code":"'use strict';\n\nfunction preserveCamelCase(str) {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      str = str.substr(0, i) + '-' + str.substr(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n      str = str.substr(0, i - 1) + '-' + str.substr(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return str;\n}\n\nmodule.exports = function (str) {\n  if (arguments.length > 1) {\n    str = Array.from(arguments).map(x => x.trim()).filter(x => x.length).join('-');\n  } else {\n    str = str.trim();\n  }\n\n  if (str.length === 0) {\n    return '';\n  }\n\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  if (/^[a-z0-9]+$/.test(str)) {\n    return str;\n  }\n\n  const hasUpperCase = str !== str.toLowerCase();\n\n  if (hasUpperCase) {\n    str = preserveCamelCase(str);\n  }\n\n  return str.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/infobox-parser/node_modules/camelcase/index.js"],"names":["preserveCamelCase","str","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","length","c","test","toUpperCase","substr","toLowerCase","module","exports","arguments","Array","from","map","x","trim","filter","join","hasUpperCase","replace","m","p1"],"mappings":"AAAA;;AAEA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;AAC/B,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,eAAe,GAAG,KAAtB;AACA,MAAIC,mBAAmB,GAAG,KAA1B;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAAG,CAACK,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACpC,UAAME,CAAC,GAAGN,GAAG,CAACI,CAAD,CAAb;;AAEA,QAAIH,eAAe,IAAI,WAAWM,IAAX,CAAgBD,CAAhB,CAAnB,IAAyCA,CAAC,CAACE,WAAF,OAAoBF,CAAjE,EAAoE;AACnEN,MAAAA,GAAG,GAAGA,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcL,CAAd,IAAmB,GAAnB,GAAyBJ,GAAG,CAACS,MAAJ,CAAWL,CAAX,CAA/B;AACAH,MAAAA,eAAe,GAAG,KAAlB;AACAE,MAAAA,mBAAmB,GAAGD,eAAtB;AACAA,MAAAA,eAAe,GAAG,IAAlB;AACAE,MAAAA,CAAC;AACD,KAND,MAMO,IAAIF,eAAe,IAAIC,mBAAnB,IAA0C,WAAWI,IAAX,CAAgBD,CAAhB,CAA1C,IAAgEA,CAAC,CAACI,WAAF,OAAoBJ,CAAxF,EAA2F;AACjGN,MAAAA,GAAG,GAAGA,GAAG,CAACS,MAAJ,CAAW,CAAX,EAAcL,CAAC,GAAG,CAAlB,IAAuB,GAAvB,GAA6BJ,GAAG,CAACS,MAAJ,CAAWL,CAAC,GAAG,CAAf,CAAnC;AACAD,MAAAA,mBAAmB,GAAGD,eAAtB;AACAA,MAAAA,eAAe,GAAG,KAAlB;AACAD,MAAAA,eAAe,GAAG,IAAlB;AACA,KALM,MAKA;AACNA,MAAAA,eAAe,GAAGK,CAAC,CAACI,WAAF,OAAoBJ,CAAtC;AACAH,MAAAA,mBAAmB,GAAGD,eAAtB;AACAA,MAAAA,eAAe,GAAGI,CAAC,CAACE,WAAF,OAAoBF,CAAtC;AACA;AACD;;AAED,SAAON,GAAP;AACA;;AAEDW,MAAM,CAACC,OAAP,GAAiB,UAAUZ,GAAV,EAAe;AAC/B,MAAIa,SAAS,CAACR,MAAV,GAAmB,CAAvB,EAA0B;AACzBL,IAAAA,GAAG,GAAGc,KAAK,CAACC,IAAN,CAAWF,SAAX,EACJG,GADI,CACAC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADL,EAEJC,MAFI,CAEGF,CAAC,IAAIA,CAAC,CAACZ,MAFV,EAGJe,IAHI,CAGC,GAHD,CAAN;AAIA,GALD,MAKO;AACNpB,IAAAA,GAAG,GAAGA,GAAG,CAACkB,IAAJ,EAAN;AACA;;AAED,MAAIlB,GAAG,CAACK,MAAJ,KAAe,CAAnB,EAAsB;AACrB,WAAO,EAAP;AACA;;AAED,MAAIL,GAAG,CAACK,MAAJ,KAAe,CAAnB,EAAsB;AACrB,WAAOL,GAAG,CAACU,WAAJ,EAAP;AACA;;AAED,MAAI,cAAcH,IAAd,CAAmBP,GAAnB,CAAJ,EAA6B;AAC5B,WAAOA,GAAP;AACA;;AAED,QAAMqB,YAAY,GAAGrB,GAAG,KAAKA,GAAG,CAACU,WAAJ,EAA7B;;AAEA,MAAIW,YAAJ,EAAkB;AACjBrB,IAAAA,GAAG,GAAGD,iBAAiB,CAACC,GAAD,CAAvB;AACA;;AAED,SAAOA,GAAG,CACRsB,OADK,CACG,WADH,EACgB,EADhB,EAELZ,WAFK,GAGLY,OAHK,CAGG,iBAHH,EAGsB,CAACC,CAAD,EAAIC,EAAJ,KAAWA,EAAE,CAAChB,WAAH,EAHjC,CAAP;AAIA,CAhCD","sourcesContent":["'use strict';\n\nfunction preserveCamelCase(str) {\n\tlet isLastCharLower = false;\n\tlet isLastCharUpper = false;\n\tlet isLastLastCharUpper = false;\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst c = str[i];\n\n\t\tif (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n\t\t\tstr = str.substr(0, i) + '-' + str.substr(i);\n\t\t\tisLastCharLower = false;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = true;\n\t\t\ti++;\n\t\t} else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n\t\t\tstr = str.substr(0, i - 1) + '-' + str.substr(i - 1);\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = false;\n\t\t\tisLastCharLower = true;\n\t\t} else {\n\t\t\tisLastCharLower = c.toLowerCase() === c;\n\t\t\tisLastLastCharUpper = isLastCharUpper;\n\t\t\tisLastCharUpper = c.toUpperCase() === c;\n\t\t}\n\t}\n\n\treturn str;\n}\n\nmodule.exports = function (str) {\n\tif (arguments.length > 1) {\n\t\tstr = Array.from(arguments)\n\t\t\t.map(x => x.trim())\n\t\t\t.filter(x => x.length)\n\t\t\t.join('-');\n\t} else {\n\t\tstr = str.trim();\n\t}\n\n\tif (str.length === 0) {\n\t\treturn '';\n\t}\n\n\tif (str.length === 1) {\n\t\treturn str.toLowerCase();\n\t}\n\n\tif (/^[a-z0-9]+$/.test(str)) {\n\t\treturn str;\n\t}\n\n\tconst hasUpperCase = str !== str.toLowerCase();\n\n\tif (hasUpperCase) {\n\t\tstr = preserveCamelCase(str);\n\t}\n\n\treturn str\n\t\t.replace(/^[_.\\- ]+/, '')\n\t\t.toLowerCase()\n\t\t.replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n};\n"]},"metadata":{},"sourceType":"script"}