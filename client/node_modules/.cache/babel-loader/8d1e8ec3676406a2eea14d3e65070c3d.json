{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport wiki from 'wikijs';\n\nconst Meaning = props => {\n  _s();\n\n  const [info, setInfo] = useState(null);\n  const [text, setText] = useState([]);\n  useEffect(() => {\n    if (info) {\n      if (!text.length) {\n        handleInfo(info);\n      }\n\n      return;\n    }\n\n    async function getInfo() {\n      const page = await wiki().page(props.search);\n      const content = await page.sections();\n      console.log(content);\n      setInfo(content);\n    }\n\n    ;\n    getInfo();\n  });\n  const titlesToAvoid = [\"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\", \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\", \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\"];\n\n  function handleInfo(info) {\n    console.log(\"All Info: \", info); // const titles = info.map(section => section.title);\n\n    let text = info.map(section => {\n      if (!titlesToAvoid.includes(section.title)) {\n        if (!section.content && section.items) {\n          // console.log(\"Subsections: \", section.items)\n          let subectionContent = section.items.map(subsection => subsection.content); // console.log(\"Subsection Content: \", subectionContent);\n\n          return [...subectionContent];\n        } else if (section.content && section.items) {\n          // console.log(\"Subsections: \", section.items)\n          let subectionContent = section.items.map(subsection => subsection.content); // console.log(\"Subsection Content: \", subectionContent);\n\n          return [section.content, ...subectionContent];\n        }\n\n        return section.content;\n      }\n    });\n\n    if (!text || !text.length) {\n      console.log('We are here...');\n      setText(['There was no text']);\n      return;\n    }\n\n    text = text.filter(content => content).flat(); // console.log(\"Titles: \", titles);\n\n    setText(text);\n  }\n\n  ; // console.log(\"Text: \", text)\n\n  const cardText = text.map((text, i) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cardText\n  }, void 0, false);\n};\n\n_s(Meaning, \"JE8kuFOJqsaCKrGboOuhR6vbdrI=\");\n\n_c = Meaning;\nexport default Meaning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meaning\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js"],"names":["React","useState","useEffect","wiki","Meaning","props","info","setInfo","text","setText","length","handleInfo","getInfo","page","search","content","sections","console","log","titlesToAvoid","map","section","includes","title","items","subectionContent","subsection","filter","flat","cardText","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState([]);\n\n    useEffect(() => {\n        if (info) {\n            if (!text.length) {\n                handleInfo(info);\n            }\n            return;\n        }\n        async function getInfo() {\n            const page = await wiki().page(props.search);\n            const content = await page.sections();\n            console.log(content);\n            setInfo(content);\n        };\n        getInfo();\n    });\n    const titlesToAvoid = [\n        \"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\",\n        \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\",\n        \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\",\n    ];\n    function handleInfo(info) {\n        console.log(\"All Info: \", info)\n        // const titles = info.map(section => section.title);\n        let text = info.map(section => {\n            if (!titlesToAvoid.includes(section.title)) {\n                if (!section.content && section.items) {\n                    // console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    // console.log(\"Subsection Content: \", subectionContent);\n                    return [...subectionContent];\n                } else if (section.content && section.items) {\n                    // console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    // console.log(\"Subsection Content: \", subectionContent);\n                    return [section.content, ...subectionContent,];\n                }\n                return section.content\n            }\n        });\n        if(!text||!text.length){\n            console.log('We are here...')\n            setText(['There was no text'])\n            return\n        }\n        text = text.filter(content => content).flat();\n        // console.log(\"Titles: \", titles);\n        setText(text);\n    };\n    // console.log(\"Text: \", text)\n    const cardText = text.map((text, i) => {\n        return (\n            <p key={i}>\n                {text}\n            </p>\n        );\n    })\n    return (\n        <>\n            {cardText}\n        </>\n    )\n}\n\nexport default Meaning;\n"]},"metadata":{},"sourceType":"module"}