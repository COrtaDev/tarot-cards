{"ast":null,"code":"import wiki from 'wikijs';\nexport async function getMajorArcana() {\n  const page = await wiki().page('Major_Arcana');\n  const [tables] = await page.tables();\n  console.log(tables);\n  let deck = await buildDeck(tables);\n\n  for (let i = 0; i < deck.length; i++) {\n    deck[i]['url'] = await getImgUrl(deck[i].queryString);\n  }\n\n  return {\n    id: 'major',\n    deckName: 'The Major Arcana',\n    cards: deck\n  };\n}\n;\nexport async function getMinorArcana() {\n  const page = await wiki().page('Minor_Arcana');\n  const images = await page.images();\n  const links = await page.links();\n  const deck = buildSuits(images);\n  addQueryStringToMinor(deck, links);\n  return {\n    id: 'minor',\n    deckName: \"The Minor Arcana\",\n    cards: deck\n  };\n}\n;\n\nfunction buildDeck(tables) {\n  const deck = tables.map(table => {\n    const queryString = makeQueryString(table.card);\n\n    if (table.card.startsWith(\"Strength\")) {\n      return {\n        id: table.number,\n        cardName: \"Strength\",\n        queryString: queryString\n      };\n    }\n\n    ;\n\n    if (table.card.startsWith(\"Justice\")) {\n      return {\n        id: table.number,\n        cardName: \"Justice\",\n        queryString: queryString\n      };\n    }\n\n    ;\n    return {\n      id: table.number,\n      cardName: table.card,\n      queryString: queryString\n    };\n  });\n  return deck;\n}\n\n;\n\nfunction makeQueryString(str) {\n  if (str.startsWith(\"Strength\")) str = \"Strength\";\n  if (str.startsWith(\"Justice\")) str = \"Justice\";\n  str = str.replaceAll(\" \", \"_\");\n  str = str + \"_(Tarot_card)\";\n  return str;\n}\n\n;\n\nfunction addQueryStringToMinor(deck, links) {\n  console.log(deck, links);\n  deck.forEach(suit => {\n    suit.forEach(card => {\n      console.log(card);\n      let query = links.filter(link => link.includes(card.cardName));\n      console.log(query);\n      [card['queryString']] = query;\n    });\n  });\n  console.log(deck);\n}\n\n;\n\nasync function getImgUrl(queryString) {\n  const page = await wiki().page(queryString);\n  const rawImg = await page.rawImages();\n\n  for (let i = 0; i < rawImg.length; i++) {\n    if (rawImg[i].title.includes(\"RWS\")) {\n      return rawImg[i].imageinfo[0].url;\n    }\n  }\n}\n\n;\n\nfunction buildSuits(strArr) {\n  const wands = strArr.filter(imgUrl => imgUrl.includes('Wands'));\n  const pents = strArr.filter(imgUrl => imgUrl.includes('Pents'));\n  const cups = strArr.filter(imgUrl => imgUrl.includes('Cups'));\n  const swords = strArr.filter(imgUrl => imgUrl.includes('Swords'));\n  const suits = [buildCardFromSuit(wands, \"Wands\"), buildCardFromSuit(pents, \"Pents\"), buildCardFromSuit(cups, \"Cups\"), buildCardFromSuit(swords, \"Swords\")];\n  const sortedSuits = suits.map(suit => sortDeck(suit));\n  return sortedSuits;\n}\n\n;\n\nfunction buildCardFromSuit(suitArr, suit) {\n  const cards = suitArr.map(card => {\n    let cardName = makeCardNameFromUrl(card, suit);\n    let id;\n\n    for (let key in helper) {\n      if (cardName.startsWith(helper[key])) {\n        id = key;\n        break;\n      }\n    }\n\n    return {\n      id: Number(id),\n      suit: suit,\n      cardName: cardName,\n      imgUrl: card\n    };\n  });\n  return cards;\n}\n\nfunction makeCardNameFromUrl(urlStr, suit) {\n  const subStr = urlStr.slice(urlStr.indexOf(suit), urlStr.indexOf(\".jpg\"));\n\n  for (let key in helper) {\n    if (subStr.endsWith(key)) {\n      if (suit === 'Pents') {\n        return `${helper[key]} of Coins`;\n      } else {\n        return `${helper[key]} of ${suit}`;\n      }\n    }\n  }\n}\n\nfunction sortDeck(deck) {\n  const sorted = [];\n\n  while (sorted.length < 14) sorted.push(null);\n\n  for (let i = 0; i < deck.length; i++) {\n    sorted[deck[i].id - 1] = deck[i];\n  }\n\n  return sorted;\n}\n\nconst helper = {\n  '01': \"Ace\",\n  '02': \"Two\",\n  '03': \"Three\",\n  '04': \"Four\",\n  '05': \"Five\",\n  '06': \"Six\",\n  '07': \"Seven\",\n  '08': \"Eight\",\n  '09': \"Nine\",\n  '10': \"Ten\",\n  '11': \"Page\",\n  '12': \"Knight\",\n  '13': \"Queen\",\n  '14': \"King\"\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Helpers/getCards.js"],"names":["wiki","getMajorArcana","page","tables","console","log","deck","buildDeck","i","length","getImgUrl","queryString","id","deckName","cards","getMinorArcana","images","links","buildSuits","addQueryStringToMinor","map","table","makeQueryString","card","startsWith","number","cardName","str","replaceAll","forEach","suit","query","filter","link","includes","rawImg","rawImages","title","imageinfo","url","strArr","wands","imgUrl","pents","cups","swords","suits","buildCardFromSuit","sortedSuits","sortDeck","suitArr","makeCardNameFromUrl","key","helper","Number","urlStr","subStr","slice","indexOf","endsWith","sorted","push"],"mappings":"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","sourcesContent":["import wiki from 'wikijs';\n\nexport async function getMajorArcana() {\n    const page = await wiki().page('Major_Arcana');\n    const [tables] = await page.tables();\n    console.log(tables)\n    let deck = await buildDeck(tables);\n    for (let i = 0; i < deck.length; i++) {\n        deck[i]['url'] = await getImgUrl(deck[i].queryString);\n    }\n    return (\n        {\n            id: 'major',\n            deckName: 'The Major Arcana',\n            cards: deck,\n        }\n    );\n};\n\nexport async function getMinorArcana() {\n    const page = await wiki().page('Minor_Arcana');\n    const images = await page.images();\n    const links = await page.links();\n    const deck = buildSuits(images);\n    addQueryStringToMinor(deck, links)\n    return (\n        {\n            id: 'minor',\n            deckName: \"The Minor Arcana\",\n            cards: deck,\n        }\n    );\n};\n\nfunction buildDeck(tables) {\n    const deck = tables.map((table) => {\n        const queryString = makeQueryString(table.card);\n        if (table.card.startsWith(\"Strength\")) {\n            return (\n                {\n                    id: table.number,\n                    cardName: \"Strength\",\n                    queryString: queryString,\n                }\n            )\n        };\n        if (table.card.startsWith(\"Justice\")) {\n            return (\n                {\n                    id: table.number,\n                    cardName: \"Justice\",\n                    queryString: queryString,\n                }\n            )\n        };\n        return (\n            {\n                id: table.number,\n                cardName: table.card,\n                queryString: queryString,\n            }\n        )\n    });\n    return deck;\n};\n\nfunction makeQueryString(str) {\n    if (str.startsWith(\"Strength\")) str = \"Strength\";\n    if (str.startsWith(\"Justice\")) str = \"Justice\";\n    str = str.replaceAll(\" \", \"_\")\n    str = str + \"_(Tarot_card)\";\n    return str;\n};\n\nfunction addQueryStringToMinor(deck, links) {\n    console.log(deck, links);\n    deck.forEach(suit => {\n        suit.forEach(card => {\n            console.log(card)\n            let query = links.filter(link => link.includes(card.cardName));\n            console.log(query);\n            [card['queryString']] = query;\n        })\n    });\n    console.log(deck);\n};\n\nasync function getImgUrl(queryString) {\n    const page = await wiki().page(queryString);\n    const rawImg = await page.rawImages();\n    for (let i = 0; i < rawImg.length; i++) {\n        if (rawImg[i].title.includes(\"RWS\")) {\n            return (rawImg[i].imageinfo[0].url)\n        }\n    }\n};\n\nfunction buildSuits(strArr) {\n    const wands = strArr.filter(imgUrl => imgUrl.includes('Wands'));\n    const pents = strArr.filter(imgUrl => imgUrl.includes('Pents'));\n    const cups = strArr.filter(imgUrl => imgUrl.includes('Cups'));\n    const swords = strArr.filter(imgUrl => imgUrl.includes('Swords'));\n    const suits = [\n        buildCardFromSuit(wands, \"Wands\"),\n        buildCardFromSuit(pents, \"Pents\"),\n        buildCardFromSuit(cups, \"Cups\"),\n        buildCardFromSuit(swords, \"Swords\"),\n    ];\n    const sortedSuits = suits.map(suit => sortDeck(suit));\n    return sortedSuits;\n};\n\nfunction buildCardFromSuit(suitArr, suit) {\n    const cards = suitArr.map(card => {\n        let cardName = makeCardNameFromUrl(card, suit);\n        let id;\n        for (let key in helper) {\n            if (cardName.startsWith(helper[key])) {\n                id = key;\n                break;\n            }\n        }\n        return ({\n            id: Number(id),\n            suit: suit,\n            cardName: cardName,\n            imgUrl: card,\n        });\n\n    });\n    return cards;\n}\n\nfunction makeCardNameFromUrl(urlStr, suit) {\n    const subStr = urlStr.slice(urlStr.indexOf(suit), urlStr.indexOf(\".jpg\"));\n    for (let key in helper) {\n        if (subStr.endsWith(key)) {\n            if (suit === 'Pents') {\n                return `${helper[key]} of Coins`;\n            } else {\n                return `${helper[key]} of ${suit}`;\n            }\n        }\n    }\n}\n\nfunction sortDeck(deck) {\n    const sorted = [];\n    while (sorted.length < 14) sorted.push(null);\n    for (let i = 0; i < deck.length; i++) {\n        sorted[(deck[i].id) - 1] = deck[i];\n    }\n    return sorted;\n}\n\nconst helper = {\n    '01': \"Ace\",\n    '02': \"Two\",\n    '03': \"Three\",\n    '04': \"Four\",\n    '05': \"Five\",\n    '06': \"Six\",\n    '07': \"Seven\",\n    '08': \"Eight\",\n    '09': \"Nine\",\n    '10': \"Ten\",\n    '11': \"Page\",\n    '12': \"Knight\",\n    '13': \"Queen\",\n    '14': \"King\",\n};\n"]},"metadata":{},"sourceType":"module"}