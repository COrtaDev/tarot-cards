{"ast":null,"code":"const url = require(\"url\");\n\nconst {\n  mergeObjects,\n  isAbsoluteURL,\n  URLJoin\n} = require(\"./utils/utils.js\"); // Joins two URLs Cleanly, respecting any queries that appears in both base url\n// path and the request query object.\n\n\nfunction cleanJoin(req) {\n  if (!isAbsoluteURL(req.url) && req.baseURL) {\n    const parsedBase = url.parse(req.baseURL, true);\n    const parsed = url.parse(req.url, true);\n    return {\n      protocol: parsedBase.protocol,\n      host: parsedBase.hostname,\n      port: parsedBase.port,\n      path: URLJoin(parsedBase.pathname, parsed.pathname),\n      query: mergeObjects(req._query, parsedBase.query, parsed.query)\n    };\n  } else {\n    const parsed = url.parse(req.url, true);\n    return {\n      protocol: parsed.protocol,\n      host: parsed.hostname,\n      port: parsed.port,\n      path: parsed.pathname,\n      query: mergeObjects(req._query, parsed.query)\n    };\n  }\n}\n\nmodule.exports = cleanJoin;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/ladybug-fetch/src/url.js"],"names":["url","require","mergeObjects","isAbsoluteURL","URLJoin","cleanJoin","req","baseURL","parsedBase","parse","parsed","protocol","host","hostname","port","path","pathname","query","_query","module","exports"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AACA,MAAM;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,aAAhB;AAA+BC,EAAAA;AAA/B,IAA2CH,OAAO,CAAC,kBAAD,CAAxD,C,CAEA;AACA;;;AACA,SAASI,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAG,CAACH,aAAa,CAACG,GAAG,CAACN,GAAL,CAAd,IAA2BM,GAAG,CAACC,OAAlC,EAA2C;AACzC,UAAMC,UAAU,GAAGR,GAAG,CAACS,KAAJ,CAAUH,GAAG,CAACC,OAAd,EAAuB,IAAvB,CAAnB;AACA,UAAMG,MAAM,GAAGV,GAAG,CAACS,KAAJ,CAAUH,GAAG,CAACN,GAAd,EAAmB,IAAnB,CAAf;AACA,WAAO;AACLW,MAAAA,QAAQ,EAAEH,UAAU,CAACG,QADhB;AAELC,MAAAA,IAAI,EAAEJ,UAAU,CAACK,QAFZ;AAGLC,MAAAA,IAAI,EAAEN,UAAU,CAACM,IAHZ;AAILC,MAAAA,IAAI,EAAEX,OAAO,CAACI,UAAU,CAACQ,QAAZ,EAAsBN,MAAM,CAACM,QAA7B,CAJR;AAKLC,MAAAA,KAAK,EAAEf,YAAY,CAACI,GAAG,CAACY,MAAL,EAAaV,UAAU,CAACS,KAAxB,EAA+BP,MAAM,CAACO,KAAtC;AALd,KAAP;AAOD,GAVD,MAUO;AACL,UAAMP,MAAM,GAAGV,GAAG,CAACS,KAAJ,CAAUH,GAAG,CAACN,GAAd,EAAmB,IAAnB,CAAf;AACA,WAAO;AACLW,MAAAA,QAAQ,EAAED,MAAM,CAACC,QADZ;AAELC,MAAAA,IAAI,EAAEF,MAAM,CAACG,QAFR;AAGLC,MAAAA,IAAI,EAAEJ,MAAM,CAACI,IAHR;AAILC,MAAAA,IAAI,EAAEL,MAAM,CAACM,QAJR;AAKLC,MAAAA,KAAK,EAAEf,YAAY,CAACI,GAAG,CAACY,MAAL,EAAaR,MAAM,CAACO,KAApB;AALd,KAAP;AAOD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiBf,SAAjB","sourcesContent":["const url = require(\"url\");\nconst { mergeObjects, isAbsoluteURL, URLJoin } = require(\"./utils/utils.js\");\n\n// Joins two URLs Cleanly, respecting any queries that appears in both base url\n// path and the request query object.\nfunction cleanJoin(req) {\n  if(!isAbsoluteURL(req.url) && req.baseURL) {\n    const parsedBase = url.parse(req.baseURL, true);\n    const parsed = url.parse(req.url, true);\n    return {\n      protocol: parsedBase.protocol,\n      host: parsedBase.hostname,\n      port: parsedBase.port,\n      path: URLJoin(parsedBase.pathname, parsed.pathname),\n      query: mergeObjects(req._query, parsedBase.query, parsed.query)\n    };\n  } else {\n    const parsed = url.parse(req.url, true);\n    return {\n      protocol: parsed.protocol,\n      host: parsed.hostname,\n      port: parsed.port,\n      path: parsed.pathname,\n      query: mergeObjects(req._query, parsed.query)\n    };\n  }\n}\n\nmodule.exports = cleanJoin;\n"]},"metadata":{},"sourceType":"script"}