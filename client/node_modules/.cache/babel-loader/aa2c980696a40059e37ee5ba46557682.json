{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n}), exports.parseCoordinates = parseCoordinates;\n\nfunction parseCoordinates(a) {\n  return a.coordinates ? parseInfoboxCoords(a.coordinates) : a.latd && a.longd ? parseDeprecatedCoords(a) : {\n    lat: null,\n    lon: null,\n    error: 'No coordinates on page.'\n  };\n}\n\nfunction parseDeprecatedCoords(a) {\n  var b = dmsToDecimal(floatOrDefault(a.latd), floatOrDefault(a.latm), floatOrDefault(a.lats), a.latNs),\n      c = dmsToDecimal(floatOrDefault(a.longd), floatOrDefault(a.longm), floatOrDefault(a.longs), a.longEw);\n  return wikiCoordinates(b, c);\n}\n\nvar infoboxCoordinatePattern = /(\\d{1,2})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])\\|(\\d{1,3})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])/;\n\nfunction parseInfoboxCoords(a) {\n  var b, c, d;\n  return b = a.match(infoboxCoordinatePattern), c = convertCoordinatesFromStrings(b.slice(0, 4)), d = convertCoordinatesFromStrings(b.slice(4)), wikiCoordinates(c, d);\n}\n\nfunction convertCoordinatesFromStrings(a) {\n  return dmsToDecimal(floatOrDefault(a[1]), floatOrDefault(a[2]), floatOrDefault(a[3]), a[4]);\n}\n\nvar directions = {\n  N: 1,\n  S: -1,\n  E: 1,\n  W: -1\n};\n\nfunction dmsToDecimal(a, b, c, d) {\n  return (a + 1 / 60 * b + 1 / 3600 * c) * (directions[d] || 1);\n}\n\nfunction wikiCoordinates(a, b) {\n  return {\n    lat: +a.toFixed(4),\n    lon: +b.toFixed(4)\n  };\n}\n\nfunction floatOrDefault(a) {\n  var b = +a;\n  return isNaN(b) ? 0 : b;\n}","map":{"version":3,"sources":["../src/coordinates.js"],"names":["parseCoordinates","infoboxData","parseInfoboxCoords","parseDeprecatedCoords","lat","lon","error","dmsToDecimal","floatOrDefault","data","wikiCoordinates","infoboxCoordinatePattern","coord","convertCoordinatesFromStrings","matches","directions","N","S","E","W","degrees","latitude","longitude","isNaN","num"],"mappings":"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","sourcesContent":["/**\n * @ignore\n * @description Parses Coordinates for pages where the default Wiki Infobox Parser fails.\n * @param  {Object} infoboxData - raw data object from Wiki Infobox Parser\n * @returns {Object} - formatted object containing coordinates, or null object if none.\n */\nexport function parseCoordinates(infoboxData) {\n\tif (infoboxData.coordinates) {\n\t\treturn parseInfoboxCoords(infoboxData.coordinates);\n\t}\n\tif (infoboxData.latd && infoboxData.longd) {\n\t\treturn parseDeprecatedCoords(infoboxData);\n\t}\n\treturn {\n\t\tlat: null,\n\t\tlon: null,\n\t\terror: 'No coordinates on page.'\n\t};\n}\n\n/**\n * @ignore\n * @description Parses coordinates which are in Wikipedia Deprecated Format.\n * @example\n * parseDeprecatedCoords('00 |latm=47 |lats=59 |latNS=S','100 |longm=39 |longs=58 |longEW=E');\n * @param  {String} latString - Deprecated coordinate string for latitutde (from latd property)\n * @param  {String} lonString - Deprecated coordinate string for longitude (from longd property)\n * @returns {Object} - Wiki formatted object containing lat and lon\n */\nfunction parseDeprecatedCoords(data) {\n\tconst latitude = dmsToDecimal(\n\t\tfloatOrDefault(data.latd),\n\t\tfloatOrDefault(data.latm),\n\t\tfloatOrDefault(data.lats),\n\t\tdata.latNs\n\t);\n\tconst longitude = dmsToDecimal(\n\t\tfloatOrDefault(data.longd),\n\t\tfloatOrDefault(data.longm),\n\t\tfloatOrDefault(data.longs),\n\t\tdata.longEw\n\t);\n\treturn wikiCoordinates(latitude, longitude);\n}\n\n// regex to match coordinate string in infobox\nconst infoboxCoordinatePattern = /(\\d{1,2})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])\\|(\\d{1,3})\\|(\\d{1,2})\\|(\\d{1,2})?\\|?([NSEW])/;\n\n/**\n * @ignore\n * @description Parses coordinates which are embedded in infobox instead of in the page.\n * @example\n * parseInfoboxCoord('{{coord|38|54|N|16|36|E|type:region:IT_type:city(94969)|display=inline}}')\n * @param  {String} coord - coordinate string from infobox.\n * @return {Object} - Wiki formatted object containing lat and lon\n */\nfunction parseInfoboxCoords(coord) {\n\tlet matches, latitude, longitude;\n\tmatches = coord.match(infoboxCoordinatePattern);\n\tlatitude = convertCoordinatesFromStrings(matches.slice(0, 4));\n\tlongitude = convertCoordinatesFromStrings(matches.slice(4));\n\treturn wikiCoordinates(latitude, longitude);\n}\n\n/**\n * @ignore\n * @description Converts coordinates after they've been separated into components by regex matching.\n * Missing or undefined elements in array will be treated as 0. Missing direction will\n * result in positive coordinate.\n * @example\n * convertCoordinatesFromStrings(['38','54','23','N'])\n * @param {Array} matches - array in format ['degrees','minutes','seconds','direction']\n * @returns {Number} - coordinate in decimal form, with proper positive / negative sign applied.\n */\nfunction convertCoordinatesFromStrings(matches) {\n\treturn dmsToDecimal(\n\t\tfloatOrDefault(matches[1]),\n\t\tfloatOrDefault(matches[2]),\n\t\tfloatOrDefault(matches[3]),\n\t\tmatches[4]\n\t);\n}\n\n// simplifies positive / negative calculation in decimal conversion\nconst directions = { N: 1, S: -1, E: 1, W: -1 };\n\n/**\n * @ignore\n * @description Converts coordinates from degrees, minutes, seconds, direction to decimal.\n * @example\n * dmsToDecimal(100,39,58,'W') == -100.6661111\n * @returns {Number} - coordinate in decimal form, with proper positive / negative sign applied.\n */\nfunction dmsToDecimal(degrees, minutes, seconds, direction) {\n\treturn (\n\t\t(degrees + (1 / 60) * minutes + (1 / 3600) * seconds) *\n\t\t(directions[direction] || 1)\n\t);\n}\n\n/**\n * @ignore\n * @description Returns latitude and longitude in format Wikipedia Parser would do so.\n * Rounds to 4 decimal places.\n * @param  {Number} latitude - latitude in decimal form\n * @param  {Number} longitude - longitude in decimal form\n * @returns {Object} - {lat: latitude, lon: longitude}\n */\nfunction wikiCoordinates(latitude, longitude) {\n\treturn {\n\t\tlat: Number(latitude.toFixed(4)),\n\t\tlon: Number(longitude.toFixed(4))\n\t};\n}\n\n/**\n * @ignore\n * @description Convert numeric string to Number or return 0 if not possible\n * @example\n * floatOrDefault(\"5\") == 5; floatOrDefault(undefined) == 0;\n * @param  {String} numStr - input number string (or undefined)\n * @returns {Number} - returns numStr converted to Number or 0 if NaN\n */\nfunction floatOrDefault(numStr) {\n\tconst num = Number(numStr);\n\treturn !isNaN(num) ? num : 0;\n}\n"]},"metadata":{},"sourceType":"script"}