{"ast":null,"code":"'use strict';\n\nfunction compare(v1, v2) {\n  v1 = v1 + '';\n  v2 = v2 + '';\n  var flag1 = v1.indexOf('-') > -1;\n  var flag2 = v2.indexOf('-') > -1;\n  var arr1 = split(flag1, v1);\n  var arr2 = split(flag2, v2);\n  arr1 = convertToNumber(arr1);\n  arr2 = convertToNumber(arr2);\n  var len = Math.max(arr1.length, arr2.length);\n\n  for (var i = 0; i < len; i++) {\n    // 1.0.0 > 1.0.0-beta.2\n    if (i === 3 && (arr1[i] === undefined || arr2[i] === undefined)) {\n      if (arr1[i] === undefined && isNaN(arr2[i])) {\n        return 1;\n      } else {\n        if (isNaN(arr1[i]) && arr2[i] === undefined) {\n          return -1;\n        }\n      }\n    }\n\n    if (arr1[i] === undefined) {\n      return -1;\n    } else {\n      if (arr2[i] === undefined) {\n        return 1;\n      }\n    }\n\n    if (arr1[i] > arr2[i]) {\n      return 1;\n    } else {\n      if (arr1[i] < arr2[i]) {\n        return -1;\n      }\n    }\n  }\n\n  return 0;\n}\n\nfunction split(flag, version) {\n  version = version + '';\n  var result = [];\n\n  if (flag) {\n    var tail = version.split('-')[1];\n    var _version = version.split('-')[0];\n    result = _version.split('.');\n    tail = tail.split('.');\n    result = result.concat(tail);\n  } else {\n    result = version.split('.');\n  }\n\n  return result;\n}\n\nfunction convertToNumber(arr) {\n  return arr.map(function (el) {\n    return isNaN(el) ? el : parseInt(el);\n  });\n}\n\nmodule.exports = compare;","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/node-version-compare/index.js"],"names":["compare","v1","v2","flag1","indexOf","flag2","arr1","split","arr2","convertToNumber","len","Math","max","length","i","undefined","isNaN","flag","version","result","tail","_version","concat","arr","map","el","parseInt","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nfunction compare(v1, v2) {\n  v1 = v1 + '';\n  v2 = v2 + '';\n\n  var flag1 = v1.indexOf('-') > -1;\n  var flag2 = v2.indexOf('-') > -1;\n  var arr1 = split(flag1, v1);\n  var arr2 = split(flag2, v2);\n  arr1 = convertToNumber(arr1);\n  arr2 = convertToNumber(arr2);\n  var len = Math.max(arr1.length, arr2.length);\n  for (var i = 0; i < len; i++) {\n    // 1.0.0 > 1.0.0-beta.2\n    if (i === 3 && (arr1[i] === undefined || arr2[i] === undefined)) {\n      if (arr1[i] === undefined && isNaN(arr2[i])) {\n        return 1;\n      } else {\n        if (isNaN(arr1[i]) && arr2[i] === undefined) {\n          return -1;\n        }\n      }\n    }\n    if (arr1[i] === undefined) {\n      return -1;\n    } else {\n      if (arr2[i] === undefined) {\n        return 1;\n      }\n    }\n    if (arr1[i] > arr2[i]) {\n      return 1;\n    } else {\n      if (arr1[i] < arr2[i]) {\n        return -1;\n      }\n    }\n  }\n  return 0;\n}\n\nfunction split(flag, version) {\n  version = version + '';\n\n  var result = [];\n  if (flag) {\n    var tail = version.split('-')[1];\n    var _version = version.split('-')[0];\n    result = _version.split('.');\n    tail = tail.split('.');\n    result = result.concat(tail);\n  } else {\n    result = version.split('.');\n  }\n  return result;\n}\n\nfunction convertToNumber(arr) {\n  return arr.map(function (el) {\n    return isNaN(el) ? el : parseInt(el);\n  });\n}\n\nmodule.exports = compare;\n"]},"metadata":{},"sourceType":"script"}