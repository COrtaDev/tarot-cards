{"ast":null,"code":"'use strict';\n\nvar name = require('fn.name');\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents multiple executions.\n * @public\n */\n\n\nmodule.exports = function one(fn) {\n  var called = 0,\n      value;\n  /**\n   * The function that prevents double execution.\n   *\n   * @private\n   */\n\n  function onetime() {\n    if (called) return value;\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n    return value;\n  } //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  // NOTE: We cannot override the `name` property, as that is `readOnly`\n  // property, so displayName will have to do.\n  //\n\n\n  onetime.displayName = name(fn);\n  return onetime;\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/one-time/index.js"],"names":["name","require","module","exports","one","fn","called","value","onetime","apply","arguments","displayName"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,GAAT,CAAaC,EAAb,EAAiB;AAChC,MAAIC,MAAM,GAAG,CAAb;AAAA,MACIC,KADJ;AAGA;AACF;AACA;AACA;AACA;;AACE,WAASC,OAAT,GAAmB;AACjB,QAAIF,MAAJ,EAAY,OAAOC,KAAP;AAEZD,IAAAA,MAAM,GAAG,CAAT;AACAC,IAAAA,KAAK,GAAGF,EAAE,CAACI,KAAH,CAAS,IAAT,EAAeC,SAAf,CAAR;AACAL,IAAAA,EAAE,GAAG,IAAL;AAEA,WAAOE,KAAP;AACD,GAjB+B,CAmBhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAC,EAAAA,OAAO,CAACG,WAAR,GAAsBX,IAAI,CAACK,EAAD,CAA1B;AACA,SAAOG,OAAP;AACD,CA9BD","sourcesContent":["'use strict';\n\nvar name = require('fn.name');\n\n/**\n * Wrap callbacks to prevent double execution.\n *\n * @param {Function} fn Function that should only be called once.\n * @returns {Function} A wrapped callback which prevents multiple executions.\n * @public\n */\nmodule.exports = function one(fn) {\n  var called = 0\n    , value;\n\n  /**\n   * The function that prevents double execution.\n   *\n   * @private\n   */\n  function onetime() {\n    if (called) return value;\n\n    called = 1;\n    value = fn.apply(this, arguments);\n    fn = null;\n\n    return value;\n  }\n\n  //\n  // To make debugging more easy we want to use the name of the supplied\n  // function. So when you look at the functions that are assigned to event\n  // listeners you don't see a load of `onetime` functions but actually the\n  // names of the functions that this module will call.\n  //\n  // NOTE: We cannot override the `name` property, as that is `readOnly`\n  // property, so displayName will have to do.\n  //\n  onetime.displayName = name(fn);\n  return onetime;\n};\n"]},"metadata":{},"sourceType":"script"}