{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Writable = require('readable-stream/writable');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL;\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\n\n\nvar TransportStream = module.exports = function TransportStream() {\n  var _this = this;\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Writable.call(this, {\n    objectMode: true,\n    highWaterMark: options.highWaterMark\n  });\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close; // Get the levels from the source we are piped from.\n\n  this.once('pipe', function (logger) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    _this.levels = logger.levels;\n    _this.parent = logger;\n  }); // If and/or when the transport is removed from this instance\n\n  this.once('unpipe', function (src) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === _this.parent) {\n      _this.parent = null;\n\n      if (_this.close) {\n        _this.close();\n      }\n    }\n  });\n};\n/*\n * Inherit from Writeable using Node.js built-ins\n */\n\n\nutil.inherits(TransportStream, Writable);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\n\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  } // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n\n\n  var level = this.level || this.parent && this.parent.level;\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    var errState = void 0;\n    var transformed = void 0; // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n\n  return callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\n\n\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    var infos = chunks.filter(this._accept, this);\n\n    if (!infos.length) {\n      return callback(null);\n    } // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n\n\n    return this.logv(infos, callback);\n  }\n\n  for (var i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    var errState = void 0;\n    var transformed = void 0; // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n    try {\n      transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\n\n\nTransportStream.prototype._accept = function _accept(write) {\n  var info = write.chunk;\n\n  if (this.silent) {\n    return false;\n  } // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n\n\n  var level = this.level || this.parent && this.parent.level; // Immediately check the average case: log level filtering.\n\n  if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\n\n\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n}; // Expose legacy stream\n\n\nmodule.exports.LegacyTransportStream = require('./legacy');","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/winston-transport/dist/index.js"],"names":["util","require","Writable","_require","LEVEL","TransportStream","module","exports","_this","options","arguments","length","undefined","call","objectMode","highWaterMark","format","level","handleExceptions","handleRejections","silent","log","logv","close","once","logger","levels","parent","src","inherits","prototype","_write","info","enc","callback","exception","errState","transformed","transform","Object","assign","err","_writev","chunks","infos","filter","_accept","i","chunk","write","_nop","LegacyTransportStream"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('util');\nvar Writable = require('readable-stream/writable');\n\nvar _require = require('triple-beam'),\n    LEVEL = _require.LEVEL;\n\n/**\n * Constructor function for the TransportStream. This is the base prototype\n * that all `winston >= 3` transports should inherit from.\n * @param {Object} options - Options for this TransportStream instance\n * @param {String} options.level - Highest level according to RFC5424.\n * @param {Boolean} options.handleExceptions - If true, info with\n * { exception: true } will be written.\n * @param {Function} options.log - Custom log function for simple Transport\n * creation\n * @param {Function} options.close - Called on \"unpipe\" from parent.\n */\n\n\nvar TransportStream = module.exports = function TransportStream() {\n  var _this = this;\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  Writable.call(this, { objectMode: true, highWaterMark: options.highWaterMark });\n\n  this.format = options.format;\n  this.level = options.level;\n  this.handleExceptions = options.handleExceptions;\n  this.handleRejections = options.handleRejections;\n  this.silent = options.silent;\n\n  if (options.log) this.log = options.log;\n  if (options.logv) this.logv = options.logv;\n  if (options.close) this.close = options.close;\n\n  // Get the levels from the source we are piped from.\n  this.once('pipe', function (logger) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    _this.levels = logger.levels;\n    _this.parent = logger;\n  });\n\n  // If and/or when the transport is removed from this instance\n  this.once('unpipe', function (src) {\n    // Remark (indexzero): this bookkeeping can only support multiple\n    // Logger parents with the same `levels`. This comes into play in\n    // the `winston.Container` code in which `container.add` takes\n    // a fully realized set of options with pre-constructed TransportStreams.\n    if (src === _this.parent) {\n      _this.parent = null;\n      if (_this.close) {\n        _this.close();\n      }\n    }\n  });\n};\n\n/*\n * Inherit from Writeable using Node.js built-ins\n */\nutil.inherits(TransportStream, Writable);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream. We always\n  // prefer any explicit level set on the Transport itself falling back to\n  // any level set on the parent.\n  var level = this.level || this.parent && this.parent.level;\n\n  if (!level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    if (info && !this.format) {\n      return this.log(info, callback);\n    }\n\n    var errState = void 0;\n    var transformed = void 0;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, info), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      callback();\n      if (errState) throw errState;\n      return;\n    }\n\n    return this.log(transformed, callback);\n  }\n\n  return callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nTransportStream.prototype._writev = function _writev(chunks, callback) {\n  if (this.logv) {\n    var infos = chunks.filter(this._accept, this);\n    if (!infos.length) {\n      return callback(null);\n    }\n\n    // Remark (indexzero): from a performance perspective if Transport\n    // implementers do choose to implement logv should we make it their\n    // responsibility to invoke their format?\n    return this.logv(infos, callback);\n  }\n\n  for (var i = 0; i < chunks.length; i++) {\n    if (!this._accept(chunks[i])) continue;\n\n    if (chunks[i].chunk && !this.format) {\n      this.log(chunks[i].chunk, chunks[i].callback);\n      continue;\n    }\n\n    var errState = void 0;\n    var transformed = void 0;\n\n    // We trap(and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);\n    } catch (err) {\n      errState = err;\n    }\n\n    if (errState || !transformed) {\n      // eslint-disable-next-line callback-return\n      chunks[i].callback();\n      if (errState) {\n        // eslint-disable-next-line callback-return\n        callback(null);\n        throw errState;\n      }\n    } else {\n      this.log(transformed, chunks[i].callback);\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Predicate function that returns true if the specfied `info` on the\n * WriteReq, `write`, should be passed down into the derived\n * TransportStream's I/O via `.log(info, callback)`.\n * @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object\n * representing the log message.\n * @returns {Boolean} - Value indicating if the `write` should be accepted &\n * logged.\n */\nTransportStream.prototype._accept = function _accept(write) {\n  var info = write.chunk;\n  if (this.silent) {\n    return false;\n  }\n\n  // We always prefer any explicit level set on the Transport itself\n  // falling back to any level set on the parent.\n  var level = this.level || this.parent && this.parent.level;\n\n  // Immediately check the average case: log level filtering.\n  if (info.exception === true || !level || this.levels[level] >= this.levels[info[LEVEL]]) {\n    // Ensure the info object is valid based on `{ exception }`:\n    // 1. { handleExceptions: true }: all `info` objects are valid\n    // 2. { exception: false }: accepted by all transports.\n    if (this.handleExceptions || info.exception !== true) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * _nop is short for \"No operation\"\n * @returns {Boolean} Intentionally false.\n */\nTransportStream.prototype._nop = function _nop() {\n  // eslint-disable-next-line no-undefined\n  return void undefined;\n};\n\n// Expose legacy stream\nmodule.exports.LegacyTransportStream = require('./legacy');"]},"metadata":{},"sourceType":"script"}