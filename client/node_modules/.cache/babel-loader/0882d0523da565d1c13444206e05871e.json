{"ast":null,"code":"var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"[1-9]\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\n\nfunction shorten(arr, sLen) {\n  var newArr = [];\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    newArr.push(arr[i].substr(0, sLen));\n  }\n\n  return newArr;\n}\n\nvar monthUpdate = function (arrName) {\n  return function (v, i18n) {\n    var lowerCaseArr = i18n[arrName].map(function (v) {\n      return v.toLowerCase();\n    });\n    var index = lowerCaseArr.indexOf(v.toLowerCase());\n\n    if (index > -1) {\n      return index;\n    }\n\n    return null;\n  };\n};\n\nfunction assign(origObj) {\n  var args = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n\n  for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n    var obj = args_1[_a];\n\n    for (var key in obj) {\n      // @ts-ignore ex\n      origObj[key] = obj[key];\n    }\n  }\n\n  return origObj;\n}\n\nvar dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nvar monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n  dayNamesShort: dayNamesShort,\n  dayNames: dayNames,\n  monthNamesShort: monthNamesShort,\n  monthNames: monthNames,\n  amPm: [\"am\", \"pm\"],\n  DoFn: function (dayOfMonth) {\n    return dayOfMonth + [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];\n  }\n};\nvar globalI18n = assign({}, defaultI18n);\n\nvar setGlobalDateI18n = function (i18n) {\n  return globalI18n = assign(globalI18n, i18n);\n};\n\nvar regexEscape = function (str) {\n  return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\n\nvar pad = function (val, len) {\n  if (len === void 0) {\n    len = 2;\n  }\n\n  val = String(val);\n\n  while (val.length < len) {\n    val = \"0\" + val;\n  }\n\n  return val;\n};\n\nvar formatFlags = {\n  D: function (dateObj) {\n    return String(dateObj.getDate());\n  },\n  DD: function (dateObj) {\n    return pad(dateObj.getDate());\n  },\n  Do: function (dateObj, i18n) {\n    return i18n.DoFn(dateObj.getDate());\n  },\n  d: function (dateObj) {\n    return String(dateObj.getDay());\n  },\n  dd: function (dateObj) {\n    return pad(dateObj.getDay());\n  },\n  ddd: function (dateObj, i18n) {\n    return i18n.dayNamesShort[dateObj.getDay()];\n  },\n  dddd: function (dateObj, i18n) {\n    return i18n.dayNames[dateObj.getDay()];\n  },\n  M: function (dateObj) {\n    return String(dateObj.getMonth() + 1);\n  },\n  MM: function (dateObj) {\n    return pad(dateObj.getMonth() + 1);\n  },\n  MMM: function (dateObj, i18n) {\n    return i18n.monthNamesShort[dateObj.getMonth()];\n  },\n  MMMM: function (dateObj, i18n) {\n    return i18n.monthNames[dateObj.getMonth()];\n  },\n  YY: function (dateObj) {\n    return pad(String(dateObj.getFullYear()), 4).substr(2);\n  },\n  YYYY: function (dateObj) {\n    return pad(dateObj.getFullYear(), 4);\n  },\n  h: function (dateObj) {\n    return String(dateObj.getHours() % 12 || 12);\n  },\n  hh: function (dateObj) {\n    return pad(dateObj.getHours() % 12 || 12);\n  },\n  H: function (dateObj) {\n    return String(dateObj.getHours());\n  },\n  HH: function (dateObj) {\n    return pad(dateObj.getHours());\n  },\n  m: function (dateObj) {\n    return String(dateObj.getMinutes());\n  },\n  mm: function (dateObj) {\n    return pad(dateObj.getMinutes());\n  },\n  s: function (dateObj) {\n    return String(dateObj.getSeconds());\n  },\n  ss: function (dateObj) {\n    return pad(dateObj.getSeconds());\n  },\n  S: function (dateObj) {\n    return String(Math.round(dateObj.getMilliseconds() / 100));\n  },\n  SS: function (dateObj) {\n    return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n  },\n  SSS: function (dateObj) {\n    return pad(dateObj.getMilliseconds(), 3);\n  },\n  a: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n  },\n  A: function (dateObj, i18n) {\n    return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();\n  },\n  ZZ: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);\n  },\n  Z: function (dateObj) {\n    var offset = dateObj.getTimezoneOffset();\n    return (offset > 0 ? \"-\" : \"+\") + pad(Math.floor(Math.abs(offset) / 60), 2) + \":\" + pad(Math.abs(offset) % 60, 2);\n  }\n};\n\nvar monthParse = function (v) {\n  return +v - 1;\n};\n\nvar emptyDigits = [null, twoDigitsOptional];\nvar emptyWord = [null, word];\nvar amPm = [\"isPm\", word, function (v, i18n) {\n  var val = v.toLowerCase();\n\n  if (val === i18n.amPm[0]) {\n    return 0;\n  } else if (val === i18n.amPm[1]) {\n    return 1;\n  }\n\n  return null;\n}];\nvar timezoneOffset = [\"timezoneOffset\", \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\", function (v) {\n  var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n\n  if (parts) {\n    var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n    return parts[0] === \"+\" ? minutes : -minutes;\n  }\n\n  return 0;\n}];\nvar parseFlags = {\n  D: [\"day\", twoDigitsOptional],\n  DD: [\"day\", twoDigits],\n  Do: [\"day\", twoDigitsOptional + word, function (v) {\n    return parseInt(v, 10);\n  }],\n  M: [\"month\", twoDigitsOptional, monthParse],\n  MM: [\"month\", twoDigits, monthParse],\n  YY: [\"year\", twoDigits, function (v) {\n    var now = new Date();\n    var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n    return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n  }],\n  h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n  hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n  H: [\"hour\", twoDigitsOptional],\n  HH: [\"hour\", twoDigits],\n  m: [\"minute\", twoDigitsOptional],\n  mm: [\"minute\", twoDigits],\n  s: [\"second\", twoDigitsOptional],\n  ss: [\"second\", twoDigits],\n  YYYY: [\"year\", fourDigits],\n  S: [\"millisecond\", \"\\\\d\", function (v) {\n    return +v * 100;\n  }],\n  SS: [\"millisecond\", twoDigits, function (v) {\n    return +v * 10;\n  }],\n  SSS: [\"millisecond\", threeDigits],\n  d: emptyDigits,\n  dd: emptyDigits,\n  ddd: emptyWord,\n  dddd: emptyWord,\n  MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n  MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n  a: amPm,\n  A: amPm,\n  ZZ: timezoneOffset,\n  Z: timezoneOffset\n}; // Some common format strings\n\nvar globalMasks = {\n  default: \"ddd MMM DD YYYY HH:mm:ss\",\n  shortDate: \"M/D/YY\",\n  mediumDate: \"MMM D, YYYY\",\n  longDate: \"MMMM D, YYYY\",\n  fullDate: \"dddd, MMMM D, YYYY\",\n  isoDate: \"YYYY-MM-DD\",\n  isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n  shortTime: \"HH:mm\",\n  mediumTime: \"HH:mm:ss\",\n  longTime: \"HH:mm:ss.SSS\"\n};\n\nvar setGlobalDateMasks = function (masks) {\n  return assign(globalMasks, masks);\n};\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\n\n\nvar format = function (dateObj, mask, i18n) {\n  if (mask === void 0) {\n    mask = globalMasks[\"default\"];\n  }\n\n  if (i18n === void 0) {\n    i18n = {};\n  }\n\n  if (typeof dateObj === \"number\") {\n    dateObj = new Date(dateObj);\n  }\n\n  if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" || isNaN(dateObj.getTime())) {\n    throw new Error(\"Invalid Date pass to format\");\n  }\n\n  mask = globalMasks[mask] || mask;\n  var literals = []; // Make literals inactive by replacing them with @@@\n\n  mask = mask.replace(literal, function ($0, $1) {\n    literals.push($1);\n    return \"@@@\";\n  });\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n); // Apply formatting rules\n\n  mask = mask.replace(token, function ($0) {\n    return formatFlags[$0](dateObj, combinedI18nSettings);\n  }); // Inline literal values back into the formatted value\n\n  return mask.replace(/@@@/g, function () {\n    return literals.shift();\n  });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\n\n\nfunction parse(dateStr, format, i18n) {\n  if (i18n === void 0) {\n    i18n = {};\n  }\n\n  if (typeof format !== \"string\") {\n    throw new Error(\"Invalid format in fecha parse\");\n  } // Check to see if the format is actually a mask\n\n\n  format = globalMasks[format] || format; // Avoid regular expression denial of service, fail early for really long strings\n  // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n\n  if (dateStr.length > 1000) {\n    return null;\n  } // Default to the beginning of the year.\n\n\n  var today = new Date();\n  var dateInfo = {\n    year: today.getFullYear(),\n    month: 0,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0,\n    isPm: null,\n    timezoneOffset: null\n  };\n  var parseInfo = [];\n  var literals = []; // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n\n  var newFormat = format.replace(literal, function ($0, $1) {\n    literals.push(regexEscape($1));\n    return \"@@@\";\n  });\n  var specifiedFields = {};\n  var requiredFields = {}; // Change every token that we find into the correct regex\n\n  newFormat = regexEscape(newFormat).replace(token, function ($0) {\n    var info = parseFlags[$0];\n    var field = info[0],\n        regex = info[1],\n        requiredField = info[3]; // Check if the person has specified the same field twice. This will lead to confusing results.\n\n    if (specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n    }\n\n    specifiedFields[field] = true; // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n\n    if (requiredField) {\n      requiredFields[requiredField] = true;\n    }\n\n    parseInfo.push(info);\n    return \"(\" + regex + \")\";\n  }); // Check all the required fields are present\n\n  Object.keys(requiredFields).forEach(function (field) {\n    if (!specifiedFields[field]) {\n      throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n    }\n  }); // Add back all the literals after\n\n  newFormat = newFormat.replace(/@@@/g, function () {\n    return literals.shift();\n  }); // Check if the date string matches the format. If it doesn't return null\n\n  var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n\n  if (!matches) {\n    return null;\n  }\n\n  var combinedI18nSettings = assign(assign({}, globalI18n), i18n); // For each match, call the parser function for that date part\n\n  for (var i = 1; i < matches.length; i++) {\n    var _a = parseInfo[i - 1],\n        field = _a[0],\n        parser = _a[2];\n    var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i]; // If the parser can't make sense of the value, return null\n\n    if (value == null) {\n      return null;\n    }\n\n    dateInfo[field] = value;\n  }\n\n  if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n    dateInfo.hour = +dateInfo.hour + 12;\n  } else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n    dateInfo.hour = 0;\n  }\n\n  var dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n  var validateFields = [[\"month\", \"getMonth\"], [\"day\", \"getDate\"], [\"hour\", \"getHours\"], [\"minute\", \"getMinutes\"], [\"second\", \"getSeconds\"]];\n\n  for (var i = 0, len = validateFields.length; i < len; i++) {\n    // Check to make sure the date field is within the allowed range. Javascript dates allows values\n    // outside the allowed range. If the values don't match the value was invalid\n    if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n      return null;\n    }\n  }\n\n  if (dateInfo.timezoneOffset == null) {\n    return dateWithoutTZ;\n  }\n\n  return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\n\nvar fecha = {\n  format: format,\n  parse: parse,\n  defaultI18n: defaultI18n,\n  setGlobalDateI18n: setGlobalDateI18n,\n  setGlobalDateMasks: setGlobalDateMasks\n};\nexport default fecha;\nexport { assign, format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/fecha/lib/fecha.js"],"names":["token","twoDigitsOptional","twoDigits","threeDigits","fourDigits","word","literal","shorten","arr","sLen","newArr","i","len","length","push","substr","monthUpdate","arrName","v","i18n","lowerCaseArr","map","toLowerCase","index","indexOf","assign","origObj","args","_i","arguments","_a","args_1","obj","key","dayNames","monthNames","monthNamesShort","dayNamesShort","defaultI18n","amPm","DoFn","dayOfMonth","globalI18n","setGlobalDateI18n","regexEscape","str","replace","pad","val","String","formatFlags","D","dateObj","getDate","DD","Do","d","getDay","dd","ddd","dddd","M","getMonth","MM","MMM","MMMM","YY","getFullYear","YYYY","h","getHours","hh","H","HH","m","getMinutes","mm","s","getSeconds","ss","S","Math","round","getMilliseconds","SS","SSS","a","A","toUpperCase","ZZ","offset","getTimezoneOffset","floor","abs","Z","monthParse","emptyDigits","emptyWord","timezoneOffset","parts","match","minutes","parseInt","parseFlags","now","Date","cent","undefined","globalMasks","default","shortDate","mediumDate","longDate","fullDate","isoDate","isoDateTime","shortTime","mediumTime","longTime","setGlobalDateMasks","masks","format","mask","Object","prototype","toString","call","isNaN","getTime","Error","literals","$0","$1","combinedI18nSettings","shift","parse","dateStr","today","dateInfo","year","month","day","hour","minute","second","millisecond","isPm","parseInfo","newFormat","specifiedFields","requiredFields","info","field","regex","requiredField","keys","forEach","matches","RegExp","parser","value","dateWithoutTZ","validateFields","UTC","fecha"],"mappings":"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","sourcesContent":["var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"[1-9]\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n    var newArr = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        newArr.push(arr[i].substr(0, sLen));\n    }\n    return newArr;\n}\nvar monthUpdate = function (arrName) { return function (v, i18n) {\n    var lowerCaseArr = i18n[arrName].map(function (v) { return v.toLowerCase(); });\n    var index = lowerCaseArr.indexOf(v.toLowerCase());\n    if (index > -1) {\n        return index;\n    }\n    return null;\n}; };\nfunction assign(origObj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var obj = args_1[_a];\n        for (var key in obj) {\n            // @ts-ignore ex\n            origObj[key] = obj[key];\n        }\n    }\n    return origObj;\n}\nvar dayNames = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n];\nvar monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n    dayNamesShort: dayNamesShort,\n    dayNames: dayNames,\n    monthNamesShort: monthNamesShort,\n    monthNames: monthNames,\n    amPm: [\"am\", \"pm\"],\n    DoFn: function (dayOfMonth) {\n        return (dayOfMonth +\n            [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3\n                ? 0\n                : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10]);\n    }\n};\nvar globalI18n = assign({}, defaultI18n);\nvar setGlobalDateI18n = function (i18n) {\n    return (globalI18n = assign(globalI18n, i18n));\n};\nvar regexEscape = function (str) {\n    return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\nvar pad = function (val, len) {\n    if (len === void 0) { len = 2; }\n    val = String(val);\n    while (val.length < len) {\n        val = \"0\" + val;\n    }\n    return val;\n};\nvar formatFlags = {\n    D: function (dateObj) { return String(dateObj.getDate()); },\n    DD: function (dateObj) { return pad(dateObj.getDate()); },\n    Do: function (dateObj, i18n) {\n        return i18n.DoFn(dateObj.getDate());\n    },\n    d: function (dateObj) { return String(dateObj.getDay()); },\n    dd: function (dateObj) { return pad(dateObj.getDay()); },\n    ddd: function (dateObj, i18n) {\n        return i18n.dayNamesShort[dateObj.getDay()];\n    },\n    dddd: function (dateObj, i18n) {\n        return i18n.dayNames[dateObj.getDay()];\n    },\n    M: function (dateObj) { return String(dateObj.getMonth() + 1); },\n    MM: function (dateObj) { return pad(dateObj.getMonth() + 1); },\n    MMM: function (dateObj, i18n) {\n        return i18n.monthNamesShort[dateObj.getMonth()];\n    },\n    MMMM: function (dateObj, i18n) {\n        return i18n.monthNames[dateObj.getMonth()];\n    },\n    YY: function (dateObj) {\n        return pad(String(dateObj.getFullYear()), 4).substr(2);\n    },\n    YYYY: function (dateObj) { return pad(dateObj.getFullYear(), 4); },\n    h: function (dateObj) { return String(dateObj.getHours() % 12 || 12); },\n    hh: function (dateObj) { return pad(dateObj.getHours() % 12 || 12); },\n    H: function (dateObj) { return String(dateObj.getHours()); },\n    HH: function (dateObj) { return pad(dateObj.getHours()); },\n    m: function (dateObj) { return String(dateObj.getMinutes()); },\n    mm: function (dateObj) { return pad(dateObj.getMinutes()); },\n    s: function (dateObj) { return String(dateObj.getSeconds()); },\n    ss: function (dateObj) { return pad(dateObj.getSeconds()); },\n    S: function (dateObj) {\n        return String(Math.round(dateObj.getMilliseconds() / 100));\n    },\n    SS: function (dateObj) {\n        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n    },\n    SSS: function (dateObj) { return pad(dateObj.getMilliseconds(), 3); },\n    a: function (dateObj, i18n) {\n        return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n    },\n    A: function (dateObj, i18n) {\n        return dateObj.getHours() < 12\n            ? i18n.amPm[0].toUpperCase()\n            : i18n.amPm[1].toUpperCase();\n    },\n    ZZ: function (dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4));\n    },\n    Z: function (dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60), 2) +\n            \":\" +\n            pad(Math.abs(offset) % 60, 2));\n    }\n};\nvar monthParse = function (v) { return +v - 1; };\nvar emptyDigits = [null, twoDigitsOptional];\nvar emptyWord = [null, word];\nvar amPm = [\n    \"isPm\",\n    word,\n    function (v, i18n) {\n        var val = v.toLowerCase();\n        if (val === i18n.amPm[0]) {\n            return 0;\n        }\n        else if (val === i18n.amPm[1]) {\n            return 1;\n        }\n        return null;\n    }\n];\nvar timezoneOffset = [\n    \"timezoneOffset\",\n    \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n    function (v) {\n        var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n        if (parts) {\n            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n            return parts[0] === \"+\" ? minutes : -minutes;\n        }\n        return 0;\n    }\n];\nvar parseFlags = {\n    D: [\"day\", twoDigitsOptional],\n    DD: [\"day\", twoDigits],\n    Do: [\"day\", twoDigitsOptional + word, function (v) { return parseInt(v, 10); }],\n    M: [\"month\", twoDigitsOptional, monthParse],\n    MM: [\"month\", twoDigits, monthParse],\n    YY: [\n        \"year\",\n        twoDigits,\n        function (v) {\n            var now = new Date();\n            var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n            return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n        }\n    ],\n    h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n    hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n    H: [\"hour\", twoDigitsOptional],\n    HH: [\"hour\", twoDigits],\n    m: [\"minute\", twoDigitsOptional],\n    mm: [\"minute\", twoDigits],\n    s: [\"second\", twoDigitsOptional],\n    ss: [\"second\", twoDigits],\n    YYYY: [\"year\", fourDigits],\n    S: [\"millisecond\", \"\\\\d\", function (v) { return +v * 100; }],\n    SS: [\"millisecond\", twoDigits, function (v) { return +v * 10; }],\n    SSS: [\"millisecond\", threeDigits],\n    d: emptyDigits,\n    dd: emptyDigits,\n    ddd: emptyWord,\n    dddd: emptyWord,\n    MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n    MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n    a: amPm,\n    A: amPm,\n    ZZ: timezoneOffset,\n    Z: timezoneOffset\n};\n// Some common format strings\nvar globalMasks = {\n    default: \"ddd MMM DD YYYY HH:mm:ss\",\n    shortDate: \"M/D/YY\",\n    mediumDate: \"MMM D, YYYY\",\n    longDate: \"MMMM D, YYYY\",\n    fullDate: \"dddd, MMMM D, YYYY\",\n    isoDate: \"YYYY-MM-DD\",\n    isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n    shortTime: \"HH:mm\",\n    mediumTime: \"HH:mm:ss\",\n    longTime: \"HH:mm:ss.SSS\"\n};\nvar setGlobalDateMasks = function (masks) { return assign(globalMasks, masks); };\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nvar format = function (dateObj, mask, i18n) {\n    if (mask === void 0) { mask = globalMasks[\"default\"]; }\n    if (i18n === void 0) { i18n = {}; }\n    if (typeof dateObj === \"number\") {\n        dateObj = new Date(dateObj);\n    }\n    if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n        isNaN(dateObj.getTime())) {\n        throw new Error(\"Invalid Date pass to format\");\n    }\n    mask = globalMasks[mask] || mask;\n    var literals = [];\n    // Make literals inactive by replacing them with @@@\n    mask = mask.replace(literal, function ($0, $1) {\n        literals.push($1);\n        return \"@@@\";\n    });\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // Apply formatting rules\n    mask = mask.replace(token, function ($0) {\n        return formatFlags[$0](dateObj, combinedI18nSettings);\n    });\n    // Inline literal values back into the formatted value\n    return mask.replace(/@@@/g, function () { return literals.shift(); });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(dateStr, format, i18n) {\n    if (i18n === void 0) { i18n = {}; }\n    if (typeof format !== \"string\") {\n        throw new Error(\"Invalid format in fecha parse\");\n    }\n    // Check to see if the format is actually a mask\n    format = globalMasks[format] || format;\n    // Avoid regular expression denial of service, fail early for really long strings\n    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n    if (dateStr.length > 1000) {\n        return null;\n    }\n    // Default to the beginning of the year.\n    var today = new Date();\n    var dateInfo = {\n        year: today.getFullYear(),\n        month: 0,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        isPm: null,\n        timezoneOffset: null\n    };\n    var parseInfo = [];\n    var literals = [];\n    // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n    var newFormat = format.replace(literal, function ($0, $1) {\n        literals.push(regexEscape($1));\n        return \"@@@\";\n    });\n    var specifiedFields = {};\n    var requiredFields = {};\n    // Change every token that we find into the correct regex\n    newFormat = regexEscape(newFormat).replace(token, function ($0) {\n        var info = parseFlags[$0];\n        var field = info[0], regex = info[1], requiredField = info[3];\n        // Check if the person has specified the same field twice. This will lead to confusing results.\n        if (specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n        }\n        specifiedFields[field] = true;\n        // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n        if (requiredField) {\n            requiredFields[requiredField] = true;\n        }\n        parseInfo.push(info);\n        return \"(\" + regex + \")\";\n    });\n    // Check all the required fields are present\n    Object.keys(requiredFields).forEach(function (field) {\n        if (!specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n        }\n    });\n    // Add back all the literals after\n    newFormat = newFormat.replace(/@@@/g, function () { return literals.shift(); });\n    // Check if the date string matches the format. If it doesn't return null\n    var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n    if (!matches) {\n        return null;\n    }\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // For each match, call the parser function for that date part\n    for (var i = 1; i < matches.length; i++) {\n        var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];\n        var value = parser\n            ? parser(matches[i], combinedI18nSettings)\n            : +matches[i];\n        // If the parser can't make sense of the value, return null\n        if (value == null) {\n            return null;\n        }\n        dateInfo[field] = value;\n    }\n    if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n        dateInfo.hour = +dateInfo.hour + 12;\n    }\n    else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n        dateInfo.hour = 0;\n    }\n    var dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n    var validateFields = [\n        [\"month\", \"getMonth\"],\n        [\"day\", \"getDate\"],\n        [\"hour\", \"getHours\"],\n        [\"minute\", \"getMinutes\"],\n        [\"second\", \"getSeconds\"]\n    ];\n    for (var i = 0, len = validateFields.length; i < len; i++) {\n        // Check to make sure the date field is within the allowed range. Javascript dates allows values\n        // outside the allowed range. If the values don't match the value was invalid\n        if (specifiedFields[validateFields[i][0]] &&\n            dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n            return null;\n        }\n    }\n    if (dateInfo.timezoneOffset == null) {\n        return dateWithoutTZ;\n    }\n    return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\nvar fecha = {\n    format: format,\n    parse: parse,\n    defaultI18n: defaultI18n,\n    setGlobalDateI18n: setGlobalDateI18n,\n    setGlobalDateMasks: setGlobalDateMasks\n};\n\nexport default fecha;\nexport { assign, format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };\n//# sourceMappingURL=fecha.js.map\n"]},"metadata":{},"sourceType":"module"}