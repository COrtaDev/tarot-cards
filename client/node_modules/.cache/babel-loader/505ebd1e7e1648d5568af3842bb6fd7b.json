{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport wiki from 'wikijs';\n\nconst Meaning = props => {\n  _s();\n\n  const [info, setInfo] = useState(null);\n  const [text, setText] = useState([]);\n  useEffect(() => {\n    if (info) {\n      if (!text.length) {\n        handleInfo(info);\n      }\n\n      return;\n    }\n\n    async function getInfo() {\n      const page = await wiki().page(props.search);\n      const content = await page.sections();\n      console.log(content);\n      setInfo(content);\n    }\n\n    ;\n    getInfo();\n  });\n\n  function handleInfo(info) {\n    console.log(info); //this breaks a lot. will need to focus here.\n\n    const text = [];\n\n    for (let i = 0; i < info.length; i++) {\n      console.log(info[i].title.toLowerCase().includes('meanings'));\n\n      if (info[i].title.toLowerCase().includes('meanings')) {\n        text.push(info[i].content);\n      }\n    }\n\n    setText(text);\n  }\n\n  ;\n  console.log(text);\n  const cardText = text.map((text, i) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cardText\n  }, void 0, false);\n};\n\n_s(Meaning, \"JE8kuFOJqsaCKrGboOuhR6vbdrI=\");\n\n_c = Meaning;\nexport default Meaning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meaning\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js"],"names":["React","useState","useEffect","wiki","Meaning","props","info","setInfo","text","setText","length","handleInfo","getInfo","page","search","content","sections","console","log","i","title","toLowerCase","includes","push","cardText","map"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,IAAJ,EAAU;AACN,UAAI,CAACE,IAAI,CAACE,MAAV,EAAkB;AACdC,QAAAA,UAAU,CAACL,IAAD,CAAV;AACH;;AACD;AACH;;AACD,mBAAeM,OAAf,GAAyB;AACrB,YAAMC,IAAI,GAAG,MAAMV,IAAI,GAAGU,IAAP,CAAYR,KAAK,CAACS,MAAlB,CAAnB;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,QAAL,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAR,MAAAA,OAAO,CAACQ,OAAD,CAAP;AACH;;AAAA;AACDH,IAAAA,OAAO;AAEV,GAfQ,CAAT;;AAiBA,WAASD,UAAT,CAAoBL,IAApB,EAA0B;AACtBW,IAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAZ,EADsB,CAEtB;;AACA,UAAME,IAAI,GAAG,EAAb;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,IAAI,CAACI,MAAzB,EAAiCS,CAAC,EAAlC,EAAsC;AAClCF,MAAAA,OAAO,CAACC,GAAR,CAAYZ,IAAI,CAACa,CAAD,CAAJ,CAAQC,KAAR,CAAcC,WAAd,GAA4BC,QAA5B,CAAqC,UAArC,CAAZ;;AACA,UAAIhB,IAAI,CAACa,CAAD,CAAJ,CAAQC,KAAR,CAAcC,WAAd,GAA4BC,QAA5B,CAAqC,UAArC,CAAJ,EAAsD;AAClDd,QAAAA,IAAI,CAACe,IAAL,CAAUjB,IAAI,CAACa,CAAD,CAAJ,CAAQJ,OAAlB;AACH;AAEJ;;AACDN,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH;;AAAA;AACDS,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACA,QAAMgB,QAAQ,GAAGhB,IAAI,CAACiB,GAAL,CAAS,CAACjB,IAAD,EAAMW,CAAN,KAAY;AAClC,wBACI;AAAA,gBACKX;AADL,OAAQW,CAAR;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANgB,CAAjB;AAOA,sBACI;AAAA,cACKK;AADL,mBADJ;AAKH,CA/CD;;GAAMpB,O;;KAAAA,O;AAiDN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState([]);\n\n    useEffect(() => {\n        if (info) {\n            if (!text.length) {\n                handleInfo(info);\n            }\n            return;\n        }\n        async function getInfo() {\n            const page = await wiki().page(props.search);\n            const content = await page.sections();\n            console.log(content);\n            setInfo(content);\n        };\n        getInfo();\n\n    });\n\n    function handleInfo(info) {\n        console.log(info)\n        //this breaks a lot. will need to focus here.\n        const text = [];\n        for (let i = 0; i < info.length; i++) {\n            console.log(info[i].title.toLowerCase().includes('meanings'))\n            if (info[i].title.toLowerCase().includes('meanings')) {\n                text.push(info[i].content)\n            }\n\n        }\n        setText(text);\n    };\n    console.log(text)\n    const cardText = text.map((text,i) => {\n        return (\n            <p key={i}>\n                {text}\n            </p>\n        );\n    })\n    return (\n        <>\n            {cardText}\n        </>\n    )\n}\n\nexport default Meaning;\n"]},"metadata":{},"sourceType":"module"}