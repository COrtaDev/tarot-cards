{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport wiki from 'wikijs';\nimport bot from 'nodemw';\n\nconst Meaning = props => {\n  _s();\n\n  const [info, setInfo] = useState(null);\n  const [text, setText] = useState([]);\n  useEffect(() => {\n    if (info) {\n      if (!text.length) {\n        handleInfo(info);\n      }\n\n      return;\n    } // async function getFandomInfo() {\n    //     const wikia = await new Wikia({ wiki: \"tarot\" });\n    //     const page = await wikia.getWikiData();\n    // };\n    // getFandomInfo()\n\n\n    const client = new bot({\n      protocol: 'https',\n      server: 'tarot.fandom.com',\n      path: '/wiki',\n      debug: false\n    });\n    client.getArticle('The_Magician', function (err, data) {\n      // error handling\n      if (err) {\n        console.error(err);\n        return;\n      } // ...\n\n    });\n\n    async function getInfo() {\n      const page = await wiki().page(props.search);\n      const content = await page.sections();\n      console.log(content);\n      setInfo(content);\n    }\n\n    ;\n    getInfo();\n  });\n  const titlesToAvoid = [\"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\", \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\", \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\"];\n\n  function handleInfo(info) {\n    console.log(\"All Info: \", info);\n    const titles = info.map(section => section.title);\n    let text = info.map(section => {\n      if (!titlesToAvoid.includes(section.title)) {\n        if (!section.content && section.items) {\n          console.log(\"Subsections: \", section.items);\n          let subectionContent = section.items.map(subsection => subsection.content);\n          console.log(\"Subsection Content: \", subectionContent);\n          return [...subectionContent];\n        } else if (section.content && section.items) {\n          console.log(\"Subsections: \", section.items);\n          let subectionContent = section.items.map(subsection => subsection.content);\n          console.log(\"Subsection Content: \", subectionContent);\n          return [section.content, ...subectionContent];\n        }\n\n        return section.content;\n      }\n    });\n    text = text.filter(content => content).flat();\n    console.log(\"Titles: \", titles);\n    setText(text);\n  }\n\n  ;\n  console.log(\"Text: \", text);\n  const cardText = text.map((text, i) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cardText\n  }, void 0, false);\n};\n\n_s(Meaning, \"JE8kuFOJqsaCKrGboOuhR6vbdrI=\");\n\n_c = Meaning;\nexport default Meaning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meaning\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js"],"names":["React","useState","useEffect","wiki","bot","Meaning","props","info","setInfo","text","setText","length","handleInfo","client","protocol","server","path","debug","getArticle","err","data","console","error","getInfo","page","search","content","sections","log","titlesToAvoid","titles","map","section","title","includes","items","subectionContent","subsection","filter","flat","cardText","i"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,GAAP,MAAgB,QAAhB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIK,IAAJ,EAAU;AACN,UAAI,CAACE,IAAI,CAACE,MAAV,EAAkB;AACdC,QAAAA,UAAU,CAACL,IAAD,CAAV;AACH;;AACD;AACH,KANW,CAOZ;AACA;AACA;AACA;AACA;;;AACA,UAAMM,MAAM,GAAG,IAAIT,GAAJ,CAAQ;AACnBU,MAAAA,QAAQ,EAAE,OADS;AAEnBC,MAAAA,MAAM,EAAE,kBAFW;AAGnBC,MAAAA,IAAI,EAAE,OAHa;AAInBC,MAAAA,KAAK,EAAE;AAJY,KAAR,CAAf;AAMAJ,IAAAA,MAAM,CAACK,UAAP,CAAkB,cAAlB,EAAkC,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AACnD;AACA,UAAID,GAAJ,EAAS;AACLE,QAAAA,OAAO,CAACC,KAAR,CAAcH,GAAd;AACA;AACH,OALkD,CAOnD;;AACH,KARD;;AASA,mBAAeI,OAAf,GAAyB;AACrB,YAAMC,IAAI,GAAG,MAAMrB,IAAI,GAAGqB,IAAP,CAAYlB,KAAK,CAACmB,MAAlB,CAAnB;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,QAAL,EAAtB;AACAN,MAAAA,OAAO,CAACO,GAAR,CAAYF,OAAZ;AACAlB,MAAAA,OAAO,CAACkB,OAAD,CAAP;AACH;;AAAA;AACDH,IAAAA,OAAO;AACV,GAlCQ,CAAT;AAmCA,QAAMM,aAAa,GAAG,CAClB,SADkB,EACP,cADO,EACS,YADT,EACuB,mBADvB,EAC4C,gBAD5C,EAC8D,gBAD9D,EAElB,gBAFkB,EAEA,UAFA,EAEY,SAFZ,EAEuB,gBAFvB,EAEyC,iBAFzC,EAGlB,QAHkB,EAGR,OAHQ,EAGC,WAHD,EAGc,oBAHd,EAGoC,QAHpC,CAAtB;;AAKA,WAASjB,UAAT,CAAoBL,IAApB,EAA0B;AACtBc,IAAAA,OAAO,CAACO,GAAR,CAAY,YAAZ,EAA0BrB,IAA1B;AACA,UAAMuB,MAAM,GAAGvB,IAAI,CAACwB,GAAL,CAASC,OAAO,IAAIA,OAAO,CAACC,KAA5B,CAAf;AACA,QAAIxB,IAAI,GAAGF,IAAI,CAACwB,GAAL,CAASC,OAAO,IAAI;AAC3B,UAAI,CAACH,aAAa,CAACK,QAAd,CAAuBF,OAAO,CAACC,KAA/B,CAAL,EAA4C;AACxC,YAAI,CAACD,OAAO,CAACN,OAAT,IAAoBM,OAAO,CAACG,KAAhC,EAAuC;AACnCd,UAAAA,OAAO,CAACO,GAAR,CAAY,eAAZ,EAA6BI,OAAO,CAACG,KAArC;AACA,cAAIC,gBAAgB,GAAGJ,OAAO,CAACG,KAAR,CAAcJ,GAAd,CAAkBM,UAAU,IAAIA,UAAU,CAACX,OAA3C,CAAvB;AACAL,UAAAA,OAAO,CAACO,GAAR,CAAY,sBAAZ,EAAoCQ,gBAApC;AACA,iBAAO,CAAC,GAAGA,gBAAJ,CAAP;AACH,SALD,MAKO,IAAIJ,OAAO,CAACN,OAAR,IAAmBM,OAAO,CAACG,KAA/B,EAAsC;AACzCd,UAAAA,OAAO,CAACO,GAAR,CAAY,eAAZ,EAA6BI,OAAO,CAACG,KAArC;AACA,cAAIC,gBAAgB,GAAGJ,OAAO,CAACG,KAAR,CAAcJ,GAAd,CAAkBM,UAAU,IAAIA,UAAU,CAACX,OAA3C,CAAvB;AACAL,UAAAA,OAAO,CAACO,GAAR,CAAY,sBAAZ,EAAoCQ,gBAApC;AACA,iBAAO,CAACJ,OAAO,CAACN,OAAT,EAAkB,GAAGU,gBAArB,CAAP;AACH;;AACD,eAAOJ,OAAO,CAACN,OAAf;AACH;AACJ,KAfU,CAAX;AAgBAjB,IAAAA,IAAI,GAAGA,IAAI,CAAC6B,MAAL,CAAYZ,OAAO,IAAIA,OAAvB,EAAgCa,IAAhC,EAAP;AACAlB,IAAAA,OAAO,CAACO,GAAR,CAAY,UAAZ,EAAwBE,MAAxB;AACApB,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH;;AAAA;AACDY,EAAAA,OAAO,CAACO,GAAR,CAAY,QAAZ,EAAsBnB,IAAtB;AACA,QAAM+B,QAAQ,GAAG/B,IAAI,CAACsB,GAAL,CAAS,CAACtB,IAAD,EAAOgC,CAAP,KAAa;AACnC,wBACI;AAAA,gBACKhC;AADL,OAAQgC,CAAR;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANgB,CAAjB;AAOA,sBACI;AAAA,cACKD;AADL,mBADJ;AAKH,CAhFD;;GAAMnC,O;;KAAAA,O;AAkFN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\nimport bot from 'nodemw';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState([]);\n\n    useEffect(() => {\n        if (info) {\n            if (!text.length) {\n                handleInfo(info);\n            }\n            return;\n        }\n        // async function getFandomInfo() {\n        //     const wikia = await new Wikia({ wiki: \"tarot\" });\n        //     const page = await wikia.getWikiData();\n        // };\n        // getFandomInfo()\n        const client = new bot({\n            protocol: 'https',\n            server: 'tarot.fandom.com',\n            path: '/wiki',\n            debug: false\n        })\n        client.getArticle('The_Magician', function (err, data) {\n            // error handling\n            if (err) {\n                console.error(err);\n                return;\n            }\n\n            // ...\n        });\n        async function getInfo() {\n            const page = await wiki().page(props.search);\n            const content = await page.sections();\n            console.log(content);\n            setInfo(content);\n        };\n        getInfo();\n    });\n    const titlesToAvoid = [\n        \"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\",\n        \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\",\n        \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\",\n    ];\n    function handleInfo(info) {\n        console.log(\"All Info: \", info)\n        const titles = info.map(section => section.title);\n        let text = info.map(section => {\n            if (!titlesToAvoid.includes(section.title)) {\n                if (!section.content && section.items) {\n                    console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    console.log(\"Subsection Content: \", subectionContent);\n                    return [...subectionContent];\n                } else if (section.content && section.items) {\n                    console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    console.log(\"Subsection Content: \", subectionContent);\n                    return [section.content, ...subectionContent,];\n                }\n                return section.content\n            }\n        });\n        text = text.filter(content => content).flat();\n        console.log(\"Titles: \", titles);\n        setText(text);\n    };\n    console.log(\"Text: \", text)\n    const cardText = text.map((text, i) => {\n        return (\n            <p key={i}>\n                {text}\n            </p>\n        );\n    })\n    return (\n        <>\n            {cardText}\n        </>\n    )\n}\n\nexport default Meaning;\n"]},"metadata":{},"sourceType":"module"}