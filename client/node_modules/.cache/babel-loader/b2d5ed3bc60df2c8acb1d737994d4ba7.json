{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport wiki from 'wikijs';\n\nconst Meaning = props => {\n  _s();\n\n  const [info, setInfo] = useState(null);\n  const [text, setText] = useState(null);\n  useEffect(() => {\n    if (info) {\n      handleInfo(info);\n      return;\n    }\n\n    async function getInfo() {\n      const page = await wiki().page(props.search);\n      const content = await page.sections();\n      console.log(content);\n      setInfo(content);\n    }\n\n    ;\n    getInfo();\n  });\n\n  function handleInfo(info) {\n    let text;\n\n    for (const section in info) {\n      if (section.title === \"References\") continue;else {\n        setText(section.content);\n      }\n    }\n  }\n\n  ;\n  console.log(text);\n  return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Meaning, \"z4AyULv1FXfC7gscrG8hmTeoSCY=\");\n\n_c = Meaning;\nexport default Meaning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meaning\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js"],"names":["React","useState","useEffect","wiki","Meaning","props","info","setInfo","text","setText","handleInfo","getInfo","page","search","content","sections","console","log","section","title"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,IAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,IAAJ,EAAU;AACNI,MAAAA,UAAU,CAACJ,IAAD,CAAV;AACA;AACH;;AACD,mBAAeK,OAAf,GAAyB;AACrB,YAAMC,IAAI,GAAG,MAAMT,IAAI,GAAGS,IAAP,CAAYP,KAAK,CAACQ,MAAlB,CAAnB;AACA,YAAMC,OAAO,GAAG,MAAMF,IAAI,CAACG,QAAL,EAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ;AACAP,MAAAA,OAAO,CAACO,OAAD,CAAP;AACH;;AAAA;AACDH,IAAAA,OAAO;AAEV,GAbQ,CAAT;;AAcA,WAASD,UAAT,CAAoBJ,IAApB,EAA0B;AACtB,QAAIE,IAAJ;;AACA,SAAK,MAAMU,OAAX,IAAsBZ,IAAtB,EAA4B;AACxB,UAAIY,OAAO,CAACC,KAAR,KAAkB,YAAtB,EAAoC,SAApC,KACK;AACDV,QAAAA,OAAO,CAACS,OAAO,CAACJ,OAAT,CAAP;AACH;AACJ;AACJ;;AAAA;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAlCD;;GAAMJ,O;;KAAAA,O;AAoCN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState(null);\n\n    useEffect(() => {\n        if (info) {\n            handleInfo(info);\n            return;\n        }\n        async function getInfo() {\n            const page = await wiki().page(props.search);\n            const content = await page.sections();\n            console.log(content);\n            setInfo(content);\n        };\n        getInfo();\n\n    });\n    function handleInfo(info) {\n        let text\n        for (const section in info) {\n            if (section.title === \"References\") continue;\n            else {\n                setText(section.content);\n            }\n        }\n    };\n    console.log(text)\n\n    return (\n        <p>\n            {/* {info} */}\n        </p>\n    );\n}\n\nexport default Meaning;\n"]},"metadata":{},"sourceType":"module"}