{"ast":null,"code":"/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar os = require('os');\n\nvar asyncForEach = require('async/forEach');\n\nvar debug = require('@dabh/diagnostics')('winston:rejection');\n\nvar once = require('one-time');\n\nvar stackTrace = require('stack-trace');\n\nvar ExceptionStream = require('./exception-stream');\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  function RejectionHandler(logger) {\n    _classCallCheck(this, RejectionHandler);\n\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n\n\n  _createClass(RejectionHandler, [{\n    key: \"handle\",\n    value: function handle() {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.forEach(function (arg) {\n        if (Array.isArray(arg)) {\n          return arg.forEach(function (handler) {\n            return _this._addHandler(handler);\n          });\n        }\n\n        _this._addHandler(arg);\n      });\n\n      if (!this.catcher) {\n        this.catcher = this._unhandledRejection.bind(this);\n        process.on('unhandledRejection', this.catcher);\n      }\n    }\n    /**\n     * Removes any handlers to `unhandledRejection` events for the current\n     * process. This does not modify the state of the `this.handlers` set.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"unhandle\",\n    value: function unhandle() {\n      var _this2 = this;\n\n      if (this.catcher) {\n        process.removeListener('unhandledRejection', this.catcher);\n        this.catcher = false;\n        Array.from(this.handlers.values()).forEach(function (wrapper) {\n          return _this2.logger.unpipe(wrapper);\n        });\n      }\n    }\n    /**\n     * TODO: add method description\n     * @param {Error} err - Error to get information about.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getAllInfo\",\n    value: function getAllInfo(err) {\n      var message = err.message;\n\n      if (!message && typeof err === 'string') {\n        message = err;\n      }\n\n      return {\n        error: err,\n        // TODO (indexzero): how do we configure this?\n        level: 'error',\n        message: [\"unhandledRejection: \".concat(message || '(no error message)'), err.stack || '  No stack trace'].join('\\n'),\n        stack: err.stack,\n        exception: true,\n        date: new Date().toString(),\n        process: this.getProcessInfo(),\n        os: this.getOsInfo(),\n        trace: this.getTrace(err)\n      };\n    }\n    /**\n     * Gets all relevant process information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getProcessInfo\",\n    value: function getProcessInfo() {\n      return {\n        pid: process.pid,\n        uid: process.getuid ? process.getuid() : null,\n        gid: process.getgid ? process.getgid() : null,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n        version: process.version,\n        argv: process.argv,\n        memoryUsage: process.memoryUsage()\n      };\n    }\n    /**\n     * Gets all relevant OS information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getOsInfo\",\n    value: function getOsInfo() {\n      return {\n        loadavg: os.loadavg(),\n        uptime: os.uptime()\n      };\n    }\n    /**\n     * Gets a stack trace for the specified error.\n     * @param {mixed} err - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getTrace\",\n    value: function getTrace(err) {\n      var trace = err ? stackTrace.parse(err) : stackTrace.get();\n      return trace.map(function (site) {\n        return {\n          column: site.getColumnNumber(),\n          file: site.getFileName(),\n          \"function\": site.getFunctionName(),\n          line: site.getLineNumber(),\n          method: site.getMethodName(),\n          \"native\": site.isNative()\n        };\n      });\n    }\n    /**\n     * Helper method to add a transport as an exception handler.\n     * @param {Transport} handler - The transport to add as an exception handler.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_addHandler\",\n    value: function _addHandler(handler) {\n      if (!this.handlers.has(handler)) {\n        handler.handleRejections = true;\n        var wrapper = new ExceptionStream(handler);\n        this.handlers.set(handler, wrapper);\n        this.logger.pipe(wrapper);\n      }\n    }\n    /**\n     * Logs all relevant information around the `err` and exits the current\n     * process.\n     * @param {Error} err - Error to handle\n     * @returns {mixed} - TODO: add return description.\n     * @private\n     */\n\n  }, {\n    key: \"_unhandledRejection\",\n    value: function _unhandledRejection(err) {\n      var info = this.getAllInfo(err);\n\n      var handlers = this._getRejectionHandlers(); // Calculate if we should exit on this error\n\n\n      var doExit = typeof this.logger.exitOnError === 'function' ? this.logger.exitOnError(err) : this.logger.exitOnError;\n      var timeout;\n\n      if (!handlers.length && doExit) {\n        // eslint-disable-next-line no-console\n        console.warn('winston: exitOnError cannot be true with no rejection handlers.'); // eslint-disable-next-line no-console\n\n        console.warn('winston: not exiting process.');\n        doExit = false;\n      }\n\n      function gracefulExit() {\n        debug('doExit', doExit);\n        debug('process._exiting', process._exiting);\n\n        if (doExit && !process._exiting) {\n          // Remark: Currently ignoring any rejections from transports when\n          // catching unhandled rejections.\n          if (timeout) {\n            clearTimeout(timeout);\n          } // eslint-disable-next-line no-process-exit\n\n\n          process.exit(1);\n        }\n      }\n\n      if (!handlers || handlers.length === 0) {\n        return process.nextTick(gracefulExit);\n      } // Log to all transports attempting to listen for when they are completed.\n\n\n      asyncForEach(handlers, function (handler, next) {\n        var done = once(next);\n        var transport = handler.transport || handler; // Debug wrapping so that we can inspect what's going on under the covers.\n\n        function onDone(event) {\n          return function () {\n            debug(event);\n            done();\n          };\n        }\n\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      }, function () {\n        return doExit && gracefulExit();\n      });\n      this.logger.log(info); // If exitOnError is true, then only allow the logging of exceptions to\n      // take up to `3000ms`.\n\n      if (doExit) {\n        timeout = setTimeout(gracefulExit, 3000);\n      }\n    }\n    /**\n     * Returns the list of transports and exceptionHandlers for this instance.\n     * @returns {Array} - List of transports and exceptionHandlers for this\n     * instance.\n     * @private\n     */\n\n  }, {\n    key: \"_getRejectionHandlers\",\n    value: function _getRejectionHandlers() {\n      // Remark (indexzero): since `logger.transports` returns all of the pipes\n      // from the _readableState of the stream we actually get the join of the\n      // explicit handlers and the implicit transports with\n      // `handleRejections: true`\n      return this.logger.transports.filter(function (wrap) {\n        var transport = wrap.transport || wrap;\n        return transport.handleRejections;\n      });\n    }\n  }]);\n\n  return RejectionHandler;\n}();","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/winston/dist/winston/rejection-handler.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","os","require","asyncForEach","debug","once","stackTrace","ExceptionStream","module","exports","RejectionHandler","logger","Error","handlers","Map","value","handle","_this","_len","arguments","args","Array","_key","forEach","arg","isArray","handler","_addHandler","catcher","_unhandledRejection","bind","process","on","unhandle","_this2","removeListener","from","values","wrapper","unpipe","getAllInfo","err","message","error","level","concat","stack","join","exception","date","Date","toString","getProcessInfo","getOsInfo","trace","getTrace","pid","uid","getuid","gid","getgid","cwd","execPath","version","argv","memoryUsage","loadavg","uptime","parse","get","map","site","column","getColumnNumber","file","getFileName","getFunctionName","line","getLineNumber","method","getMethodName","isNative","has","handleRejections","set","pipe","info","_getRejectionHandlers","doExit","exitOnError","timeout","console","warn","gracefulExit","_exiting","clearTimeout","exit","nextTick","next","done","transport","onDone","event","_ending","log","setTimeout","transports","filter","wrap"],"mappings":"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","sourcesContent":["/**\n * exception-handler.js: Object for handling uncaughtException events.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar os = require('os');\n\nvar asyncForEach = require('async/forEach');\n\nvar debug = require('@dabh/diagnostics')('winston:rejection');\n\nvar once = require('one-time');\n\nvar stackTrace = require('stack-trace');\n\nvar ExceptionStream = require('./exception-stream');\n/**\n * Object for handling unhandledRejection events.\n * @type {RejectionHandler}\n */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * TODO: add contructor description\n   * @param {!Logger} logger - TODO: add param description\n   */\n  function RejectionHandler(logger) {\n    _classCallCheck(this, RejectionHandler);\n\n    if (!logger) {\n      throw new Error('Logger is required to handle rejections');\n    }\n\n    this.logger = logger;\n    this.handlers = new Map();\n  }\n  /**\n   * Handles `unhandledRejection` events for the current process by adding any\n   * handlers passed in.\n   * @returns {undefined}\n   */\n\n\n  _createClass(RejectionHandler, [{\n    key: \"handle\",\n    value: function handle() {\n      var _this = this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args.forEach(function (arg) {\n        if (Array.isArray(arg)) {\n          return arg.forEach(function (handler) {\n            return _this._addHandler(handler);\n          });\n        }\n\n        _this._addHandler(arg);\n      });\n\n      if (!this.catcher) {\n        this.catcher = this._unhandledRejection.bind(this);\n        process.on('unhandledRejection', this.catcher);\n      }\n    }\n    /**\n     * Removes any handlers to `unhandledRejection` events for the current\n     * process. This does not modify the state of the `this.handlers` set.\n     * @returns {undefined}\n     */\n\n  }, {\n    key: \"unhandle\",\n    value: function unhandle() {\n      var _this2 = this;\n\n      if (this.catcher) {\n        process.removeListener('unhandledRejection', this.catcher);\n        this.catcher = false;\n        Array.from(this.handlers.values()).forEach(function (wrapper) {\n          return _this2.logger.unpipe(wrapper);\n        });\n      }\n    }\n    /**\n     * TODO: add method description\n     * @param {Error} err - Error to get information about.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getAllInfo\",\n    value: function getAllInfo(err) {\n      var message = err.message;\n\n      if (!message && typeof err === 'string') {\n        message = err;\n      }\n\n      return {\n        error: err,\n        // TODO (indexzero): how do we configure this?\n        level: 'error',\n        message: [\"unhandledRejection: \".concat(message || '(no error message)'), err.stack || '  No stack trace'].join('\\n'),\n        stack: err.stack,\n        exception: true,\n        date: new Date().toString(),\n        process: this.getProcessInfo(),\n        os: this.getOsInfo(),\n        trace: this.getTrace(err)\n      };\n    }\n    /**\n     * Gets all relevant process information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getProcessInfo\",\n    value: function getProcessInfo() {\n      return {\n        pid: process.pid,\n        uid: process.getuid ? process.getuid() : null,\n        gid: process.getgid ? process.getgid() : null,\n        cwd: process.cwd(),\n        execPath: process.execPath,\n        version: process.version,\n        argv: process.argv,\n        memoryUsage: process.memoryUsage()\n      };\n    }\n    /**\n     * Gets all relevant OS information for the currently running process.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getOsInfo\",\n    value: function getOsInfo() {\n      return {\n        loadavg: os.loadavg(),\n        uptime: os.uptime()\n      };\n    }\n    /**\n     * Gets a stack trace for the specified error.\n     * @param {mixed} err - TODO: add param description.\n     * @returns {mixed} - TODO: add return description.\n     */\n\n  }, {\n    key: \"getTrace\",\n    value: function getTrace(err) {\n      var trace = err ? stackTrace.parse(err) : stackTrace.get();\n      return trace.map(function (site) {\n        return {\n          column: site.getColumnNumber(),\n          file: site.getFileName(),\n          \"function\": site.getFunctionName(),\n          line: site.getLineNumber(),\n          method: site.getMethodName(),\n          \"native\": site.isNative()\n        };\n      });\n    }\n    /**\n     * Helper method to add a transport as an exception handler.\n     * @param {Transport} handler - The transport to add as an exception handler.\n     * @returns {void}\n     */\n\n  }, {\n    key: \"_addHandler\",\n    value: function _addHandler(handler) {\n      if (!this.handlers.has(handler)) {\n        handler.handleRejections = true;\n        var wrapper = new ExceptionStream(handler);\n        this.handlers.set(handler, wrapper);\n        this.logger.pipe(wrapper);\n      }\n    }\n    /**\n     * Logs all relevant information around the `err` and exits the current\n     * process.\n     * @param {Error} err - Error to handle\n     * @returns {mixed} - TODO: add return description.\n     * @private\n     */\n\n  }, {\n    key: \"_unhandledRejection\",\n    value: function _unhandledRejection(err) {\n      var info = this.getAllInfo(err);\n\n      var handlers = this._getRejectionHandlers(); // Calculate if we should exit on this error\n\n\n      var doExit = typeof this.logger.exitOnError === 'function' ? this.logger.exitOnError(err) : this.logger.exitOnError;\n      var timeout;\n\n      if (!handlers.length && doExit) {\n        // eslint-disable-next-line no-console\n        console.warn('winston: exitOnError cannot be true with no rejection handlers.'); // eslint-disable-next-line no-console\n\n        console.warn('winston: not exiting process.');\n        doExit = false;\n      }\n\n      function gracefulExit() {\n        debug('doExit', doExit);\n        debug('process._exiting', process._exiting);\n\n        if (doExit && !process._exiting) {\n          // Remark: Currently ignoring any rejections from transports when\n          // catching unhandled rejections.\n          if (timeout) {\n            clearTimeout(timeout);\n          } // eslint-disable-next-line no-process-exit\n\n\n          process.exit(1);\n        }\n      }\n\n      if (!handlers || handlers.length === 0) {\n        return process.nextTick(gracefulExit);\n      } // Log to all transports attempting to listen for when they are completed.\n\n\n      asyncForEach(handlers, function (handler, next) {\n        var done = once(next);\n        var transport = handler.transport || handler; // Debug wrapping so that we can inspect what's going on under the covers.\n\n        function onDone(event) {\n          return function () {\n            debug(event);\n            done();\n          };\n        }\n\n        transport._ending = true;\n        transport.once('finish', onDone('finished'));\n        transport.once('error', onDone('error'));\n      }, function () {\n        return doExit && gracefulExit();\n      });\n      this.logger.log(info); // If exitOnError is true, then only allow the logging of exceptions to\n      // take up to `3000ms`.\n\n      if (doExit) {\n        timeout = setTimeout(gracefulExit, 3000);\n      }\n    }\n    /**\n     * Returns the list of transports and exceptionHandlers for this instance.\n     * @returns {Array} - List of transports and exceptionHandlers for this\n     * instance.\n     * @private\n     */\n\n  }, {\n    key: \"_getRejectionHandlers\",\n    value: function _getRejectionHandlers() {\n      // Remark (indexzero): since `logger.transports` returns all of the pipes\n      // from the _readableState of the stream we actually get the join of the\n      // explicit handlers and the implicit transports with\n      // `handleRejections: true`\n      return this.logger.transports.filter(function (wrap) {\n        var transport = wrap.transport || wrap;\n        return transport.handleRejections;\n      });\n    }\n  }]);\n\n  return RejectionHandler;\n}();"]},"metadata":{},"sourceType":"script"}