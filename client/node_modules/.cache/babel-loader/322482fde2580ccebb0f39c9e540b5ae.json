{"ast":null,"code":"'use strict';\n\nconst util = require('util');\n\nconst {\n  LEVEL\n} = require('triple-beam');\n\nconst TransportStream = require('./');\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions; // Display our deprecation notice.\n\n  this._deprecated(); // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n\n\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\n\n\nutil.inherits(LegacyTransportStream, TransportStream);\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\n\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || info.exception === true && !this.handleExceptions) {\n    return callback(null);\n  } // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n\n\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\n\n\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(chunks[i].chunk[LEVEL], chunks[i].chunk.message, chunks[i].chunk, this._nop);\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\n\n\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([`${this.transport.name} is a legacy winston transport. Consider upgrading: `, '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'].join('\\n'));\n};\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\n\n\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/node_modules/winston-transport/legacy.js"],"names":["util","require","LEVEL","TransportStream","LegacyTransportStream","module","exports","options","call","transport","log","Error","level","handleExceptions","_deprecated","transportError","err","emit","__winstonError","bind","on","inherits","prototype","_write","info","enc","callback","silent","exception","levels","message","_nop","_writev","chunks","i","length","_accept","chunk","console","error","name","join","close","removeListener"],"mappings":"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","sourcesContent":["'use strict';\n\nconst util = require('util');\nconst { LEVEL } = require('triple-beam');\nconst TransportStream = require('./');\n\n/**\n * Constructor function for the LegacyTransportStream. This is an internal\n * wrapper `winston >= 3` uses to wrap older transports implementing\n * log(level, message, meta).\n * @param {Object} options - Options for this TransportStream instance.\n * @param {Transpot} options.transport - winston@2 or older Transport to wrap.\n */\n\nconst LegacyTransportStream = module.exports = function LegacyTransportStream(options = {}) {\n  TransportStream.call(this, options);\n  if (!options.transport || typeof options.transport.log !== 'function') {\n    throw new Error('Invalid transport, must be an object with a log method.');\n  }\n\n  this.transport = options.transport;\n  this.level = this.level || options.transport.level;\n  this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;\n\n  // Display our deprecation notice.\n  this._deprecated();\n\n  // Properly bubble up errors from the transport to the\n  // LegacyTransportStream instance, but only once no matter how many times\n  // this transport is shared.\n  function transportError(err) {\n    this.emit('error', err, this.transport);\n  }\n\n  if (!this.transport.__winstonError) {\n    this.transport.__winstonError = transportError.bind(this);\n    this.transport.on('error', this.transport.__winstonError);\n  }\n};\n\n/*\n * Inherit from TransportStream using Node.js built-ins\n */\nutil.inherits(LegacyTransportStream, TransportStream);\n\n/**\n * Writes the info object to our transport instance.\n * @param {mixed} info - TODO: add param description.\n * @param {mixed} enc - TODO: add param description.\n * @param {function} callback - TODO: add param description.\n * @returns {undefined}\n * @private\n */\nLegacyTransportStream.prototype._write = function _write(info, enc, callback) {\n  if (this.silent || (info.exception === true && !this.handleExceptions)) {\n    return callback(null);\n  }\n\n  // Remark: This has to be handled in the base transport now because we\n  // cannot conditionally write to our pipe targets as stream.\n  if (!this.level || this.levels[this.level] >= this.levels[info[LEVEL]]) {\n    this.transport.log(info[LEVEL], info.message, info, this._nop);\n  }\n\n  callback(null);\n};\n\n/**\n * Writes the batch of info objects (i.e. \"object chunks\") to our transport\n * instance after performing any necessary filtering.\n * @param {mixed} chunks - TODO: add params description.\n * @param {function} callback - TODO: add params description.\n * @returns {mixed} - TODO: add returns description.\n * @private\n */\nLegacyTransportStream.prototype._writev = function _writev(chunks, callback) {\n  for (let i = 0; i < chunks.length; i++) {\n    if (this._accept(chunks[i])) {\n      this.transport.log(\n        chunks[i].chunk[LEVEL],\n        chunks[i].chunk.message,\n        chunks[i].chunk,\n        this._nop\n      );\n      chunks[i].callback();\n    }\n  }\n\n  return callback(null);\n};\n\n/**\n * Displays a deprecation notice. Defined as a function so it can be\n * overriden in tests.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype._deprecated = function _deprecated() {\n  // eslint-disable-next-line no-console\n  console.error([\n    `${this.transport.name} is a legacy winston transport. Consider upgrading: `,\n    '- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md'\n  ].join('\\n'));\n};\n\n/**\n * Clean up error handling state on the legacy transport associated\n * with this instance.\n * @returns {undefined}\n */\nLegacyTransportStream.prototype.close = function close() {\n  if (this.transport.close) {\n    this.transport.close();\n  }\n\n  if (this.transport.__winstonError) {\n    this.transport.removeListener('error', this.transport.__winstonError);\n    this.transport.__winstonError = null;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}