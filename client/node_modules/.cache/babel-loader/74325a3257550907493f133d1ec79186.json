{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport wiki from 'wikijs';\n\nconst Meaning = props => {\n  _s();\n\n  const [info, setInfo] = useState(null);\n  const [text, setText] = useState([]);\n  useEffect(() => {\n    if (info) {\n      if (!text.length) {\n        handleInfo(info);\n      }\n\n      return;\n    }\n\n    async function getFandomInfo() {\n      const page = await wiki({\n        apiUrl: 'https://tarot.fandom.com',\n        origin: null\n      }).page;\n      console.log(page);\n    }\n\n    ;\n    getFandomInfo();\n\n    async function getInfo() {\n      const page = await wiki().page(props.search);\n      const content = await page.sections();\n      console.log(content);\n      setInfo(content);\n    }\n\n    ;\n    getInfo();\n  });\n  const titlesToAvoid = [\"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\", \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\", \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\"];\n\n  function handleInfo(info) {\n    console.log(\"All Info: \", info);\n    const titles = info.map(section => section.title);\n    let text = info.map(section => {\n      if (!titlesToAvoid.includes(section.title)) {\n        if (!section.content && section.items) {\n          console.log(\"Subsections: \", section.items);\n          let subectionContent = section.items.map(subsection => subsection.content);\n          console.log(\"Subsection Content: \", subectionContent);\n          return [...subectionContent];\n        } else if (section.content && section.items) {\n          console.log(\"Subsections: \", section.items);\n          let subectionContent = section.items.map(subsection => subsection.content);\n          console.log(\"Subsection Content: \", subectionContent);\n          return [section.content, ...subectionContent];\n        }\n\n        return section.content;\n      }\n    });\n    text = text.filter(content => content).flat();\n    console.log(\"Titles: \", titles);\n    setText(text);\n  }\n\n  ;\n  console.log(\"Text: \", text);\n  const cardText = text.map((text, i) => {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: text\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cardText\n  }, void 0, false);\n};\n\n_s(Meaning, \"JE8kuFOJqsaCKrGboOuhR6vbdrI=\");\n\n_c = Meaning;\nexport default Meaning;\n\nvar _c;\n\n$RefreshReg$(_c, \"Meaning\");","map":{"version":3,"sources":["/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js"],"names":["React","useState","useEffect","wiki","Meaning","props","info","setInfo","text","setText","length","handleInfo","getFandomInfo","page","apiUrl","origin","console","log","getInfo","search","content","sections","titlesToAvoid","titles","map","section","title","includes","items","subectionContent","subsection","filter","flat","cardText","i"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,IAAJ,EAAU;AACN,UAAI,CAACE,IAAI,CAACE,MAAV,EAAkB;AACdC,QAAAA,UAAU,CAACL,IAAD,CAAV;AACH;;AACD;AACH;;AACD,mBAAeM,aAAf,GAA+B;AAC3B,YAAMC,IAAI,GAAG,MAAMV,IAAI,CAAC;AACpBW,QAAAA,MAAM,EAAE,0BADY;AAEpBC,QAAAA,MAAM,EAAE;AAFY,OAAD,CAAJ,CAGhBF,IAHH;AAIAG,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACH;;AAAA;AACDD,IAAAA,aAAa;;AACb,mBAAeM,OAAf,GAAyB;AACrB,YAAML,IAAI,GAAG,MAAMV,IAAI,GAAGU,IAAP,CAAYR,KAAK,CAACc,MAAlB,CAAnB;AACA,YAAMC,OAAO,GAAG,MAAMP,IAAI,CAACQ,QAAL,EAAtB;AACAL,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAb,MAAAA,OAAO,CAACa,OAAD,CAAP;AACH;;AAAA;AACDF,IAAAA,OAAO;AACV,GAtBQ,CAAT;AAuBA,QAAMI,aAAa,GAAG,CAClB,SADkB,EACP,cADO,EACS,YADT,EACuB,mBADvB,EAC4C,gBAD5C,EAC8D,gBAD9D,EAElB,gBAFkB,EAEA,UAFA,EAEY,SAFZ,EAEuB,gBAFvB,EAEyC,iBAFzC,EAGlB,QAHkB,EAGR,OAHQ,EAGC,WAHD,EAGc,oBAHd,EAGoC,QAHpC,CAAtB;;AAKA,WAASX,UAAT,CAAoBL,IAApB,EAA0B;AACtBU,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BX,IAA1B;AACA,UAAMiB,MAAM,GAAGjB,IAAI,CAACkB,GAAL,CAASC,OAAO,IAAIA,OAAO,CAACC,KAA5B,CAAf;AACA,QAAIlB,IAAI,GAAGF,IAAI,CAACkB,GAAL,CAASC,OAAO,IAAI;AAC3B,UAAI,CAACH,aAAa,CAACK,QAAd,CAAuBF,OAAO,CAACC,KAA/B,CAAL,EAA4C;AACxC,YAAI,CAACD,OAAO,CAACL,OAAT,IAAoBK,OAAO,CAACG,KAAhC,EAAuC;AACnCZ,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BQ,OAAO,CAACG,KAArC;AACA,cAAIC,gBAAgB,GAAGJ,OAAO,CAACG,KAAR,CAAcJ,GAAd,CAAkBM,UAAU,IAAIA,UAAU,CAACV,OAA3C,CAAvB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCY,gBAApC;AACA,iBAAO,CAAC,GAAGA,gBAAJ,CAAP;AACH,SALD,MAKO,IAAIJ,OAAO,CAACL,OAAR,IAAmBK,OAAO,CAACG,KAA/B,EAAsC;AACzCZ,UAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BQ,OAAO,CAACG,KAArC;AACA,cAAIC,gBAAgB,GAAGJ,OAAO,CAACG,KAAR,CAAcJ,GAAd,CAAkBM,UAAU,IAAIA,UAAU,CAACV,OAA3C,CAAvB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCY,gBAApC;AACA,iBAAO,CAACJ,OAAO,CAACL,OAAT,EAAkB,GAAGS,gBAArB,CAAP;AACH;;AACD,eAAOJ,OAAO,CAACL,OAAf;AACH;AACJ,KAfU,CAAX;AAgBAZ,IAAAA,IAAI,GAAGA,IAAI,CAACuB,MAAL,CAAYX,OAAO,IAAIA,OAAvB,EAAgCY,IAAhC,EAAP;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBM,MAAxB;AACAd,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH;;AAAA;AACDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBT,IAAtB;AACA,QAAMyB,QAAQ,GAAGzB,IAAI,CAACgB,GAAL,CAAS,CAAChB,IAAD,EAAO0B,CAAP,KAAa;AACnC,wBACI;AAAA,gBACK1B;AADL,OAAQ0B,CAAR;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GANgB,CAAjB;AAOA,sBACI;AAAA,cACKD;AADL,mBADJ;AAKH,CApED;;GAAM7B,O;;KAAAA,O;AAsEN,eAAeA,OAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState([]);\n\n    useEffect(() => {\n        if (info) {\n            if (!text.length) {\n                handleInfo(info);\n            }\n            return;\n        }\n        async function getFandomInfo() {\n            const page = await wiki({\n                apiUrl: 'https://tarot.fandom.com',\n                origin: null\n            }).page\n            console.log(page);\n        };\n        getFandomInfo()\n        async function getInfo() {\n            const page = await wiki().page(props.search);\n            const content = await page.sections();\n            console.log(content);\n            setInfo(content);\n        };\n        getInfo();\n    });\n    const titlesToAvoid = [\n        \"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\",\n        \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\",\n        \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\",\n    ];\n    function handleInfo(info) {\n        console.log(\"All Info: \", info)\n        const titles = info.map(section => section.title);\n        let text = info.map(section => {\n            if (!titlesToAvoid.includes(section.title)) {\n                if (!section.content && section.items) {\n                    console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    console.log(\"Subsection Content: \", subectionContent);\n                    return [...subectionContent];\n                } else if (section.content && section.items) {\n                    console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    console.log(\"Subsection Content: \", subectionContent);\n                    return [section.content, ...subectionContent,];\n                }\n                return section.content\n            }\n        });\n        text = text.filter(content => content).flat();\n        console.log(\"Titles: \", titles);\n        setText(text);\n    };\n    console.log(\"Text: \", text)\n    const cardText = text.map((text, i) => {\n        return (\n            <p key={i}>\n                {text}\n            </p>\n        );\n    })\n    return (\n        <>\n            {cardText}\n        </>\n    )\n}\n\nexport default Meaning;\n"]},"metadata":{},"sourceType":"module"}