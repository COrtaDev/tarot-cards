{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: !0\n}), exports.default = wiki;\n\nvar _util = require('./util'),\n    _page = require('./page'),\n    _page2 = _interopRequireDefault(_page);\n\nfunction _interopRequireDefault(a) {\n  return a && a.__esModule ? a : {\n    default: a\n  };\n}\n\nvar defaultOptions = {\n  apiUrl: 'http://en.wikipedia.org/w/api.php',\n  origin: '*'\n};\n\nfunction wiki() {\n  function a(q) {\n    return q.query.redirects && 1 === q.query.redirects.length ? (0, _util.api)(p, {\n      prop: 'info|pageprops',\n      inprop: 'url',\n      ppprop: 'disambiguation',\n      titles: q.query.redirects[0].to\n    }) : q;\n  }\n\n  function b(q) {\n    var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 50;\n    return (0, _util.pagination)(p, {\n      list: 'search',\n      srsearch: q,\n      srlimit: r\n    }, function (s) {\n      return s.query.search.map(function (t) {\n        return t.title;\n      });\n    }).catch(function (s) {\n      if ('\"text\" search is disabled.' === s.message) return d(q, r);\n      throw s;\n    });\n  }\n\n  function d(q) {\n    var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 50;\n    return (0, _util.api)(p, {\n      search: q,\n      limit: r,\n      namespace: 0,\n      action: 'opensearch',\n      redirects: void 0\n    }).then(function (s) {\n      return s[1];\n    });\n  }\n\n  function f(q) {\n    return (0, _util.api)(p, {\n      prop: 'info|pageprops',\n      inprop: 'url',\n      ppprop: 'disambiguation',\n      titles: q\n    }).then(a).then(function (r) {\n      var s = Object.keys(r.query.pages)[0];\n      if (!s || '-1' === s) throw new Error('No article found');\n      return (0, _page2.default)(r.query.pages[s], p);\n    });\n  }\n\n  var o = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};\n  this instanceof wiki && console.log('Please do not use wikijs ^1.0.0 as a class. Please see the new README.');\n  var p = Object.assign({}, defaultOptions, o);\n  return {\n    search: b,\n    random: function () {\n      var q = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 1;\n      return (0, _util.api)(p, {\n        list: 'random',\n        rnnamespace: 0,\n        rnlimit: q\n      }).then(function (r) {\n        return r.query.random.map(function (s) {\n          return s.title;\n        });\n      });\n    },\n    page: f,\n    geoSearch: function (q, r) {\n      var s = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1e3;\n      return (0, _util.api)(p, {\n        list: 'geosearch',\n        gsradius: s,\n        gscoord: q + '|' + r\n      }).then(function (t) {\n        return t.query.geosearch.map(function (u) {\n          return u.title;\n        });\n      });\n    },\n    options: o,\n    findById: function (q) {\n      return (0, _util.api)(p, {\n        prop: 'info|pageprops',\n        inprop: 'url',\n        ppprop: 'disambiguation',\n        pageids: q\n      }).then(a).then(function (r) {\n        var s = Object.keys(r.query.pages)[0];\n        if (!s || '-1' === s) throw new Error('No article found');\n        return (0, _page2.default)(r.query.pages[s], p);\n      });\n    },\n    find: function (q) {\n      var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : function (s) {\n        return s[0];\n      };\n      return b(q).then(function (s) {\n        return r(s.results);\n      }).then(function (s) {\n        return f(s);\n      });\n    },\n    allPages: function () {\n      return (0, _util.aggregate)(p, {}, 'allpages', 'title', 'ap');\n    },\n    allCategories: function () {\n      return (0, _util.aggregate)(p, {}, 'allcategories', '*', 'ac');\n    },\n    pagesInCategory: function (q) {\n      return (0, _util.aggregate)(p, {\n        cmtitle: q\n      }, 'categorymembers', 'title', 'cm');\n    },\n    opensearch: d,\n    prefixSearch: function (q) {\n      var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 50;\n      return (0, _util.pagination)(p, {\n        list: 'prefixsearch',\n        pslimit: r,\n        psprofile: 'fuzzy',\n        pssearch: q\n      }, function (s) {\n        return s.query.prefixsearch.map(function (t) {\n          return t.title;\n        });\n      });\n    },\n    mostViewed: function () {\n      return (0, _util.api)(p, {\n        action: 'query',\n        list: 'mostviewed'\n      }).then(function (q) {\n        return q.query.mostviewed.map(function (r) {\n          var s = r.title,\n              t = r.count;\n          return {\n            title: s,\n            count: t\n          };\n        });\n      });\n    },\n    api: function (q) {\n      return (0, _util.api)(p, q);\n    }\n  };\n}","map":{"version":3,"sources":["../src/wiki.js"],"names":["defaultOptions","apiUrl","origin","wiki","console","Object","res","prop","inprop","ppprop","titles","list","srsearch","srlimit","article","opensearch","err","pslimit","psprofile","pssearch","search","limit","namespace","action","redirects","rnnamespace","rnlimit","pageids","results","predicate","page","gsradius","gscoord","lat","title","count","cmtitle","random","geoSearch","options","findById","find","allPages","allCategories","pagesInCategory","prefixSearch","mostViewed","api"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { pagination, api, aggregate } from './util';\nimport wikiPage from './page';\n\n/**\n * @namespace\n * @constant\n * @property {string} apiUrl - URL of Wikipedia API\n * @property {string} headers - Headers to pass through to the API request\n * @property {string} origin - When accessing the API using a cross-domain AJAX\n * request (CORS), set this to the originating domain. This must be included in\n * any pre-flight request, and therefore must be part of the request URI (not\n * the POST body). This must match one of the origins in the Origin header\n * exactly, so it has to be set to something like https://en.wikipedia.org or\n * https://meta.wikimedia.org. If this parameter does not match the Origin\n * header, a 403 response will be returned. If this parameter matches the Origin\n * header and the origin is whitelisted, an Access-Control-Allow-Origin header\n * will be set.\n */\nconst defaultOptions = {\n\tapiUrl: 'http://en.wikipedia.org/w/api.php',\n\torigin: '*'\n};\n\n/**\n * wiki\n * @example\n * wiki({ apiUrl: 'http://fr.wikipedia.org/w/api.php' }).search(...);\n * @namespace Wiki\n * @param  {Object} options\n * @return {Object} - wiki (for chaining methods)\n */\nexport default function wiki(options = {}) {\n\tif (this instanceof wiki) {\n\t\t// eslint-disable-next-line\n\t\tconsole.log(\n\t\t\t'Please do not use wikijs ^1.0.0 as a class. Please see the new README.'\n\t\t);\n\t}\n\n\tconst apiOptions = Object.assign({}, defaultOptions, options);\n\n\tfunction handleRedirect(res) {\n\t\tif (res.query.redirects && res.query.redirects.length === 1) {\n\t\t\treturn api(apiOptions, {\n\t\t\t\tprop: 'info|pageprops',\n\t\t\t\tinprop: 'url',\n\t\t\t\tppprop: 'disambiguation',\n\t\t\t\ttitles: res.query.redirects[0].to\n\t\t\t});\n\t\t}\n\t\treturn res;\n\t}\n\n\t/**\n\t * Search articles\n\t * @example\n\t * wiki.search('star wars').then(data => console.log(data.results.length));\n\t * @example\n\t * wiki.search('star wars').then(data => {\n\t * \tdata.next().then(...);\n\t * });\n\t * @method Wiki#search\n\t * @param  {string} query - keyword query\n\t * @param  {Number} [limit] - limits the number of results\n\t * @return {Promise} - pagination promise with results and next page function\n\t */\n\tfunction search(query, limit = 50) {\n\t\treturn pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'search',\n\t\t\t\tsrsearch: query,\n\t\t\t\tsrlimit: limit\n\t\t\t},\n\t\t\tres => res.query.search.map(article => article.title)\n\t\t).catch(err => {\n\t\t\tif (err.message === '\"text\" search is disabled.') {\n\t\t\t\t// Try backup search method\n\t\t\t\treturn opensearch(query, limit);\n\t\t\t}\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\t/**\n\t * Search articles using \"fuzzy\" prefixsearch\n\t * @example\n\t * wiki.prefixSearch('star wars').then(data => console.log(data.results.length));\n\t * @example\n\t * wiki.prefixSearch('star wars').then(data => {\n\t * \tdata.next().then(...);\n\t * });\n\t * @method Wiki#prefixSearch\n\t * @param  {string} query - keyword query\n\t * @param  {Number} [limit] - limits the number of results\n\t * @return {Promise} - pagination promise with results and next page function\n\t */\n\tfunction prefixSearch(query, limit = 50) {\n\t\treturn pagination(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tlist: 'prefixsearch',\n\t\t\t\tpslimit: limit,\n\t\t\t\tpsprofile: 'fuzzy',\n\t\t\t\tpssearch: query\n\t\t\t},\n\t\t\tres => res.query.prefixsearch.map(article => article.title)\n\t\t);\n\t}\n\n\t/**\n\t * Opensearch (mainly used as a backup to normal text search)\n\t * @param  {string} query - keyword query\n\t * @param  {Number} limit - limits the number of results\n\t * @return {Array}       List of page title results\n\t */\n\tfunction opensearch(query, limit = 50) {\n\t\treturn api(apiOptions, {\n\t\t\tsearch: query,\n\t\t\tlimit,\n\t\t\tnamespace: 0,\n\t\t\taction: 'opensearch',\n\t\t\tredirects: undefined\n\t\t}).then(res => res[1]);\n\t}\n\n\t/**\n\t * Random articles\n\t * @example\n\t * wiki.random(3).then(results => console.log(results[0]));\n\t * @method Wiki#random\n\t * @param  {Number} [limit] - limits the number of random articles\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction random(limit = 1) {\n\t\treturn api(apiOptions, {\n\t\t\tlist: 'random',\n\t\t\trnnamespace: 0,\n\t\t\trnlimit: limit\n\t\t}).then(res => res.query.random.map(article => article.title));\n\t}\n\n\t/**\n\t * Get Page\n\t * @example\n\t * wiki.page('Batman').then(page => console.log(page.pageid));\n\t * @method Wiki#page\n\t * @param  {string} title - title of article\n\t * @return {Promise}\n\t */\n\tfunction page(title) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'info|pageprops',\n\t\t\tinprop: 'url',\n\t\t\tppprop: 'disambiguation',\n\t\t\ttitles: title\n\t\t})\n\t\t\t.then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t});\n\t}\n\n\t/**\n\t * Get Page by PageId\n\t * @example\n\t * wiki.findById(4335).then(page => console.log(page.title));\n\t * @method Wiki#findById\n\t * @param {integer} pageid, id of the page\n\t * @return {Promise}\n\t */\n\tfunction findById(pageid) {\n\t\treturn api(apiOptions, {\n\t\t\tprop: 'info|pageprops',\n\t\t\tinprop: 'url',\n\t\t\tppprop: 'disambiguation',\n\t\t\tpageids: pageid\n\t\t})\n\t\t\t.then(handleRedirect)\n\t\t\t.then(res => {\n\t\t\t\tconst id = Object.keys(res.query.pages)[0];\n\t\t\t\tif (!id || id === '-1') {\n\t\t\t\t\tthrow new Error('No article found');\n\t\t\t\t}\n\t\t\t\treturn wikiPage(res.query.pages[id], apiOptions);\n\t\t\t});\n\t}\n\n\t/**\n\t * Find page by query and optional predicate\n\t * @example\n\t * wiki.find('luke skywalker').then(page => console.log(page.title));\n\t * @method Wiki#find\n\t * @param {string} search query\n\t * @param {function} [predicate] - testing function for choosing which page result to fetch. Default is first result.\n\t * @return {Promise}\n\t */\n\tfunction find(query, predicate = results => results[0]) {\n\t\treturn search(query)\n\t\t\t.then(res => predicate(res.results))\n\t\t\t.then(name => page(name));\n\t}\n\n\t/**\n\t * Geographical Search\n\t * @example\n\t * wiki.geoSearch(32.329, -96.136).then(titles => console.log(titles.length));\n\t * @method Wiki#geoSearch\n\t * @param  {Number} lat - latitude\n\t * @param  {Number} lon - longitude\n\t * @param  {Number} [radius=1000] - search radius in kilometers (default: 1km)\n\t * @return {Promise} - List of page titles\n\t */\n\tfunction geoSearch(lat, lon, radius = 1000) {\n\t\treturn api(apiOptions, {\n\t\t\tlist: 'geosearch',\n\t\t\tgsradius: radius,\n\t\t\tgscoord: `${lat}|${lon}`\n\t\t}).then(res => res.query.geosearch.map(article => article.title));\n\t}\n\n\t/**\n\t * @summary Find the most viewed pages with counts\n\t * @example\n\t * wiki.mostViewed().then(list => console.log(`${list[0].title}: ${list[0].count}`))\n\t * @method Wiki#mostViewed\n\t * @returns {Promise} - Array of {title,count}\n\t */\n\tfunction mostViewed() {\n\t\treturn api(apiOptions, {\n\t\t\taction: 'query',\n\t\t\tlist: 'mostviewed'\n\t\t}).then(res =>\n\t\t\tres.query.mostviewed.map(({ title, count }) => ({ title, count }))\n\t\t);\n\t}\n\n\t/**\n\t * Fetch all page titles in wiki\n\t * @method Wiki#allPages\n\t * @return {Array} Array of pages\n\t */\n\tfunction allPages() {\n\t\treturn aggregate(apiOptions, {}, 'allpages', 'title', 'ap');\n\t}\n\n\t/**\n\t * Fetch all categories in wiki\n\t * @method Wiki#allCategories\n\t * @return {Array} Array of categories\n\t */\n\tfunction allCategories() {\n\t\treturn aggregate(apiOptions, {}, 'allcategories', '*', 'ac');\n\t}\n\n\t/**\n\t * Fetch all pages in category\n\t * @method Wiki#pagesInCategory\n\t * @param  {String} category Category to fetch from\n\t * @return {Array} Array of pages\n\t */\n\tfunction pagesInCategory(category) {\n\t\treturn aggregate(\n\t\t\tapiOptions,\n\t\t\t{\n\t\t\t\tcmtitle: category\n\t\t\t},\n\t\t\t'categorymembers',\n\t\t\t'title',\n\t\t\t'cm'\n\t\t);\n\t}\n\n\t/**\n\t * @summary Helper function to query API directly\n\t * @method Wiki#api\n\t * @param {Object} params [https://www.mediawiki.org/wiki/API:Query](https://www.mediawiki.org/wiki/API:Query)\n\t * @returns {Promise} Query Response\n\t * @example\n\t * wiki().api({\n\t *\taction: 'parse',\n\t *\tpage: 'Pet_door'\n\t * }).then(res => res.parse.title.should.equal('Pet door'));\n\t */\n\tfunction rawApi(params) {\n\t\treturn api(apiOptions, params);\n\t}\n\n\treturn {\n\t\tsearch,\n\t\trandom,\n\t\tpage,\n\t\tgeoSearch,\n\t\toptions,\n\t\tfindById,\n\t\tfind,\n\t\tallPages,\n\t\tallCategories,\n\t\tpagesInCategory,\n\t\topensearch,\n\t\tprefixSearch,\n\t\tmostViewed,\n\t\tapi: rawApi\n\t};\n}\n"]},"metadata":{},"sourceType":"script"}