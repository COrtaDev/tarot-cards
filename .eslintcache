[{"/home/conrad/Documents/tarot/tarot-cards/src/index.js":"1","/home/conrad/Documents/tarot/tarot-cards/src/App.js":"2","/home/conrad/Documents/tarot/tarot-cards/src/Components/Card.js":"3","/home/conrad/Documents/tarot/tarot-cards/src/Helpers/getCards.js":"4","/home/conrad/Documents/tarot/tarot-cards/src/Components/Deck.js":"5","/home/conrad/Documents/tarot/tarot-cards/src/Modals/SelectDeck.js":"6"},{"size":219,"mtime":1611237913582,"results":"7","hashOfConfig":"8"},{"size":806,"mtime":1611264946865,"results":"9","hashOfConfig":"8"},{"size":571,"mtime":1611262117634,"results":"10","hashOfConfig":"8"},{"size":1792,"mtime":1611262189881,"results":"11","hashOfConfig":"8"},{"size":484,"mtime":1611261096246,"results":"12","hashOfConfig":"8"},{"size":2698,"mtime":1611264909650,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1g8x1s0",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/conrad/Documents/tarot/tarot-cards/src/index.js",[],["28","29"],"/home/conrad/Documents/tarot/tarot-cards/src/App.js",["30","31"],"/home/conrad/Documents/tarot/tarot-cards/src/Components/Card.js",[],"/home/conrad/Documents/tarot/tarot-cards/src/Helpers/getCards.js",["32"],"import wiki from 'wikijs';\n\nexport async function getMajorArcana() {\n    const page = await wiki().page('Major_Arcana');\n    const [tables] = await page.tables();\n    let deck = await buildDeck(tables);\n    for (let i = 0; i < deck.length; i++) {\n        deck[i]['url'] = await getImgUrl(deck[i].queryString);\n    }\n    return deck;\n}\n\nexport async function getMinorArcana(){\n    const page = await wiki().page('Minor_Arcana');\n    const [tables] = await page.tables();\n    let deck = await buildDeck(tables);\n\n}\n\nfunction buildDeck(tables) {\n    const deck = tables.map((table) => {\n        const queryString = makeQueryString(table.card);\n        if (table.card.startsWith(\"Strength\")) {\n            return (\n                {\n                    cardName: \"Strength\",\n                    queryString: queryString,\n                }\n            )\n        };\n        if (table.card.startsWith(\"Justice\")) {\n            return (\n                {\n                    cardName: \"Justice\",\n                    queryString: queryString,\n                }\n            )\n        };\n        return (\n            {\n                cardName: table.card,\n                queryString: queryString,\n            }\n        )\n    });\n    return deck;\n}\n\nfunction makeQueryString(str) {\n    if (str.startsWith(\"Strength\")) str = \"Strength\";\n    if (str.startsWith(\"Justice\")) str = \"Justice\";\n    str = str.replaceAll(\" \", \"_\")\n    str = str + \"_(Tarot_card)\";\n    return str;\n}\n\nasync function getImgUrl(queryString) {\n    const page = await wiki().page(queryString);\n    const rawImg = await page.rawImages();\n    for (let i = 0; i < rawImg.length; i++) {\n        if (rawImg[i].title.includes(\"RWS\")) {\n            return (rawImg[i].imageinfo[0].url)\n        }\n    }\n};\n\n// export default getMajorArcana;\n","/home/conrad/Documents/tarot/tarot-cards/src/Components/Deck.js",[],"/home/conrad/Documents/tarot/tarot-cards/src/Modals/SelectDeck.js",["33","34"],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":12,"column":10,"nodeType":"41","messageId":"42","endLine":12,"endColumn":22},{"ruleId":"39","severity":1,"message":"43","line":12,"column":24,"nodeType":"41","messageId":"42","endLine":12,"endColumn":39},{"ruleId":"39","severity":1,"message":"44","line":16,"column":9,"nodeType":"41","messageId":"42","endLine":16,"endColumn":13},{"ruleId":"45","severity":1,"message":"46","line":22,"column":21,"nodeType":"47","endLine":22,"endColumn":54},{"ruleId":"45","severity":1,"message":"46","line":37,"column":21,"nodeType":"47","endLine":37,"endColumn":54},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'selectedDeck' is assigned a value but never used.","Identifier","unusedVar","'setSelectedDeck' is assigned a value but never used.","'deck' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]