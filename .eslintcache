[{"/home/conrad/Documents/tarot/tarot-cards/src/index.js":"1","/home/conrad/Documents/tarot/tarot-cards/src/App.js":"2","/home/conrad/Documents/tarot/tarot-cards/src/Components/Card.js":"3","/home/conrad/Documents/tarot/tarot-cards/src/Helpers/getCards.js":"4","/home/conrad/Documents/tarot/tarot-cards/src/Components/Deck.js":"5","/home/conrad/Documents/tarot/tarot-cards/src/Modals/SelectDeck.js":"6","/home/conrad/Documents/tarot/tarot-cards/src/Modals/CardModal.js":"7","/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js":"8"},{"size":219,"mtime":1611237913582,"results":"9","hashOfConfig":"10"},{"size":422,"mtime":1611356104448,"results":"11","hashOfConfig":"10"},{"size":911,"mtime":1611357484731,"results":"12","hashOfConfig":"10"},{"size":4530,"mtime":1611597691878,"results":"13","hashOfConfig":"10"},{"size":852,"mtime":1611597734390,"results":"14","hashOfConfig":"10"},{"size":4187,"mtime":1611351176881,"results":"15","hashOfConfig":"10"},{"size":1812,"mtime":1611358856296,"results":"16","hashOfConfig":"10"},{"size":2742,"mtime":1611431204081,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1g8x1s0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/home/conrad/Documents/tarot/tarot-cards/src/index.js",[],["39","40"],"/home/conrad/Documents/tarot/tarot-cards/src/App.js",[],"/home/conrad/Documents/tarot/tarot-cards/src/Components/Card.js",["41"],"import React, { useState } from 'react';\nimport CardModal from '../Modals/CardModal';\nimport { Image } from 'react-bootstrap';\n\n\nconst Card = (props) => {\n    const [modalShow, setModalShow] = useState(false);\n    // console.log(props)\n    return (\n        <>\n            <div>\n                <p></p>\n                <div>\n                    <p>{props.name}</p>\n                </div>\n                <div style={{ width: '200px' }}>\n                    <a onClick={() => setModalShow(true)}>\n                        <Image src={props.url} fluid />\n                    </a>\n                </div>\n                <p></p>\n            </div>\n            <CardModal\n                show={modalShow}\n                onHide={() => setModalShow(false)}\n                name={props.name}\n                url={props.url}\n                search={props.search}\n            />\n        </>\n    );\n}\n\nexport default Card;\n","/home/conrad/Documents/tarot/tarot-cards/src/Helpers/getCards.js",[],"/home/conrad/Documents/tarot/tarot-cards/src/Components/Deck.js",[],"/home/conrad/Documents/tarot/tarot-cards/src/Modals/SelectDeck.js",["42","43"],"import React, { useState, useEffect } from 'react';\nimport { Container, Jumbotron, Modal } from 'react-bootstrap';\nimport Deck from '../Components/Deck';\nimport { getMajorArcana, getMinorArcana } from '../Helpers/getCards';\n\nconst SelectDeck = (props) => {\n    const [modalShow, setModalShow] = useState(true)\n    const [selectedDeck, setSelectedDeck] = useState(null);\n    const [deck, setDeck] = useState(null);\n\n    useEffect(() => {\n        if (deck) return;\n        if (!selectedDeck) return;\n        if (selectedDeck === 'major') {\n            async function getDeck() {\n                const deck = await getMajorArcana();\n                setDeck(deck);\n            };\n            getDeck();\n        } else if (selectedDeck === 'minor') {\n            async function getDeck() {\n                const deck = await getMinorArcana();\n                setDeck(deck);\n            };\n            getDeck();\n        }\n    });\n\n    if (deck) {\n        return (\n            <>\n                <div><h1>{deck.deckName}</h1></div>\n                <p></p>\n                <Deck deck={deck} />\n                <p></p>\n            </>\n        )\n    } else {\n        return (\n            <Modal\n                {...props}\n                size=\"lg\"\n                aria-labelledby=\"contained-modal-title-vcenter\"\n                centered\n                show={modalShow}\n                selectedDeck={selectedDeck}\n            >\n                <Modal.Body>\n                    <div>\n                        <a onClick={() => {\n                            setSelectedDeck('major')\n                            setModalShow(false)\n                        }}>\n                            <Jumbotron fluid>\n                                <Container>\n                                    <h1>Major Arcana</h1>\n                                    <div>\n                                        <p>In occult practices, the Major Arcana are the trump cards of a tarot pack.\n                                    There are usually 22 such cards in a standard 78-card pack. They are typically numbered from 0 to 21.</p>\n                                        <p>Each Major Arcanum depicts a scene, mostly featuring a person or several people, with many symbolic elements. </p>\n                                        <p>In the popular mind, tarot is indelibly associated with divination, fortune telling, or cartomancy.</p>\n                                    </div>\n                                </Container>\n                            </Jumbotron>\n                        </a>\n                    </div>\n                    <div>\n                        <a onClick={() => {\n                            setSelectedDeck('minor')\n                            setModalShow(false)\n                        }}>\n                            <Jumbotron fluid>\n                                <Container>\n                                    <h1>Minor Arcana</h1>\n                                    <div>\n                                        <p>The Minor Arcana are the 56 suit cards of the 78-card deck of tarot cards.\n                                        The Minor Arcana comprise four suits with 14 cards each.\n                                         </p>\n                                        <p>Although there are variations, the Minor Arcana commonly employ the Italo-Spanish suits:</p>\n                                        <div>\n                                            <ul>\n                                                <li>Wands (alternatively, batons, clubs, or staves),</li>\n                                                <li>Cups</li>\n                                                <li>Swords</li>\n                                                <li>Pentacles (alternatively, coins, disks, or rings).</li>\n                                            </ul>\n                                        </div>\n                                    </div>\n                                </Container>\n                            </Jumbotron>\n                        </a>\n                    </div>\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\nexport default SelectDeck;\n","/home/conrad/Documents/tarot/tarot-cards/src/Modals/CardModal.js",["44","45","46"],"import React, { useEffect, useState } from 'react';\nimport Meaning from '../Components/Meaning';\nimport wiki from 'wikijs';\nimport {\n    Container, Jumbotron,\n    Modal, Button,\n    Image, Row, Col\n} from 'react-bootstrap';\n\nconst CardModal = (props) => {\n    // const [summary, setSummary] = useState(null)\n    // console.log(props)\n    // useEffect(() => {\n    //     if (summary) return;\n    //     async function getSummary() {\n    //         const page = await wiki().page(props.search);\n    //         // const summary = await page.summary();\n    //         const content = await page.sections();\n    //         console.log(content);\n    //         // console.log(summary)\n    //         // setSummary(summary);\n    //     }\n    //     getSummary();\n    // });\n\n    return (\n        <Modal\n            {...props}\n            size=\"lg\"\n            aria-labelledby=\"contained-modal-title-vcenter\"\n            centered\n        >\n            <Modal.Header closeButton>\n                <Modal.Title id=\"contained-modal-title-vcenter\">\n                    {props.name}\n                </Modal.Title>\n            </Modal.Header>\n            <Modal.Body>\n                <Jumbotron fluid>\n                    <Container fluid>\n                        <Row>\n                            <Col>\n                                <Image src={props.url} fluid />\n                            </Col>\n                            <Col>\n                                <Meaning search={props.search} />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Jumbotron>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button onClick={props.onHide}>Close</Button>\n            </Modal.Footer>\n        </Modal>\n    );\n}\n\nexport default CardModal;\n","/home/conrad/Documents/tarot/tarot-cards/src/Components/Meaning.js",["47"],"import React, { useState, useEffect } from 'react';\n\nimport wiki from 'wikijs';\n\nconst Meaning = (props) => {\n    const [info, setInfo] = useState(null);\n    const [text, setText] = useState([]);\n\n    useEffect(() => {\n        if (info) {\n            if (!text.length) {\n                handleInfo(info);\n            }\n            return;\n        } else {\n            async function getInfo() {\n                const page = await wiki().page(props.search);\n                const content = await page.sections();\n                console.log(content);\n                setInfo(content);\n            };\n            getInfo();\n        }\n    });\n    const titlesToAvoid = [\n        \"History\", \"Bibliography\", \"References\", \"Alternative decks\", \"Other versions\", \"In other decks\",\n        \"External links\", \"See also\", \"Sources\", \"In other media\", \"Further reading\",\n        \"In art\", \"Notes\", \"Citations\", \"In popular culture\", \"Extras\",\n    ];\n    function handleInfo(info) {\n        console.log(\"All Info: \", info)\n        // const titles = info.map(section => section.title);\n        let text = info.map(section => {\n            if (section.title === 'References' && info.length === 1) return \"No text found.\"\n            if (!titlesToAvoid.includes(section.title)) {\n                if (!section.content && section.items) {\n                    // console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    // console.log(\"Subsection Content: \", subectionContent);\n                    return [...subectionContent];\n                } else if (section.content && section.items) {\n                    // console.log(\"Subsections: \", section.items)\n                    let subectionContent = section.items.map(subsection => subsection.content)\n                    // console.log(\"Subsection Content: \", subectionContent);\n                    return [section.content, ...subectionContent,];\n                }\n                return section.content\n            }\n        });\n        if (!text.length) {\n            console.log('We are here...')\n            setText(['There was no text'])\n            return;\n        }\n        text = text.filter(content => content).flat();\n        // console.log(\"Titles: \", titles);\n        setText(text);\n    };\n    console.log(\"Text: \", text)\n    // if(!text.length){\n    //     console.log('We are here...')\n    //     setText(['There was no text'])\n    //     return;\n    // }\n    const cardText = text.map((text, i) => {\n        return (\n            <p key={i}>\n                {text}\n            </p>\n        );\n    })\n    return (\n        <>\n            {cardText}\n        </>\n    )\n}\n\nexport default Meaning;\n",{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":17,"column":21,"nodeType":"54","endLine":17,"endColumn":59},{"ruleId":"52","severity":1,"message":"53","line":50,"column":25,"nodeType":"54","endLine":53,"endColumn":28},{"ruleId":"52","severity":1,"message":"53","line":68,"column":25,"nodeType":"54","endLine":71,"endColumn":28},{"ruleId":"55","severity":1,"message":"56","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"59","line":1,"column":28,"nodeType":"57","messageId":"58","endLine":1,"endColumn":36},{"ruleId":"55","severity":1,"message":"60","line":3,"column":8,"nodeType":"57","messageId":"58","endLine":3,"endColumn":12},{"ruleId":"61","severity":1,"message":"62","line":33,"column":37,"nodeType":"63","messageId":"64","endLine":33,"endColumn":39},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'wiki' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]